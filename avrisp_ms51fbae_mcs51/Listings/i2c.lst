C51 COMPILER V9.60.0.0   I2C                                                               01/31/2023 15:30:37 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\Objects\i2c.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE i2c.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\ws51fbae_test) DEBUG OBJECTEXTE
                    -ND PRINT(.\Listings\i2c.lst) OBJECT(.\Objects\i2c.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          
   8          
   9          #include "MS51_16K.h"
  10          
  11          /**
  12            * @brief      Enable specify I2C controller and set divider
  13            * @param[in]  u8I2CSel:  Specify I2C port
  14            *                  - \ref I2C0
  15            *                  - \ref I2C1
  16            * @param[in]  u32SYSCLK: Define Fsys clock value in Hz.
  17            *                  - \ref 8000000
  18            * @param[in]  u32I2CCLK: The target I2C bus clock in Hz. Use HIRC the I2C clock is from 23473 ~ 2000000
  19            * @return     None
  20            * @details    The function enable the specify I2C controller and set proper clock divider
  21            *             in I2C CLOCK DIVIDED REGISTER (I2CLK) according to the target I2C Bus clock.
  22            *             I2C bus clock = PCLK / (4*(u32I2CCLK+1).
  23            * @exmaple :  I2C_Open(24000000,100000);
  24            */
  25          void I2C_Master_Open(unsigned long u32SYSCLK, unsigned long u32I2CCLK)
  26          {
  27   1          SFRS = 0x00;
  28   1          I2CLK = (u32SYSCLK/4/u32I2CCLK-1); 
  29   1          set_I2CON_I2CEN;
  30   1      
  31   1      }
  32          
  33          /**
  34            * @brief      Enable specify I2C Slave address
  35            * @param[in]  u8I2CSel:  Specify I2C port
  36            *                  - \ref I2C0
  37            *                  - \ref I2C1
  38            * @param[in]  u32SYSCLK: Define Fsys clock value in Hz.
  39            *                  - \ref 8000000
  40            * @param[in]  u32I2CCLK: The target I2C bus clock in Hz. Use HIRC the I2C clock is from 23473 ~ 2000000
  41            * @return     None
  42            * @details    The function enable the specify I2C controller and set proper clock divider
  43            *             in I2C CLOCK DIVIDED REGISTER (I2CLK) according to the target I2C Bus clock.
  44            *             I2C bus clock = PCLK / (4*(u32I2CCLK+1).
  45            * @exmaple :  I2C_Open(0xA4);
  46            */
  47          void I2C_Slave_Open( unsigned char u8SlaveAddress0)
  48          {
C51 COMPILER V9.60.0.0   I2C                                                               01/31/2023 15:30:37 PAGE 2   

  49   1              SFRS = 0; 
  50   1              I2ADDR = u8SlaveAddress0; 
  51   1              set_I2CON_I2CEN;
  52   1              set_I2CON_AA;
  53   1      }
  54          /**
  55            * @brief      Disable I2C function
  56            * @param[in]  u8I2CSel:  Specify I2C port
  57            *                  - \ref I2C0
  58            *                  - \ref I2C1
  59            * @exmaple :  I2C0_Close(I2C0);
  60          */
  61          void I2C_Close(void)
  62          {
  63   1          SFRS = 0;
  64   1          clr_I2CON_I2CEN;
  65   1      }
  66          
  67          /**
  68            * @brief      Enable specify I2C controller interrupt, also need enable globle interrupt in main loop.
  69            * @param[in]  u8I2CSel:  Specify I2C port
  70            *                  - \ref I2C0
  71            *                  - \ref I2C1
  72            * @param[in]  u8I2CStatus:  Specify I2C interrupt status
  73            *                  - \ref Enable
  74            *                  - \ref Disable
  75            * @exmaple :  I2C_Interrupt();
  76          */
  77          void I2C_Interrupt(unsigned char u8I2CStatus)
  78          {
  79   1          SFRS = 0;
  80   1               switch (u8I2CStatus)
  81   1               {
  82   2                 case Enable: ENABLE_I2C_INTERRUPT; break;
  83   2                 case Disable: DISABLE_I2C_INTERRUPT; break;
  84   2               }
  85   1      }
  86          
  87          /**
  88            * @brief      Get I2C bus status value
  89            * @param[in]  u8I2CSel:  Specify I2C port
  90            * @param[in]  u8I2CSel:  Specify I2C port
  91            *                  - \ref I2C0
  92            *                  - \ref I2C1
  93            * @return     I2C status data 
  94            * @exmaple :  I2C_GetStatus(I2C0);
  95          */
  96          unsigned char I2C_GetStatus(void)
  97          {
  98   1          unsigned char u8i2cstat;
  99   1          SFRS = 0;
 100   1           u8i2cstat=I2STAT;
 101   1          return (u8i2cstat);
 102   1      }
 103          
 104          /**
 105           * @brief      Enable Time-out Function with support long time-out
 106           * @param[in]  u8I2CSel:  Specify I2C port
 107            *                  - \ref I2C0
 108            *                  - \ref I2C1
 109            * @param[in]  u8I2CTRStatus:  Specify I2C Timer status
 110            *                  - \ref Enable
C51 COMPILER V9.60.0.0   I2C                                                               01/31/2023 15:30:37 PAGE 3   

 111            *                  - \ref Disable
 112           * @return     None
 113           * @Note       This function enable time-out function and configure DIV4 to support longer time-out.
 114           * @example    I2C_Timeout(Enable);
 115           */
 116          void I2C_Timeout( unsigned char u8I2CTRStatus )
 117          {
 118   1              switch (u8I2CTRStatus)
 119   1              {
 120   2                case Enable: set_I2TOC_DIV; set_I2TOC_I2TOCEN; break;
 121   2                case Disable: clr_I2TOC_I2TOCEN; break;
 122   2              }
 123   1      }
 124          
 125          
 126          void I2C_ClearTimeoutFlag(void)
 127          {
 128   1          SFRS = 0;
 129   1          I2TOC&=0xFE; ;
 130   1      }
 131          
 132          /**
 133           * @brief      Special design for 8051 I2C SI check
 134           * @param[in]  none
 135           * @return     None
 136           * @details    This function setting the slave address mask bit.
 137           */
 138          void I2C0_SI_Check(void)
 139          {
 140   1          clr_I2CON_SI;
 141   1          
 142   1          while(I2CON&SET_BIT3)     /* while SI==0; */
 143   1          {
 144   2              if(I2STAT == 0x00)
 145   2              {
 146   3                  set_I2CON_STO;
 147   3              }
 148   2              SI = 0;
 149   2              if(!SI)
 150   2              {
 151   3                  clr_I2CON_I2CEN;
 152   3                  set_I2CON_I2CEN;
 153   3                  clr_I2CON_SI;
 154   3              } 
 155   2          }
 156   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    120    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
