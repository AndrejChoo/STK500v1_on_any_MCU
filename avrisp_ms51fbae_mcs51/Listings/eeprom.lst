C51 COMPILER V9.60.0.0   EEPROM                                                            01/31/2023 15:30:37 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE eeprom.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\ws51fbae_test) DEBUG OBJECTE
                    -XTEND PRINT(.\Listings\eeprom.lst) OBJECT(.\Objects\eeprom.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          
   8          //********************************************************************************************************
             -***
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //********************************************************************************************************
             -***
  12          #include "MS51_16K.H"
  13          
  14          
  15          volatile unsigned char xdata page_buffer[128];
  16          /**
  17           * @brief       Write Dataflash as EEPROM, 
  18           * @param       u16EPAddr the 16bit EEPROM start address. Any of APROM address can be defined as start add
             -ress (0x3800)
  19           * @param       u8EPData the 8bit value need storage in (0x3800)
  20           * @return      none
  21           * @details     Storage dataflash page data into XRAM 380H-400H, modify data in XRAM, Erase dataflash page
             -, writer updated XRAM data into dataflash
  22           */
  23          void Write_DATAFLASH_BYTE(unsigned int u16EPAddr,unsigned char u8EPData)
  24          {
  25   1        unsigned char looptmp=0;
  26   1        unsigned int u16_addrl_r;
  27   1        unsigned int RAMtmp;
  28   1        
  29   1      //Check page start address
  30   1        u16_addrl_r=(u16EPAddr/128)*128;
  31   1      //Save APROM data to XRAM0
  32   1        for(looptmp=0;looptmp<0x80;looptmp++)
  33   1        {
  34   2          RAMtmp = Read_APROM_BYTE((unsigned int code *)(u16_addrl_r+looptmp));
  35   2          page_buffer[looptmp]=RAMtmp;
  36   2        }
  37   1      // Modify customer data in XRAM
  38   1        page_buffer[u16EPAddr&0x7f] = u8EPData;
  39   1        
  40   1      //Erase APROM DATAFLASH page
  41   1          IAPAL = u16_addrl_r&0xff;
  42   1          IAPAH = (u16_addrl_r>>8)&0xff;
  43   1          IAPFD = 0xFF;
  44   1          set_CHPCON_IAPEN; 
C51 COMPILER V9.60.0.0   EEPROM                                                            01/31/2023 15:30:37 PAGE 2   

  45   1          set_IAPUEN_APUEN;
  46   1          IAPCN = 0x22;     
  47   1           set_IAPTRG_IAPGO; 
  48   1          
  49   1      //Save changed RAM data to APROM DATAFLASH
  50   1          set_CHPCON_IAPEN; 
  51   1          set_IAPUEN_APUEN;
  52   1          IAPCN = 0x21;
  53   1          for(looptmp=0;looptmp<0x80;looptmp++)
  54   1          {
  55   2            IAPAL = (u16_addrl_r&0xff)+looptmp;
  56   2            IAPAH = (u16_addrl_r>>8)&0xff;
  57   2            IAPFD = page_buffer[looptmp];
  58   2            set_IAPTRG_IAPGO;      
  59   2          }
  60   1          clr_IAPUEN_APUEN;
  61   1          clr_CHPCON_IAPEN;
  62   1      }  
  63          
  64          
  65          //-------------------------------------------------------------------------
  66          void Write_DATAFLASH_ARRAY(unsigned int u16_addr,unsigned char *pDat,unsigned int num)
  67          {
  68   1        unsigned char CPageAddr,EPageAddr,cnt;
  69   1        CPageAddr=u16_addr>>7;
  70   1        EPageAddr=(u16_addr+num)>>7;
  71   1        while(CPageAddr!=EPageAddr)
  72   1        {
  73   2          cnt=WriteDataToOnePage(u16_addr,pDat,128);
  74   2          u16_addr+=cnt;
  75   2          pDat+=cnt;
  76   2          num-=cnt;
  77   2          CPageAddr=u16_addr>>7;
  78   2        }
  79   1        if(num)
  80   1        {
  81   2          WriteDataToOnePage(u16_addr,pDat,num);
  82   2        }
  83   1      }
  84          //-------------------------------------------------------------------------
  85          void Read_DATAFLASH_ARRAY(unsigned int u16_addr,unsigned char *pDat,unsigned int num)
  86          {
  87   1        unsigned int i;
  88   1        for(i=0;i<num;i++)
  89   1          pDat[i] = *(unsigned char code *)(u16_addr+i);
  90   1      }
  91          
  92          //--------------------------------------------------------------------------------------------------------
             ----
  93          unsigned char WriteDataToOnePage(unsigned int u16_addr,const unsigned char *pDat,unsigned char num)
  94          {
  95   1        unsigned char i,offset;
  96   1        unsigned char code *pCode;
  97   1        unsigned char xdata xd_tmp[128];
  98   1      
  99   1        set_CHPCON_IAPEN; 
 100   1        set_IAPUEN_APUEN;
 101   1      
 102   1        offset=u16_addr&0x007F;
 103   1        i = PAGE_SIZE - offset;
 104   1        if(num>i)num=i;
 105   1        pCode = (unsigned char code *)u16_addr;
C51 COMPILER V9.60.0.0   EEPROM                                                            01/31/2023 15:30:37 PAGE 3   

 106   1        for(i=0;i<num;i++)
 107   1        {
 108   2          if(pCode[i]!=0xFF)break;
 109   2        }
 110   1        if(i==num)
 111   1        {
 112   2          IAPCN =BYTE_PROGRAM_APROM;
 113   2          IAPAL = u16_addr;
 114   2          IAPAH = u16_addr>>8;
 115   2          for(i=0;i<num;i++)
 116   2          {
 117   3            IAPFD = pDat[i];
 118   3            set_IAPTRG_IAPGO;
 119   3            IAPAL++;
 120   3          }
 121   2          for(i=0;i<num;i++)
 122   2          {
 123   3            if(pCode[i]!=pDat[i])break;
 124   3          }
 125   2          if(i!=num) goto WriteDataToPage20;
 126   2        }
 127   1        else
 128   1        {
 129   2          WriteDataToPage20:
 130   2          pCode = (unsigned char code *)(u16_addr&0xff80);
 131   2          for(i=0;i<128;i++)
 132   2          {
 133   3            xd_tmp[i] = pCode[i];
 134   3          }
 135   2          for(i=0;i<num;i++)
 136   2          {
 137   3            xd_tmp[offset+i] = pDat[i];
 138   3          }
 139   2          do
 140   2          {
 141   3            IAPAL = (u16_addr&0xff80);
 142   3            IAPAH = u16_addr>>8;
 143   3            IAPCN = PAGE_ERASE_APROM;
 144   3            IAPFD = 0xFF;  
 145   3            set_IAPTRG_IAPGO; 
 146   3            IAPCN =BYTE_PROGRAM_APROM;
 147   3            for(i=0;i<128;i++)
 148   3            {
 149   4              IAPFD = xd_tmp[i];
 150   4              set_IAPTRG_IAPGO;
 151   4              IAPAL++;
 152   4            }
 153   3            for(i=0;i<128;i++)
 154   3            {
 155   4              if(pCode[i]!=xd_tmp[i])break;
 156   4            }
 157   3          }while(i!=128);
 158   2          
 159   2        }
 160   1        clr_CHPCON_IAPEN;
 161   1        
 162   1        return num;
 163   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    995    ----
C51 COMPILER V9.60.0.0   EEPROM                                                            01/31/2023 15:30:37 PAGE 4   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128     128
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      29
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
