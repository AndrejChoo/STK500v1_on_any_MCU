C51 COMPILER V9.60.0.0   PWM                                                               01/31/2023 15:30:37 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Objects\pwm.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pwm.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\ws51fbae_test) DEBUG OBJECTEXTE
                    -ND PRINT(.\Listings\pwm.lst) OBJECT(.\Objects\pwm.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          
   8          //********************************************************************************************************
             -***
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //********************************************************************************************************
             -***
  12          
  13          #include "MS51_16K.h"
  14          
  15          /****** PWM0 SETTING ********/
  16           /**
  17           * @brief This function config PWM clock base
  18           * @param[in] u8PWMCLKSource PWM0 clock source from HIRC or TIMER1.
  19                             - \ref  PWM_FSYS
  20                             - \ref  PWM_TIMER1
  21           * @param[in] u8PWM0CLKDIV the divider value of PWM clock.  - \ref (1\2\4\8\16\32\64\128) 
  22           * @return none
  23           * @note        
  24           * @example PWM0_ClockSource(PWM0_HIRC,128);
  25            */
  26          void PWM0_ClockSource(unsigned char u8PWMCLKSource, unsigned char u8PWM0CLKDIV)
  27          {
  28   1          switch (u8PWMCLKSource)
  29   1          {
  30   2              case PWM_FSYS:  clr_CKCON_PWMCKS; break;
  31   2              case PWM_TIMER1: set_CKCON_PWMCKS; break;
  32   2          }
  33   1          switch (u8PWM0CLKDIV)
  34   1          {
  35   2      //        case 1:    PWM0_CLOCK_DIV_1; break;
  36   2              case 2:    PWM0_CLOCK_DIV_2; break;
  37   2              case 4:    PWM0_CLOCK_DIV_4; break;
  38   2              case 8:    PWM0_CLOCK_DIV_8; break;
  39   2              case 16:   PWM0_CLOCK_DIV_16; break;
  40   2              case 32:   PWM0_CLOCK_DIV_32; break;
  41   2              case 64:   PWM0_CLOCK_DIV_64; break;
  42   2              case 128:  PWM0_CLOCK_DIV_128; break;
  43   2          }
  44   1      }
  45          
  46           /**
C51 COMPILER V9.60.0.0   PWM                                                               01/31/2023 15:30:37 PAGE 2   

  47           * @brief This function config PWM generator 
  48           * @param[in] u8ChannelNum PWM channel number. Valid values are between 0~5
  49           * @param[in] u8OPMode PWM run mode select from Independent, Complementary or Synchronized mode.
  50           * @param[in] u8PwmType select Edge-Aligned Type or Center-Aligned Type
  51           * @param[in] u32PWM0Frequency Target generator frequency, note the actually PWM period is 16bit value. fr
             -om 0x0000 ~ 0xFFFF
  52           * @param[in] u16DutyCycle Target generator duty cycle percentage. Valid range are between 0 ~ 100. 10 mea
             -ns 10%, 20 means 20%...
  53           * @return none
  54           * @note  none       
  55           * @example PWM0_ConfigOutputChannel(0,Independent,EdgeAligned,0x6FF,10);
  56            */
  57          void PWM0_ConfigOutputChannel(unsigned char u8PWM0ChannelNum,
  58                                        unsigned char u8PWM0OPMode,
  59                                        unsigned char u8PWM0PwmType,
  60                                        unsigned long u32PWM0Frequency,
  61                                        unsigned int u16PWM0DutyCycle)
  62          {
  63   1        set_SFRS_SFRPAGE;
  64   1        switch (u8PWM0OPMode)
  65   1        {
  66   2            case Independent:    PWMCON1&=0x3F;break;
  67   2            case Complementary:  PWMCON1&=0x3F;PWMCON1|=0x40;break;
  68   2            case Synchronous:    PWMCON1&=0x3F;PWMCON1|=0x80;break;
  69   2        }
  70   1        switch (u8PWM0PwmType)
  71   1        {
  72   2            case EdgeAligned:    PWMCON1&=0xEF;break;
  73   2            case CenterAligned:  PWMCON1|=0x10;break;
  74   2        }
  75   1        switch (u8PWM0ChannelNum)
  76   1        {
  77   2            case 0:  PWM1H=(u32PWM0Frequency*u16PWM0DutyCycle/100)>>8;PWM0L=(u32PWM0Frequency*u16PWM0DutyCycle/1
             -00);break;
  78   2            case 1:  PWM1H=(u32PWM0Frequency*u16PWM0DutyCycle/100)>>8;PWM1L=(u32PWM0Frequency*u16PWM0DutyCycle/1
             -00);break;
  79   2            case 2:  PWM2H=(u32PWM0Frequency*u16PWM0DutyCycle/100)>>8;PWM2L=(u32PWM0Frequency*u16PWM0DutyCycle/1
             -00);break;
  80   2            case 3:  PWM3H=(u32PWM0Frequency*u16PWM0DutyCycle/100)>>8;PWM3L=(u32PWM0Frequency*u16PWM0DutyCycle/1
             -00);break;
  81   2            case 4:  PWM4H=(u32PWM0Frequency*u16PWM0DutyCycle/100)>>8;PWM4L=(u32PWM0Frequency*u16PWM0DutyCycle/1
             -00);break;
  82   2            case 5:  PWM5H=(u32PWM0Frequency*u16PWM0DutyCycle/100)>>8;PWM5L=(u32PWM0Frequency*u16PWM0DutyCycle/1
             -00);break;
  83   2        }
  84   1        PWMPH = u32PWM0Frequency>>8;
  85   1        PWMPL = u32PWM0Frequency;
  86   1        clr_SFRS_SFRPAGE;}
  87          
  88           /**
  89           * @brief This function config PWM Complementary pair inset dead zone time 
  90           * @param[in] u8PWM0Pair PWM0 channel pair need insert pair define. (PWM0_CH01 / PWM0_CH23 / PWM0_CH45 / P
             -WM0_ALL) 
  91           * @param[in] u8PWM0DZValue the insert value.  PWM dead-time = (u8PWM0DZValue+1)/Fsys
  92           * @return none
  93           * @note        
  94           * @example PWM0_DeadZoneEnable(PWM0_CH01,0x55);
  95            */
  96          void PWM0_DeadZoneEnable(unsigned char u8PWM0Pair, unsigned int u16PWM0DZValue)
  97          {
  98   1          SFRS = 0x01;
  99   1          BIT_TMP=EA;EA=0;
C51 COMPILER V9.60.0.0   PWM                                                               01/31/2023 15:30:37 PAGE 3   

 100   1          ACC=u16PWM0DZValue&0x0100>>4;
 101   1          TA=0xAA;TA=0x55;PDTEN|=ACC;
 102   1          switch (u8PWM0Pair)
 103   1          {
 104   2              case PWM0_CH01:  TA=0xAA;TA=0x55;PDTEN|=0x01; break;
 105   2              case PWM0_CH23:  TA=0xAA;TA=0x55;PDTEN|=0x02; break;
 106   2              case PWM0_CH45:  TA=0xAA;TA=0x55;PDTEN|=0x04; break;
 107   2              case PWM0_ALL:   TA=0xAA;TA=0x55;PDTEN|=0x07; break;
 108   2          }
 109   1          ACC=u16PWM0DZValue;
 110   1          TA=0xAA;TA=0x55;
 111   1          PDTCNT=ACC;
 112   1          EA=BIT_TMP;
 113   1      }
 114          
 115          /**
 116          * @brief This function disable all PWM Complementary pair inset dead zone time 
 117          * @param[in] none
 118          * @return none
 119          * @note        
 120          * @example PWM0_DeadZone_ALL_Disable();
 121          */
 122          void PWM0_DeadZone_ALL_Disable(void)
 123          {
 124   1          SFRS = 0x01;
 125   1          TA=0xAA;TA=0x55;
 126   1          PDTEN=0x00;
 127   1          EA=BIT_TMP;
 128   1      }
 129              
 130          /**
 131          * @brief This function action all PWM run
 132          * @param[in] none
 133          * @return none
 134          * @note        
 135          * @example PWM0_RUN();
 136          */
 137          void PWM0_RUN(void)
 138          {
 139   1          set_PWMCON0_PWMRUN;
 140   1      }
 141          
 142          /**
 143          * @brief This function action all PWM stop run
 144          * @param[in] none
 145          * @return none
 146          * @note        
 147          * @example PWM0_RUN();
 148          */
 149          void PWM0_STOP(void)
 150          {
 151   1        clr_PWMCON0_PWMRUN;
 152   1      }
 153          
 154          /**
 155          * @brief This function action PWM value reload
 156          * @param[in] none
 157          * @return none
 158          * @note        
 159          * @example PWM0_Reload();
 160          */
 161          void PWM0_Reload(void)
C51 COMPILER V9.60.0.0   PWM                                                               01/31/2023 15:30:37 PAGE 4   

 162          {
 163   1          set_PWMCON0_LOAD;
 164   1      }
 165          
 166          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    738    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
