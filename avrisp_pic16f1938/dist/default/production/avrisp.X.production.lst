

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Feb 07 14:29:47 2024

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F1938
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    50                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    51                           	dabs	1,0x620,48
    52                           	dabs	1,0x5A0,80
    53                           	dabs	1,0x520,80
    54                           	dabs	1,0x4C0,48
    55                           	dabs	1,0x4A0,32
    56                           	dabs	1,0x420,80
    57                           	dabs	1,0x3A0,80
    58                           	dabs	1,0x330,64
    59                           	dabs	1,0x21F0,0,_buff
    60                           	dabs	1,0x22F0,0,_exchange
    61                           	dabs	1,0x7E,2
    62  0000                     
    63                           ; Version 2.40
    64                           ; Generated 17/11/2021 GMT
    65                           ; 
    66                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution. Publication is not required when
    80                           ;        this file is used in an embedded application.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC16F1938 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  0007                     	;# 
   106  0008                     	;# 
   107  0009                     	;# 
   108  000A                     	;# 
   109  000B                     	;# 
   110  000C                     	;# 
   111  000D                     	;# 
   112  000E                     	;# 
   113  0010                     	;# 
   114  0011                     	;# 
   115  0012                     	;# 
   116  0013                     	;# 
   117  0015                     	;# 
   118  0016                     	;# 
   119  0016                     	;# 
   120  0017                     	;# 
   121  0018                     	;# 
   122  0019                     	;# 
   123  001A                     	;# 
   124  001B                     	;# 
   125  001C                     	;# 
   126  001E                     	;# 
   127  001F                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  0090                     	;# 
   132  0091                     	;# 
   133  0092                     	;# 
   134  0093                     	;# 
   135  0095                     	;# 
   136  0096                     	;# 
   137  0097                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009A                     	;# 
   141  009B                     	;# 
   142  009B                     	;# 
   143  009C                     	;# 
   144  009D                     	;# 
   145  009E                     	;# 
   146  010C                     	;# 
   147  010D                     	;# 
   148  010E                     	;# 
   149  0110                     	;# 
   150  0111                     	;# 
   151  0112                     	;# 
   152  0113                     	;# 
   153  0114                     	;# 
   154  0115                     	;# 
   155  0116                     	;# 
   156  0117                     	;# 
   157  0118                     	;# 
   158  0119                     	;# 
   159  011A                     	;# 
   160  011B                     	;# 
   161  011D                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0193                     	;# 
   170  0194                     	;# 
   171  0195                     	;# 
   172  0196                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019F                     	;# 
   184  020D                     	;# 
   185  0210                     	;# 
   186  0211                     	;# 
   187  0212                     	;# 
   188  0213                     	;# 
   189  0214                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0216                     	;# 
   193  0217                     	;# 
   194  0291                     	;# 
   195  0291                     	;# 
   196  0292                     	;# 
   197  0293                     	;# 
   198  0294                     	;# 
   199  0295                     	;# 
   200  0295                     	;# 
   201  0296                     	;# 
   202  0298                     	;# 
   203  0298                     	;# 
   204  0299                     	;# 
   205  029A                     	;# 
   206  029B                     	;# 
   207  029C                     	;# 
   208  029C                     	;# 
   209  029D                     	;# 
   210  029E                     	;# 
   211  029F                     	;# 
   212  0311                     	;# 
   213  0311                     	;# 
   214  0312                     	;# 
   215  0313                     	;# 
   216  0314                     	;# 
   217  0315                     	;# 
   218  0315                     	;# 
   219  0316                     	;# 
   220  0318                     	;# 
   221  0318                     	;# 
   222  0319                     	;# 
   223  031A                     	;# 
   224  031C                     	;# 
   225  031C                     	;# 
   226  031D                     	;# 
   227  031E                     	;# 
   228  0394                     	;# 
   229  0395                     	;# 
   230  0396                     	;# 
   231  0415                     	;# 
   232  0416                     	;# 
   233  0417                     	;# 
   234  041C                     	;# 
   235  041D                     	;# 
   236  041E                     	;# 
   237  0791                     	;# 
   238  0792                     	;# 
   239  0793                     	;# 
   240  0794                     	;# 
   241  0795                     	;# 
   242  0798                     	;# 
   243  0799                     	;# 
   244  07A0                     	;# 
   245  07A1                     	;# 
   246  07A3                     	;# 
   247  07A4                     	;# 
   248  07A6                     	;# 
   249  07A7                     	;# 
   250  07A9                     	;# 
   251  07AA                     	;# 
   252  0FE4                     	;# 
   253  0FE5                     	;# 
   254  0FE6                     	;# 
   255  0FE7                     	;# 
   256  0FE8                     	;# 
   257  0FE9                     	;# 
   258  0FEA                     	;# 
   259  0FEB                     	;# 
   260  0FED                     	;# 
   261  0FEE                     	;# 
   262  0FEF                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  0008                     	;# 
   272  0009                     	;# 
   273  000A                     	;# 
   274  000B                     	;# 
   275  000C                     	;# 
   276  000D                     	;# 
   277  000E                     	;# 
   278  0010                     	;# 
   279  0011                     	;# 
   280  0012                     	;# 
   281  0013                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001B                     	;# 
   290  001C                     	;# 
   291  001E                     	;# 
   292  001F                     	;# 
   293  008C                     	;# 
   294  008D                     	;# 
   295  008E                     	;# 
   296  0090                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0093                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0098                     	;# 
   304  0099                     	;# 
   305  009A                     	;# 
   306  009B                     	;# 
   307  009B                     	;# 
   308  009C                     	;# 
   309  009D                     	;# 
   310  009E                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  0110                     	;# 
   315  0111                     	;# 
   316  0112                     	;# 
   317  0113                     	;# 
   318  0114                     	;# 
   319  0115                     	;# 
   320  0116                     	;# 
   321  0117                     	;# 
   322  0118                     	;# 
   323  0119                     	;# 
   324  011A                     	;# 
   325  011B                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0199                     	;# 
   339  019A                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019C                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020D                     	;# 
   350  0210                     	;# 
   351  0211                     	;# 
   352  0212                     	;# 
   353  0213                     	;# 
   354  0214                     	;# 
   355  0215                     	;# 
   356  0215                     	;# 
   357  0216                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0294                     	;# 
   364  0295                     	;# 
   365  0295                     	;# 
   366  0296                     	;# 
   367  0298                     	;# 
   368  0298                     	;# 
   369  0299                     	;# 
   370  029A                     	;# 
   371  029B                     	;# 
   372  029C                     	;# 
   373  029C                     	;# 
   374  029D                     	;# 
   375  029E                     	;# 
   376  029F                     	;# 
   377  0311                     	;# 
   378  0311                     	;# 
   379  0312                     	;# 
   380  0313                     	;# 
   381  0314                     	;# 
   382  0315                     	;# 
   383  0315                     	;# 
   384  0316                     	;# 
   385  0318                     	;# 
   386  0318                     	;# 
   387  0319                     	;# 
   388  031A                     	;# 
   389  031C                     	;# 
   390  031C                     	;# 
   391  031D                     	;# 
   392  031E                     	;# 
   393  0394                     	;# 
   394  0395                     	;# 
   395  0396                     	;# 
   396  0415                     	;# 
   397  0416                     	;# 
   398  0417                     	;# 
   399  041C                     	;# 
   400  041D                     	;# 
   401  041E                     	;# 
   402  0791                     	;# 
   403  0792                     	;# 
   404  0793                     	;# 
   405  0794                     	;# 
   406  0795                     	;# 
   407  0798                     	;# 
   408  0799                     	;# 
   409  07A0                     	;# 
   410  07A1                     	;# 
   411  07A3                     	;# 
   412  07A4                     	;# 
   413  07A6                     	;# 
   414  07A7                     	;# 
   415  07A9                     	;# 
   416  07AA                     	;# 
   417  0FE4                     	;# 
   418  0FE5                     	;# 
   419  0FE6                     	;# 
   420  0FE7                     	;# 
   421  0FE8                     	;# 
   422  0FE9                     	;# 
   423  0FEA                     	;# 
   424  0FEB                     	;# 
   425  0FED                     	;# 
   426  0FEE                     	;# 
   427  0FEF                     	;# 
   428  0000                     	;# 
   429  0001                     	;# 
   430  0002                     	;# 
   431  0003                     	;# 
   432  0004                     	;# 
   433  0005                     	;# 
   434  0006                     	;# 
   435  0007                     	;# 
   436  0008                     	;# 
   437  0009                     	;# 
   438  000A                     	;# 
   439  000B                     	;# 
   440  000C                     	;# 
   441  000D                     	;# 
   442  000E                     	;# 
   443  0010                     	;# 
   444  0011                     	;# 
   445  0012                     	;# 
   446  0013                     	;# 
   447  0015                     	;# 
   448  0016                     	;# 
   449  0016                     	;# 
   450  0017                     	;# 
   451  0018                     	;# 
   452  0019                     	;# 
   453  001A                     	;# 
   454  001B                     	;# 
   455  001C                     	;# 
   456  001E                     	;# 
   457  001F                     	;# 
   458  008C                     	;# 
   459  008D                     	;# 
   460  008E                     	;# 
   461  0090                     	;# 
   462  0091                     	;# 
   463  0092                     	;# 
   464  0093                     	;# 
   465  0095                     	;# 
   466  0096                     	;# 
   467  0097                     	;# 
   468  0098                     	;# 
   469  0099                     	;# 
   470  009A                     	;# 
   471  009B                     	;# 
   472  009B                     	;# 
   473  009C                     	;# 
   474  009D                     	;# 
   475  009E                     	;# 
   476  010C                     	;# 
   477  010D                     	;# 
   478  010E                     	;# 
   479  0110                     	;# 
   480  0111                     	;# 
   481  0112                     	;# 
   482  0113                     	;# 
   483  0114                     	;# 
   484  0115                     	;# 
   485  0116                     	;# 
   486  0117                     	;# 
   487  0118                     	;# 
   488  0119                     	;# 
   489  011A                     	;# 
   490  011B                     	;# 
   491  011D                     	;# 
   492  018C                     	;# 
   493  018D                     	;# 
   494  0191                     	;# 
   495  0191                     	;# 
   496  0192                     	;# 
   497  0193                     	;# 
   498  0193                     	;# 
   499  0193                     	;# 
   500  0194                     	;# 
   501  0195                     	;# 
   502  0196                     	;# 
   503  0199                     	;# 
   504  019A                     	;# 
   505  019B                     	;# 
   506  019B                     	;# 
   507  019B                     	;# 
   508  019B                     	;# 
   509  019C                     	;# 
   510  019C                     	;# 
   511  019D                     	;# 
   512  019E                     	;# 
   513  019F                     	;# 
   514  020D                     	;# 
   515  0210                     	;# 
   516  0211                     	;# 
   517  0212                     	;# 
   518  0213                     	;# 
   519  0214                     	;# 
   520  0215                     	;# 
   521  0215                     	;# 
   522  0216                     	;# 
   523  0217                     	;# 
   524  0291                     	;# 
   525  0291                     	;# 
   526  0292                     	;# 
   527  0293                     	;# 
   528  0294                     	;# 
   529  0295                     	;# 
   530  0295                     	;# 
   531  0296                     	;# 
   532  0298                     	;# 
   533  0298                     	;# 
   534  0299                     	;# 
   535  029A                     	;# 
   536  029B                     	;# 
   537  029C                     	;# 
   538  029C                     	;# 
   539  029D                     	;# 
   540  029E                     	;# 
   541  029F                     	;# 
   542  0311                     	;# 
   543  0311                     	;# 
   544  0312                     	;# 
   545  0313                     	;# 
   546  0314                     	;# 
   547  0315                     	;# 
   548  0315                     	;# 
   549  0316                     	;# 
   550  0318                     	;# 
   551  0318                     	;# 
   552  0319                     	;# 
   553  031A                     	;# 
   554  031C                     	;# 
   555  031C                     	;# 
   556  031D                     	;# 
   557  031E                     	;# 
   558  0394                     	;# 
   559  0395                     	;# 
   560  0396                     	;# 
   561  0415                     	;# 
   562  0416                     	;# 
   563  0417                     	;# 
   564  041C                     	;# 
   565  041D                     	;# 
   566  041E                     	;# 
   567  0791                     	;# 
   568  0792                     	;# 
   569  0793                     	;# 
   570  0794                     	;# 
   571  0795                     	;# 
   572  0798                     	;# 
   573  0799                     	;# 
   574  07A0                     	;# 
   575  07A1                     	;# 
   576  07A3                     	;# 
   577  07A4                     	;# 
   578  07A6                     	;# 
   579  07A7                     	;# 
   580  07A9                     	;# 
   581  07AA                     	;# 
   582  0FE4                     	;# 
   583  0FE5                     	;# 
   584  0FE6                     	;# 
   585  0FE7                     	;# 
   586  0FE8                     	;# 
   587  0FE9                     	;# 
   588  0FEA                     	;# 
   589  0FEB                     	;# 
   590  0FED                     	;# 
   591  0FEE                     	;# 
   592  0FEF                     	;# 
   593  0000                     	;# 
   594  0001                     	;# 
   595  0002                     	;# 
   596  0003                     	;# 
   597  0004                     	;# 
   598  0005                     	;# 
   599  0006                     	;# 
   600  0007                     	;# 
   601  0008                     	;# 
   602  0009                     	;# 
   603  000A                     	;# 
   604  000B                     	;# 
   605  000C                     	;# 
   606  000D                     	;# 
   607  000E                     	;# 
   608  0010                     	;# 
   609  0011                     	;# 
   610  0012                     	;# 
   611  0013                     	;# 
   612  0015                     	;# 
   613  0016                     	;# 
   614  0016                     	;# 
   615  0017                     	;# 
   616  0018                     	;# 
   617  0019                     	;# 
   618  001A                     	;# 
   619  001B                     	;# 
   620  001C                     	;# 
   621  001E                     	;# 
   622  001F                     	;# 
   623  008C                     	;# 
   624  008D                     	;# 
   625  008E                     	;# 
   626  0090                     	;# 
   627  0091                     	;# 
   628  0092                     	;# 
   629  0093                     	;# 
   630  0095                     	;# 
   631  0096                     	;# 
   632  0097                     	;# 
   633  0098                     	;# 
   634  0099                     	;# 
   635  009A                     	;# 
   636  009B                     	;# 
   637  009B                     	;# 
   638  009C                     	;# 
   639  009D                     	;# 
   640  009E                     	;# 
   641  010C                     	;# 
   642  010D                     	;# 
   643  010E                     	;# 
   644  0110                     	;# 
   645  0111                     	;# 
   646  0112                     	;# 
   647  0113                     	;# 
   648  0114                     	;# 
   649  0115                     	;# 
   650  0116                     	;# 
   651  0117                     	;# 
   652  0118                     	;# 
   653  0119                     	;# 
   654  011A                     	;# 
   655  011B                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018D                     	;# 
   659  0191                     	;# 
   660  0191                     	;# 
   661  0192                     	;# 
   662  0193                     	;# 
   663  0193                     	;# 
   664  0193                     	;# 
   665  0194                     	;# 
   666  0195                     	;# 
   667  0196                     	;# 
   668  0199                     	;# 
   669  019A                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019C                     	;# 
   675  019C                     	;# 
   676  019D                     	;# 
   677  019E                     	;# 
   678  019F                     	;# 
   679  020D                     	;# 
   680  0210                     	;# 
   681  0211                     	;# 
   682  0212                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0216                     	;# 
   688  0217                     	;# 
   689  0291                     	;# 
   690  0291                     	;# 
   691  0292                     	;# 
   692  0293                     	;# 
   693  0294                     	;# 
   694  0295                     	;# 
   695  0295                     	;# 
   696  0296                     	;# 
   697  0298                     	;# 
   698  0298                     	;# 
   699  0299                     	;# 
   700  029A                     	;# 
   701  029B                     	;# 
   702  029C                     	;# 
   703  029C                     	;# 
   704  029D                     	;# 
   705  029E                     	;# 
   706  029F                     	;# 
   707  0311                     	;# 
   708  0311                     	;# 
   709  0312                     	;# 
   710  0313                     	;# 
   711  0314                     	;# 
   712  0315                     	;# 
   713  0315                     	;# 
   714  0316                     	;# 
   715  0318                     	;# 
   716  0318                     	;# 
   717  0319                     	;# 
   718  031A                     	;# 
   719  031C                     	;# 
   720  031C                     	;# 
   721  031D                     	;# 
   722  031E                     	;# 
   723  0394                     	;# 
   724  0395                     	;# 
   725  0396                     	;# 
   726  0415                     	;# 
   727  0416                     	;# 
   728  0417                     	;# 
   729  041C                     	;# 
   730  041D                     	;# 
   731  041E                     	;# 
   732  0791                     	;# 
   733  0792                     	;# 
   734  0793                     	;# 
   735  0794                     	;# 
   736  0795                     	;# 
   737  0798                     	;# 
   738  0799                     	;# 
   739  07A0                     	;# 
   740  07A1                     	;# 
   741  07A3                     	;# 
   742  07A4                     	;# 
   743  07A6                     	;# 
   744  07A7                     	;# 
   745  07A9                     	;# 
   746  07AA                     	;# 
   747  0FE4                     	;# 
   748  0FE5                     	;# 
   749  0FE6                     	;# 
   750  0FE7                     	;# 
   751  0FE8                     	;# 
   752  0FE9                     	;# 
   753  0FEA                     	;# 
   754  0FEB                     	;# 
   755  0FED                     	;# 
   756  0FEE                     	;# 
   757  0FEF                     	;# 
   758  0000                     	;# 
   759  0001                     	;# 
   760  0002                     	;# 
   761  0003                     	;# 
   762  0004                     	;# 
   763  0005                     	;# 
   764  0006                     	;# 
   765  0007                     	;# 
   766  0008                     	;# 
   767  0009                     	;# 
   768  000A                     	;# 
   769  000B                     	;# 
   770  000C                     	;# 
   771  000D                     	;# 
   772  000E                     	;# 
   773  0010                     	;# 
   774  0011                     	;# 
   775  0012                     	;# 
   776  0013                     	;# 
   777  0015                     	;# 
   778  0016                     	;# 
   779  0016                     	;# 
   780  0017                     	;# 
   781  0018                     	;# 
   782  0019                     	;# 
   783  001A                     	;# 
   784  001B                     	;# 
   785  001C                     	;# 
   786  001E                     	;# 
   787  001F                     	;# 
   788  008C                     	;# 
   789  008D                     	;# 
   790  008E                     	;# 
   791  0090                     	;# 
   792  0091                     	;# 
   793  0092                     	;# 
   794  0093                     	;# 
   795  0095                     	;# 
   796  0096                     	;# 
   797  0097                     	;# 
   798  0098                     	;# 
   799  0099                     	;# 
   800  009A                     	;# 
   801  009B                     	;# 
   802  009B                     	;# 
   803  009C                     	;# 
   804  009D                     	;# 
   805  009E                     	;# 
   806  010C                     	;# 
   807  010D                     	;# 
   808  010E                     	;# 
   809  0110                     	;# 
   810  0111                     	;# 
   811  0112                     	;# 
   812  0113                     	;# 
   813  0114                     	;# 
   814  0115                     	;# 
   815  0116                     	;# 
   816  0117                     	;# 
   817  0118                     	;# 
   818  0119                     	;# 
   819  011A                     	;# 
   820  011B                     	;# 
   821  011D                     	;# 
   822  018C                     	;# 
   823  018D                     	;# 
   824  0191                     	;# 
   825  0191                     	;# 
   826  0192                     	;# 
   827  0193                     	;# 
   828  0193                     	;# 
   829  0193                     	;# 
   830  0194                     	;# 
   831  0195                     	;# 
   832  0196                     	;# 
   833  0199                     	;# 
   834  019A                     	;# 
   835  019B                     	;# 
   836  019B                     	;# 
   837  019B                     	;# 
   838  019B                     	;# 
   839  019C                     	;# 
   840  019C                     	;# 
   841  019D                     	;# 
   842  019E                     	;# 
   843  019F                     	;# 
   844  020D                     	;# 
   845  0210                     	;# 
   846  0211                     	;# 
   847  0212                     	;# 
   848  0213                     	;# 
   849  0214                     	;# 
   850  0215                     	;# 
   851  0215                     	;# 
   852  0216                     	;# 
   853  0217                     	;# 
   854  0291                     	;# 
   855  0291                     	;# 
   856  0292                     	;# 
   857  0293                     	;# 
   858  0294                     	;# 
   859  0295                     	;# 
   860  0295                     	;# 
   861  0296                     	;# 
   862  0298                     	;# 
   863  0298                     	;# 
   864  0299                     	;# 
   865  029A                     	;# 
   866  029B                     	;# 
   867  029C                     	;# 
   868  029C                     	;# 
   869  029D                     	;# 
   870  029E                     	;# 
   871  029F                     	;# 
   872  0311                     	;# 
   873  0311                     	;# 
   874  0312                     	;# 
   875  0313                     	;# 
   876  0314                     	;# 
   877  0315                     	;# 
   878  0315                     	;# 
   879  0316                     	;# 
   880  0318                     	;# 
   881  0318                     	;# 
   882  0319                     	;# 
   883  031A                     	;# 
   884  031C                     	;# 
   885  031C                     	;# 
   886  031D                     	;# 
   887  031E                     	;# 
   888  0394                     	;# 
   889  0395                     	;# 
   890  0396                     	;# 
   891  0415                     	;# 
   892  0416                     	;# 
   893  0417                     	;# 
   894  041C                     	;# 
   895  041D                     	;# 
   896  041E                     	;# 
   897  0791                     	;# 
   898  0792                     	;# 
   899  0793                     	;# 
   900  0794                     	;# 
   901  0795                     	;# 
   902  0798                     	;# 
   903  0799                     	;# 
   904  07A0                     	;# 
   905  07A1                     	;# 
   906  07A3                     	;# 
   907  07A4                     	;# 
   908  07A6                     	;# 
   909  07A7                     	;# 
   910  07A9                     	;# 
   911  07AA                     	;# 
   912  0FE4                     	;# 
   913  0FE5                     	;# 
   914  0FE6                     	;# 
   915  0FE7                     	;# 
   916  0FE8                     	;# 
   917  0FE9                     	;# 
   918  0FEA                     	;# 
   919  0FEB                     	;# 
   920  0FED                     	;# 
   921  0FEE                     	;# 
   922  0FEF                     	;_buff
   923  000E                     _PORTC	set	14
   924  000C                     _PORTA	set	12
   925  000B                     _INTCON	set	11
   926  008D                     _RCIF	set	141
   927  008C                     _TRISA	set	140
   928  008E                     _TRISC	set	142
   929  048D                     _RCIE	set	1165
   930  0473                     _TRISC3	set	1139
   931  0474                     _TRISC4	set	1140
   932  0475                     _TRISC5	set	1141
   933  019A                     _TXREG	set	410
   934  019B                     _SPBRG	set	411
   935  019D                     _RCSTA	set	413
   936  019E                     _TXSTA	set	414
   937  0199                     _RCREG	set	409
   938  0CF1                     _TRMT	set	3313
   939  0215                     _SSPCON1	set	533
   940                           
   941                           	psect	stringtext1
   942  1000                     __pstringtext1:
   943  1000                     STR_1:
   944  1000  3441               	retlw	65	;'A'
   945  1001  3456               	retlw	86	;'V'
   946  1002  3452               	retlw	82	;'R'
   947  1003  3420               	retlw	32	;' '
   948  1004  3449               	retlw	73	;'I'
   949  1005  3453               	retlw	83	;'S'
   950  1006  3450               	retlw	80	;'P'
   951  1007  3400               	retlw	0
   952                           
   953                           	psect	stringtext2
   954  0000                     __pstringtext2:
   955                           
   956                           	psect	cinit
   957  0021                     start_initialization:	
   958                           ; #config settings
   959                           
   960  0021                     __initialization:	;BIGRAM
   961                           
   962                           ; Clear objects allocated to BIGRAM
   963  0021  30F0               	movlw	low (0+8688)
   964  0022  0084               	movwf	4
   965  0023  3021               	movlw	high (0+8688)
   966  0024  0085               	movwf	5
   967  0025  3000               	movlw	0
   968  0026  00FE               	movwf	btemp
   969  0027  3002               	movlw	2
   970  0028  00FF               	movwf	btemp+1
   971  0029  318F  279C  3180   	fcall	clear_ram0
   972                           
   973                           ; Clear objects allocated to COMMON
   974  002C  01FA               	clrf	__pbssCOMMON& (0+127)
   975  002D  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   976                           
   977                           ; Clear objects allocated to BANK0
   978  002E  3044               	movlw	low __pbssBANK0
   979  002F  0084               	movwf	4
   980  0030  3000               	movlw	high __pbssBANK0
   981  0031  0085               	movwf	5
   982  0032  301A               	movlw	26
   983  0033  00FE               	movwf	btemp
   984  0034  3000               	movlw	0
   985  0035  00FF               	movwf	btemp+1
   986  0036  318F  279C  3180   	fcall	clear_ram0
   987  0039                     end_of_initialization:	
   988                           ;End of C runtime variable initialization code
   989                           
   990  0039                     __end_of__initialization:
   991  0039  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   992  003A  0020               	movlb	0
   993  003B  3186  2ECF         	ljmp	_main	;jump to C main() function
   994                           
   995                           	psect	bssCOMMON
   996  007A                     __pbssCOMMON:
   997  007A                     _here:
   998  007A                     	ds	2
   999                           
  1000                           	psect	bssBANK0
  1001  0044                     __pbssBANK0:
  1002  0044                     _param:
  1003  0044                     	ds	19
  1004  0057                     _errors:
  1005  0057                     	ds	2
  1006  0059                     _pmode:
  1007  0059                     	ds	2
  1008  005B                     _rst_active_high:
  1009  005B                     	ds	1
  1010  005C                     _rx_rd_index0:
  1011  005C                     	ds	1
  1012  005D                     _rx_wr_index0:
  1013  005D                     	ds	1
  1014                           
  1015                           	psect	clrtext
  1016  0F9C                     clear_ram0:	
  1017                           ;	Called with FSR0 containing the base address, and
  1018                           ;	btemp/btemp+1 has the size to clear
  1019                           
  1020  0F9C  0064               	clrwdt	;clear the watchdog before getting into this loop
  1021  0F9D                     clrloop0:
  1022  0F9D  0180               	clrf	0	;clear RAM location pointed to by FSR
  1023  0F9E  3101               	addfsr 0,1
  1024  0F9F  3001               	movlw	1
  1025  0FA0  02FE               	subwf	btemp,f
  1026  0FA1  3000               	movlw	0
  1027  0FA2  3BFF               	subwfb	btemp+1,f
  1028  0FA3  087F               	movf	btemp+1,w
  1029  0FA4  047E               	iorwf	btemp,w
  1030  0FA5  1D03               	skipz
  1031  0FA6  2F9D               	goto	clrloop0	;have we reached the end yet?
  1032  0FA7  3400               	retlw	0	;all done for this memory range, return
  1033                           
  1034                           	psect	cstackCOMMON
  1035  0070                     __pcstackCOMMON:
  1036  0070                     ?_setup:
  1037  0070                     ?_Serial_available:	
  1038                           ; 1 bytes @ 0x0
  1039                           
  1040  0070                     ?_avrisp:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043  0070                     ?_ISR:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046  0070                     ??_ISR:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049  0070                     ?_main:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  0070                     ?_spi_init:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  0070                     ?_SPI_transfer:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  0070                     ?_spi_deinit:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0070                     ?_uart_init:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0070                     ?_uart_sendChar:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  0070                     ?_reset_target:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  0070                     ?_getch:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0070                     ?_empty_reply:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  0070                     ?_breply:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  0070                     ?_get_version:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  0070                     ?_set_parameters:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  0070                     ?_start_pmode:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088  0070                     ?_end_pmode:	
  1089                           ; 1 bytes @ 0x0
  1090                           
  1091  0070                     ?_universal:	
  1092                           ; 1 bytes @ 0x0
  1093                           
  1094  0070                     ?_program_page:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097  0070                     ?_read_page:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  0070                     ?_read_signature:	
  1101                           ; 1 bytes @ 0x0
  1102                           
  1103                           
  1104                           ; 1 bytes @ 0x0
  1105  0070                     	ds	2
  1106  0072                     ??_Serial_available:
  1107  0072                     ?_pulse:	
  1108                           ; 1 bytes @ 0x2
  1109                           
  1110  0072                     ??_spi_init:	
  1111                           ; 1 bytes @ 0x2
  1112                           
  1113  0072                     ??_SPI_transfer:	
  1114                           ; 1 bytes @ 0x2
  1115                           
  1116  0072                     ??_spi_deinit:	
  1117                           ; 1 bytes @ 0x2
  1118                           
  1119  0072                     ??_uart_init:	
  1120                           ; 1 bytes @ 0x2
  1121                           
  1122  0072                     ??_uart_sendChar:	
  1123                           ; 1 bytes @ 0x2
  1124                           
  1125  0072                     ??_reset_target:	
  1126                           ; 1 bytes @ 0x2
  1127                           
  1128  0072                     ??_getch:	
  1129                           ; 1 bytes @ 0x2
  1130                           
  1131  0072                     ?_prog_lamp:	
  1132                           ; 1 bytes @ 0x2
  1133                           
  1134  0072                     ?_current_page:	
  1135                           ; 1 bytes @ 0x2
  1136                           
  1137  0072                     uart_sendChar@ch:	
  1138                           ; 2 bytes @ 0x2
  1139                           
  1140  0072                     pulse@pin:	
  1141                           ; 1 bytes @ 0x2
  1142                           
  1143  0072                     prog_lamp@state:	
  1144                           ; 2 bytes @ 0x2
  1145                           
  1146                           
  1147                           ; 2 bytes @ 0x2
  1148  0072                     	ds	1
  1149  0073                     ?_uart_sendString:
  1150  0073                     reset_target@reset:	
  1151                           ; 1 bytes @ 0x3
  1152                           
  1153  0073                     getch@temp:	
  1154                           ; 1 bytes @ 0x3
  1155                           
  1156  0073                     uart_sendString@str:	
  1157                           ; 1 bytes @ 0x3
  1158                           
  1159                           
  1160                           ; 2 bytes @ 0x3
  1161  0073                     	ds	1
  1162  0074                     ?_fill:
  1163  0074                     ??_prog_lamp:	
  1164                           ; 1 bytes @ 0x4
  1165                           
  1166  0074                     ??_empty_reply:	
  1167                           ; 1 bytes @ 0x4
  1168                           
  1169  0074                     ??_breply:	
  1170                           ; 1 bytes @ 0x4
  1171                           
  1172  0074                     ??_end_pmode:	
  1173                           ; 1 bytes @ 0x4
  1174                           
  1175  0074                     ??_current_page:	
  1176                           ; 1 bytes @ 0x4
  1177                           
  1178  0074                     SPI_transfer@dat:	
  1179                           ; 1 bytes @ 0x4
  1180                           
  1181  0074                     breply@b:	
  1182                           ; 1 bytes @ 0x4
  1183                           
  1184  0074                     pulse@tmes:	
  1185                           ; 1 bytes @ 0x4
  1186                           
  1187  0074                     fill@n:	
  1188                           ; 2 bytes @ 0x4
  1189                           
  1190                           
  1191                           ; 2 bytes @ 0x4
  1192  0074                     	ds	1
  1193  0075                     ??_uart_sendString:
  1194  0075                     ??_get_version:	
  1195                           ; 1 bytes @ 0x5
  1196                           
  1197  0075                     SPI_transfer@rslt:	
  1198                           ; 1 bytes @ 0x5
  1199                           
  1200                           
  1201                           ; 1 bytes @ 0x5
  1202  0075                     	ds	1
  1203  0076                     ??_pulse:
  1204  0076                     SPI_transfer@i:	
  1205                           ; 1 bytes @ 0x6
  1206                           
  1207  0076                     uart_sendString@i:	
  1208                           ; 2 bytes @ 0x6
  1209                           
  1210  0076                     fill@x:	
  1211                           ; 2 bytes @ 0x6
  1212                           
  1213                           
  1214                           ; 2 bytes @ 0x6
  1215  0076                     	ds	1
  1216  0077                     ??_setup:
  1217  0077                     get_version@c:	
  1218                           ; 1 bytes @ 0x7
  1219                           
  1220                           
  1221                           ; 1 bytes @ 0x7
  1222  0077                     	ds	1
  1223  0078                     ??_spi_transaction:
  1224  0078                     spi_transaction@a:	
  1225                           ; 1 bytes @ 0x8
  1226                           
  1227                           
  1228                           ; 1 bytes @ 0x8
  1229  0078                     	ds	1
  1230  0079                     ??_write_eeprom:
  1231  0079                     universal@ch:	
  1232                           ; 1 bytes @ 0x9
  1233                           
  1234  0079                     flash@hilo:	
  1235                           ; 1 bytes @ 0x9
  1236                           
  1237  0079                     flash_read@hilo:	
  1238                           ; 1 bytes @ 0x9
  1239                           
  1240                           
  1241                           ; 1 bytes @ 0x9
  1242  0079                     	ds	1
  1243  007A                     ??_write_flash:
  1244                           
  1245                           	psect	cstackBANK0
  1246  0020                     __pcstackBANK0:	
  1247                           ; 1 bytes @ 0xA
  1248                           
  1249  0020                     ??_fill:
  1250  0020                     ?_spi_transaction:	
  1251                           ; 1 bytes @ 0x0
  1252                           
  1253  0020                     ??_set_parameters:	
  1254                           ; 1 bytes @ 0x0
  1255                           
  1256  0020                     spi_transaction@b:	
  1257                           ; 1 bytes @ 0x0
  1258                           
  1259                           
  1260                           ; 1 bytes @ 0x0
  1261  0020                     	ds	1
  1262  0021                     spi_transaction@c:
  1263                           
  1264                           ; 1 bytes @ 0x1
  1265  0021                     	ds	1
  1266  0022                     spi_transaction@d:
  1267                           
  1268                           ; 1 bytes @ 0x2
  1269  0022                     	ds	1
  1270  0023                     ??_start_pmode:
  1271  0023                     ?_flash:	
  1272                           ; 1 bytes @ 0x3
  1273                           
  1274  0023                     ?_commit:	
  1275                           ; 1 bytes @ 0x3
  1276                           
  1277  0023                     ?_flash_read:	
  1278                           ; 1 bytes @ 0x3
  1279                           
  1280  0023                     ?_eeprom_read_page:	
  1281                           ; 1 bytes @ 0x3
  1282                           
  1283  0023                     ??_read_signature:	
  1284                           ; 1 bytes @ 0x3
  1285                           
  1286  0023                     flash@addr:	
  1287                           ; 1 bytes @ 0x3
  1288                           
  1289  0023                     commit@addr:	
  1290                           ; 2 bytes @ 0x3
  1291                           
  1292  0023                     flash_read@addr:	
  1293                           ; 2 bytes @ 0x3
  1294                           
  1295  0023                     eeprom_read_page@length:	
  1296                           ; 2 bytes @ 0x3
  1297                           
  1298                           
  1299                           ; 2 bytes @ 0x3
  1300  0023                     	ds	2
  1301  0025                     ?_write_eeprom_chunk:
  1302  0025                     ??_universal:	
  1303                           ; 1 bytes @ 0x5
  1304                           
  1305  0025                     ??_commit:	
  1306                           ; 1 bytes @ 0x5
  1307                           
  1308  0025                     ??_flash_read:	
  1309                           ; 1 bytes @ 0x5
  1310                           
  1311  0025                     ??_eeprom_read_page:	
  1312                           ; 1 bytes @ 0x5
  1313                           
  1314  0025                     flash@data:	
  1315                           ; 1 bytes @ 0x5
  1316                           
  1317  0025                     read_signature@high:	
  1318                           ; 1 bytes @ 0x5
  1319                           
  1320  0025                     write_eeprom_chunk@start:	
  1321                           ; 1 bytes @ 0x5
  1322                           
  1323                           
  1324                           ; 2 bytes @ 0x5
  1325  0025                     	ds	1
  1326  0026                     ??_flash:
  1327  0026                     read_signature@middle:	
  1328                           ; 1 bytes @ 0x6
  1329                           
  1330                           
  1331                           ; 1 bytes @ 0x6
  1332  0026                     	ds	1
  1333  0027                     read_signature@low:
  1334  0027                     commit@i:	
  1335                           ; 1 bytes @ 0x7
  1336                           
  1337  0027                     write_eeprom_chunk@length:	
  1338                           ; 2 bytes @ 0x7
  1339                           
  1340                           
  1341                           ; 2 bytes @ 0x7
  1342  0027                     	ds	1
  1343  0028                     ?_flash_read_page:
  1344  0028                     flash_read_page@length:	
  1345                           ; 1 bytes @ 0x8
  1346                           
  1347                           
  1348                           ; 2 bytes @ 0x8
  1349  0028                     	ds	1
  1350  0029                     ??_write_eeprom_chunk:
  1351  0029                     eeprom_read_page@start:	
  1352                           ; 1 bytes @ 0x9
  1353                           
  1354                           
  1355                           ; 2 bytes @ 0x9
  1356  0029                     	ds	1
  1357  002A                     ?_write_flash_pages:
  1358  002A                     ??_flash_read_page:	
  1359                           ; 1 bytes @ 0xA
  1360                           
  1361  002A                     write_flash_pages@length:	
  1362                           ; 1 bytes @ 0xA
  1363                           
  1364                           
  1365                           ; 2 bytes @ 0xA
  1366  002A                     	ds	1
  1367  002B                     flash_read_page@low:
  1368  002B                     eeprom_read_page@ee:	
  1369                           ; 1 bytes @ 0xB
  1370                           
  1371                           
  1372                           ; 1 bytes @ 0xB
  1373  002B                     	ds	1
  1374  002C                     ??_write_flash_pages:
  1375  002C                     flash_read_page@high:	
  1376                           ; 1 bytes @ 0xC
  1377                           
  1378  002C                     eeprom_read_page@addr:	
  1379                           ; 1 bytes @ 0xC
  1380                           
  1381                           
  1382                           ; 2 bytes @ 0xC
  1383  002C                     	ds	1
  1384  002D                     flash_read_page@x:
  1385                           
  1386                           ; 2 bytes @ 0xD
  1387  002D                     	ds	1
  1388  002E                     write_eeprom_chunk@addr:
  1389  002E                     eeprom_read_page@x:	
  1390                           ; 2 bytes @ 0xE
  1391                           
  1392                           
  1393                           ; 2 bytes @ 0xE
  1394  002E                     	ds	1
  1395  002F                     write_flash_pages@page:
  1396                           
  1397                           ; 2 bytes @ 0xF
  1398  002F                     	ds	1
  1399  0030                     ??_read_page:
  1400  0030                     write_eeprom_chunk@x:	
  1401                           ; 1 bytes @ 0x10
  1402                           
  1403                           
  1404                           ; 2 bytes @ 0x10
  1405  0030                     	ds	1
  1406  0031                     write_flash_pages@x:
  1407                           
  1408                           ; 2 bytes @ 0x11
  1409  0031                     	ds	1
  1410  0032                     ?_write_eeprom:
  1411  0032                     write_eeprom@length:	
  1412                           ; 1 bytes @ 0x12
  1413                           
  1414                           
  1415                           ; 2 bytes @ 0x12
  1416  0032                     	ds	1
  1417  0033                     ?_write_flash:
  1418  0033                     read_page@result:	
  1419                           ; 1 bytes @ 0x13
  1420                           
  1421  0033                     write_flash@length:	
  1422                           ; 1 bytes @ 0x13
  1423                           
  1424                           
  1425                           ; 2 bytes @ 0x13
  1426  0033                     	ds	1
  1427  0034                     read_page@memtype:
  1428  0034                     write_eeprom@start:	
  1429                           ; 1 bytes @ 0x14
  1430                           
  1431                           
  1432                           ; 2 bytes @ 0x14
  1433  0034                     	ds	1
  1434  0035                     read_page@length:
  1435                           
  1436                           ; 2 bytes @ 0x15
  1437  0035                     	ds	1
  1438  0036                     write_eeprom@remaining:
  1439                           
  1440                           ; 2 bytes @ 0x16
  1441  0036                     	ds	2
  1442  0038                     ??_program_page:
  1443                           
  1444                           ; 1 bytes @ 0x18
  1445  0038                     	ds	3
  1446  003B                     program_page@result:
  1447                           
  1448                           ; 1 bytes @ 0x1B
  1449  003B                     	ds	1
  1450  003C                     program_page@memtype:
  1451                           
  1452                           ; 1 bytes @ 0x1C
  1453  003C                     	ds	1
  1454  003D                     program_page@length:
  1455                           
  1456                           ; 2 bytes @ 0x1D
  1457  003D                     	ds	2
  1458  003F                     ??_avrisp:
  1459                           
  1460                           ; 1 bytes @ 0x1F
  1461  003F                     	ds	3
  1462  0042                     avrisp@ch:
  1463                           
  1464                           ; 1 bytes @ 0x22
  1465  0042                     	ds	1
  1466  0043                     ??_main:
  1467                           
  1468                           ; 1 bytes @ 0x23
  1469  0043                     	ds	1
  1470                           
  1471                           	psect	maintext
  1472  06CF                     __pmaintext:	
  1473 ;;
  1474 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1475 ;;
  1476 ;; *************** function _main *****************
  1477 ;; Defined at:
  1478 ;;		line 54 in file "main.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;		None
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;		None
  1483 ;; Return value:  Size  Location     Type
  1484 ;;                  1    wreg      void 
  1485 ;; Registers used:
  1486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1487 ;; Tracked objects:
  1488 ;;		On entry : B1F/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1495 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1496 ;;Total ram usage:        1 bytes
  1497 ;; Hardware stack levels required when called:    8
  1498 ;; This function calls:
  1499 ;;		_Serial_available
  1500 ;;		_avrisp
  1501 ;;		_setup
  1502 ;; This function is called by:
  1503 ;;		Startup code after reset
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           
  1508                           ;psect for function _main
  1509  06CF                     _main:
  1510  06CF                     l2467:	
  1511                           ;incstack = 0
  1512                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1513                           
  1514                           
  1515                           ;main.c: 56:     setup();
  1516  06CF  3186  2635  3186   	fcall	_setup
  1517  06D2                     l2469:
  1518                           
  1519                           ;main.c: 58:     INTCON |= (1 << 7)|(1 << 6);
  1520  06D2  30C0               	movlw	192
  1521  06D3  0020               	movlb	0	; select bank0
  1522  06D4  00C3               	movwf	??_main
  1523  06D5  0843               	movf	??_main,w
  1524  06D6  048B               	iorwf	11,f	;volatile
  1525  06D7                     l2471:
  1526                           
  1527                           ;main.c: 61:     {;main.c: 63:   if (pmode) PORTA |= (1 << 4);
  1528  06D7  0020               	movlb	0	; select bank0
  1529  06D8  0859               	movf	_pmode,w
  1530  06D9  045A               	iorwf	_pmode+1,w
  1531  06DA  1903               	btfsc	3,2
  1532  06DB  2EDD               	goto	u1391
  1533  06DC  2EDE               	goto	u1390
  1534  06DD                     u1391:
  1535  06DD  2EE0               	goto	l2475
  1536  06DE                     u1390:
  1537  06DE                     l2473:
  1538  06DE  160C               	bsf	12,4	;volatile
  1539  06DF  2EE4               	goto	l39
  1540  06E0                     l2475:
  1541  06E0  30EF               	movlw	239
  1542  06E1  00C3               	movwf	??_main
  1543  06E2  0843               	movf	??_main,w
  1544  06E3  058C               	andwf	12,f	;volatile
  1545  06E4                     l39:
  1546                           
  1547                           ;main.c: 67:   if (errors) PORTA |= (1 << 3);
  1548  06E4  0857               	movf	_errors,w
  1549  06E5  0458               	iorwf	_errors+1,w
  1550  06E6  1903               	btfsc	3,2
  1551  06E7  2EE9               	goto	u1401
  1552  06E8  2EEA               	goto	u1400
  1553  06E9                     u1401:
  1554  06E9  2EEC               	goto	l2479
  1555  06EA                     u1400:
  1556  06EA                     l2477:
  1557  06EA  158C               	bsf	12,3	;volatile
  1558  06EB  2EF0               	goto	l2481
  1559  06EC                     l2479:
  1560  06EC  30F7               	movlw	247
  1561  06ED  00C3               	movwf	??_main
  1562  06EE  0843               	movf	??_main,w
  1563  06EF  058C               	andwf	12,f	;volatile
  1564  06F0                     l2481:
  1565                           
  1566                           ;main.c: 70:   if(Serial_available()) avrisp();
  1567  06F0  318F  2791  3186   	fcall	_Serial_available
  1568  06F3  3A00               	xorlw	0
  1569  06F4  1903               	skipnz
  1570  06F5  2EF7               	goto	u1411
  1571  06F6  2EF8               	goto	u1410
  1572  06F7                     u1411:
  1573  06F7  2ED7               	goto	l2471
  1574  06F8                     u1410:
  1575  06F8                     l2483:
  1576  06F8  3181  2145  3186   	fcall	_avrisp
  1577  06FB  2ED7               	goto	l2471
  1578  06FC  3180  281F         	ljmp	start
  1579  06FE                     __end_of_main:
  1580                           
  1581                           	psect	text1
  1582  0635                     __ptext1:	
  1583 ;; *************** function _setup *****************
  1584 ;; Defined at:
  1585 ;;		line 28 in file "progger.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;		None
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      void 
  1592 ;; Registers used:
  1593 ;;		wreg, status,2, status,0, pclath, cstack
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1602 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1603 ;;Total ram usage:        1 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    2
  1606 ;; This function calls:
  1607 ;;		_pulse
  1608 ;;		_uart_init
  1609 ;; This function is called by:
  1610 ;;		_main
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           
  1615                           ;psect for function _setup
  1616  0635                     _setup:
  1617  0635                     l1927:	
  1618                           ;incstack = 0
  1619                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  1620                           
  1621                           
  1622                           ;progger.c: 30:  uart_init();
  1623  0635  318F  27C4  3186   	fcall	_uart_init
  1624  0638                     l1929:
  1625                           
  1626                           ;progger.c: 32:  TRISA &= ~(1 << 4);
  1627  0638  30EF               	movlw	239
  1628  0639  00F7               	movwf	??_setup
  1629  063A  0877               	movf	??_setup,w
  1630  063B  0021               	movlb	1	; select bank1
  1631  063C  058C               	andwf	12,f	;volatile
  1632  063D                     l1931:
  1633                           
  1634                           ;progger.c: 33:  pulse(3, 2);
  1635  063D  3003               	movlw	3
  1636  063E  00F2               	movwf	pulse@pin
  1637  063F  3000               	movlw	0
  1638  0640  00F3               	movwf	pulse@pin+1
  1639  0641  3002               	movlw	2
  1640  0642  00F4               	movwf	pulse@tmes
  1641  0643  3000               	movlw	0
  1642  0644  00F5               	movwf	pulse@tmes+1
  1643  0645  3182  22B3  3186   	fcall	_pulse
  1644                           
  1645                           ;progger.c: 35:  TRISA &= ~(1 << 3);
  1646  0648  30F7               	movlw	247
  1647  0649  00F7               	movwf	??_setup
  1648  064A  0877               	movf	??_setup,w
  1649  064B  0021               	movlb	1	; select bank1
  1650  064C  058C               	andwf	12,f	;volatile
  1651  064D                     l1933:
  1652                           
  1653                           ;progger.c: 36:  pulse(2, 2);
  1654  064D  3002               	movlw	2
  1655  064E  00F2               	movwf	pulse@pin
  1656  064F  3000               	movlw	0
  1657  0650  00F3               	movwf	pulse@pin+1
  1658  0651  3002               	movlw	2
  1659  0652  00F4               	movwf	pulse@tmes
  1660  0653  3000               	movlw	0
  1661  0654  00F5               	movwf	pulse@tmes+1
  1662  0655  3182  22B3  3186   	fcall	_pulse
  1663  0658                     l1935:
  1664                           
  1665                           ;progger.c: 38:  TRISA &= ~(1 << 2);
  1666  0658  30FB               	movlw	251
  1667  0659  00F7               	movwf	??_setup
  1668  065A  0877               	movf	??_setup,w
  1669  065B  0021               	movlb	1	; select bank1
  1670  065C  058C               	andwf	12,f	;volatile
  1671                           
  1672                           ;progger.c: 39:  pulse(1, 2);
  1673  065D  3001               	movlw	1
  1674  065E  00F2               	movwf	pulse@pin
  1675  065F  3000               	movlw	0
  1676  0660  00F3               	movwf	pulse@pin+1
  1677  0661  3002               	movlw	2
  1678  0662  00F4               	movwf	pulse@tmes
  1679  0663  3000               	movlw	0
  1680  0664  00F5               	movwf	pulse@tmes+1
  1681  0665  3182  22B3  3186   	fcall	_pulse
  1682  0668                     l149:
  1683  0668  0008               	return
  1684  0669                     __end_of_setup:
  1685                           
  1686                           	psect	text2
  1687  0FC4                     __ptext2:	
  1688 ;; *************** function _uart_init *****************
  1689 ;; Defined at:
  1690 ;;		line 3 in file "uart.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;		None
  1693 ;; Auto vars:     Size  Location     Type
  1694 ;;		None
  1695 ;; Return value:  Size  Location     Type
  1696 ;;                  1    wreg      void 
  1697 ;; Registers used:
  1698 ;;		wreg, status,2, status,0
  1699 ;; Tracked objects:
  1700 ;;		On entry : 0/0
  1701 ;;		On exit  : 0/0
  1702 ;;		Unchanged: 0/0
  1703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1706 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1707 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1708 ;;Total ram usage:        1 bytes
  1709 ;; Hardware stack levels used:    1
  1710 ;; Hardware stack levels required when called:    1
  1711 ;; This function calls:
  1712 ;;		Nothing
  1713 ;; This function is called by:
  1714 ;;		_setup
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           
  1719                           ;psect for function _uart_init
  1720  0FC4                     _uart_init:
  1721  0FC4                     l1751:	
  1722                           ;incstack = 0
  1723                           ; Regs used in _uart_init: [wreg+status,2+status,0]
  1724                           
  1725                           
  1726                           ;uart.c: 8:     TRISC |= (1 << 7) | (1 << 6);
  1727  0FC4  30C0               	movlw	192
  1728  0FC5  00F2               	movwf	??_uart_init
  1729  0FC6  0872               	movf	??_uart_init,w
  1730  0FC7  0021               	movlb	1	; select bank1
  1731  0FC8  048E               	iorwf	14,f	;volatile
  1732  0FC9                     l1753:
  1733                           
  1734                           ;uart.c: 9:     TXSTA = (1 << 5) | (1 << 2);
  1735  0FC9  3024               	movlw	36
  1736  0FCA  0023               	movlb	3	; select bank3
  1737  0FCB  009E               	movwf	30	;volatile
  1738  0FCC                     l1755:
  1739                           
  1740                           ;uart.c: 10:     RCSTA = (1 << 7) | (1 << 4);
  1741  0FCC  3090               	movlw	144
  1742  0FCD  009D               	movwf	29	;volatile
  1743  0FCE                     l1757:
  1744                           
  1745                           ;uart.c: 11:     SPBRG = 10;
  1746  0FCE  300A               	movlw	10
  1747  0FCF  009B               	movwf	27	;volatile
  1748  0FD0                     l1759:
  1749                           
  1750                           ;uart.c: 12:     RCIE = 1;
  1751  0FD0  0021               	movlb	1	; select bank1
  1752  0FD1  1691               	bsf	17,5	;volatile
  1753  0FD2                     l88:
  1754  0FD2  0008               	return
  1755  0FD3                     __end_of_uart_init:
  1756                           
  1757                           	psect	text3
  1758  02B3                     __ptext3:	
  1759 ;; *************** function _pulse *****************
  1760 ;; Defined at:
  1761 ;;		line 43 in file "progger.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;  pin             2    2[COMMON] int 
  1764 ;;  tmes            2    4[COMMON] int 
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;		None
  1767 ;; Return value:  Size  Location     Type
  1768 ;;                  1    wreg      void 
  1769 ;; Registers used:
  1770 ;;		wreg, status,2, status,0
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1776 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1778 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1779 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1780 ;;Total ram usage:        5 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    1
  1783 ;; This function calls:
  1784 ;;		Nothing
  1785 ;; This function is called by:
  1786 ;;		_setup
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           
  1791                           ;psect for function _pulse
  1792  02B3                     _pulse:
  1793  02B3                     l152:	
  1794                           ;incstack = 0
  1795                           ; Regs used in _pulse: [wreg+status,2+status,0]
  1796                           ;progger.c: 43: void pulse(int pin, int tmes);progger.c: 44: {;progger.c: 45:  do
  1797                           
  1798  02B3                     l1769:
  1799                           
  1800                           ;progger.c: 46:  {;progger.c: 47:   if(pin == 3)
  1801  02B3  3003               	movlw	3
  1802  02B4  0672               	xorwf	pulse@pin,w
  1803  02B5  0473               	iorwf	pulse@pin+1,w
  1804  02B6  1D03               	btfss	3,2
  1805  02B7  2AB9               	goto	u831
  1806  02B8  2ABA               	goto	u830
  1807  02B9                     u831:
  1808  02B9  2AD1               	goto	l153
  1809  02BA                     u830:
  1810  02BA                     l1771:
  1811                           
  1812                           ;progger.c: 48:    {;progger.c: 49:     PORTA |= (1 << 4);
  1813  02BA  0020               	movlb	0	; select bank0
  1814  02BB  160C               	bsf	12,4	;volatile
  1815  02BC                     l1773:
  1816                           
  1817                           ;progger.c: 50:     _delay((unsigned long)((30)*(20000000/4000.0)));
  1818  02BC  30C3               	movlw	195
  1819  02BD  00F6               	movwf	??_pulse
  1820  02BE  30CD               	movlw	205
  1821  02BF                     u1427:
  1822  02BF  0B89               	decfsz	9,f
  1823  02C0  2ABF               	goto	u1427
  1824  02C1  0BF6               	decfsz	??_pulse,f
  1825  02C2  2ABF               	goto	u1427
  1826  02C3  0000               	nop
  1827  02C4                     l1775:
  1828                           
  1829                           ;progger.c: 51:     PORTA &= ~(1 << 4);
  1830  02C4  30EF               	movlw	239
  1831  02C5  00F6               	movwf	??_pulse
  1832  02C6  0876               	movf	??_pulse,w
  1833  02C7  0020               	movlb	0	; select bank0
  1834  02C8  058C               	andwf	12,f	;volatile
  1835  02C9                     l1777:
  1836                           
  1837                           ;progger.c: 52:     _delay((unsigned long)((30)*(20000000/4000.0)));
  1838  02C9  30C3               	movlw	195
  1839  02CA  00F6               	movwf	??_pulse
  1840  02CB  30CD               	movlw	205
  1841  02CC                     u1437:
  1842  02CC  0B89               	decfsz	9,f
  1843  02CD  2ACC               	goto	u1437
  1844  02CE  0BF6               	decfsz	??_pulse,f
  1845  02CF  2ACC               	goto	u1437
  1846  02D0  0000               	nop
  1847  02D1                     l153:	
  1848                           ;progger.c: 53:    }
  1849                           
  1850                           
  1851                           ;progger.c: 54:   if(pin == 2)
  1852  02D1  3002               	movlw	2
  1853  02D2  0672               	xorwf	pulse@pin,w
  1854  02D3  0473               	iorwf	pulse@pin+1,w
  1855  02D4  1D03               	btfss	3,2
  1856  02D5  2AD7               	goto	u841
  1857  02D6  2AD8               	goto	u840
  1858  02D7                     u841:
  1859  02D7  2AEF               	goto	l154
  1860  02D8                     u840:
  1861  02D8                     l1779:
  1862                           
  1863                           ;progger.c: 55:    {;progger.c: 56:     PORTA |= (1 << 3);
  1864  02D8  0020               	movlb	0	; select bank0
  1865  02D9  158C               	bsf	12,3	;volatile
  1866  02DA                     l1781:
  1867                           
  1868                           ;progger.c: 57:     _delay((unsigned long)((30)*(20000000/4000.0)));
  1869  02DA  30C3               	movlw	195
  1870  02DB  00F6               	movwf	??_pulse
  1871  02DC  30CD               	movlw	205
  1872  02DD                     u1447:
  1873  02DD  0B89               	decfsz	9,f
  1874  02DE  2ADD               	goto	u1447
  1875  02DF  0BF6               	decfsz	??_pulse,f
  1876  02E0  2ADD               	goto	u1447
  1877  02E1  0000               	nop
  1878  02E2                     l1783:
  1879                           
  1880                           ;progger.c: 58:     PORTA &= ~(1 << 3);
  1881  02E2  30F7               	movlw	247
  1882  02E3  00F6               	movwf	??_pulse
  1883  02E4  0876               	movf	??_pulse,w
  1884  02E5  0020               	movlb	0	; select bank0
  1885  02E6  058C               	andwf	12,f	;volatile
  1886  02E7                     l1785:
  1887                           
  1888                           ;progger.c: 59:     _delay((unsigned long)((30)*(20000000/4000.0)));
  1889  02E7  30C3               	movlw	195
  1890  02E8  00F6               	movwf	??_pulse
  1891  02E9  30CD               	movlw	205
  1892  02EA                     u1457:
  1893  02EA  0B89               	decfsz	9,f
  1894  02EB  2AEA               	goto	u1457
  1895  02EC  0BF6               	decfsz	??_pulse,f
  1896  02ED  2AEA               	goto	u1457
  1897  02EE  0000               	nop
  1898  02EF                     l154:	
  1899                           ;progger.c: 60:    }
  1900                           
  1901                           
  1902                           ;progger.c: 61:   if(pin == 1)
  1903  02EF  0372               	decf	pulse@pin,w
  1904  02F0  0473               	iorwf	pulse@pin+1,w
  1905  02F1  1D03               	btfss	3,2
  1906  02F2  2AF4               	goto	u851
  1907  02F3  2AF5               	goto	u850
  1908  02F4                     u851:
  1909  02F4  2B0C               	goto	l155
  1910  02F5                     u850:
  1911  02F5                     l1787:
  1912                           
  1913                           ;progger.c: 62:    {;progger.c: 63:     PORTA |= (1 << 2);
  1914  02F5  0020               	movlb	0	; select bank0
  1915  02F6  150C               	bsf	12,2	;volatile
  1916  02F7                     l1789:
  1917                           
  1918                           ;progger.c: 64:     _delay((unsigned long)((30)*(20000000/4000.0)));
  1919  02F7  30C3               	movlw	195
  1920  02F8  00F6               	movwf	??_pulse
  1921  02F9  30CD               	movlw	205
  1922  02FA                     u1467:
  1923  02FA  0B89               	decfsz	9,f
  1924  02FB  2AFA               	goto	u1467
  1925  02FC  0BF6               	decfsz	??_pulse,f
  1926  02FD  2AFA               	goto	u1467
  1927  02FE  0000               	nop
  1928  02FF                     l1791:
  1929                           
  1930                           ;progger.c: 65:     PORTA &= ~(1 << 2);
  1931  02FF  30FB               	movlw	251
  1932  0300  00F6               	movwf	??_pulse
  1933  0301  0876               	movf	??_pulse,w
  1934  0302  0020               	movlb	0	; select bank0
  1935  0303  058C               	andwf	12,f	;volatile
  1936  0304                     l1793:
  1937                           
  1938                           ;progger.c: 66:     _delay((unsigned long)((30)*(20000000/4000.0)));
  1939  0304  30C3               	movlw	195
  1940  0305  00F6               	movwf	??_pulse
  1941  0306  30CD               	movlw	205
  1942  0307                     u1477:
  1943  0307  0B89               	decfsz	9,f
  1944  0308  2B07               	goto	u1477
  1945  0309  0BF6               	decfsz	??_pulse,f
  1946  030A  2B07               	goto	u1477
  1947  030B  0000               	nop
  1948  030C                     l155:	
  1949                           ;progger.c: 67:    }
  1950                           
  1951                           
  1952                           ;progger.c: 68:  }
  1953  030C  30FF               	movlw	255
  1954  030D  07F4               	addwf	pulse@tmes,f
  1955  030E  30FF               	movlw	255
  1956  030F  3DF5               	addwfc	pulse@tmes+1,f
  1957  0310  0A74               	incf	pulse@tmes,w
  1958  0311  1D03               	skipz
  1959  0312  2B17               	goto	u861
  1960  0313  0A75               	incf	pulse@tmes+1,w
  1961  0314  1D03               	btfss	3,2
  1962  0315  2B17               	goto	u861
  1963  0316  2B18               	goto	u860
  1964  0317                     u861:
  1965  0317  2AB3               	goto	l152
  1966  0318                     u860:
  1967  0318                     l157:
  1968  0318  0008               	return
  1969  0319                     __end_of_pulse:
  1970                           
  1971                           	psect	text4
  1972  0145                     __ptext4:	
  1973 ;; *************** function _avrisp *****************
  1974 ;; Defined at:
  1975 ;;		line 454 in file "progger.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;		None
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;  ch              1   34[BANK0 ] unsigned char 
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      void 
  1982 ;; Registers used:
  1983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1990 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1991 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1992 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1993 ;;Total ram usage:        4 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:    7
  1996 ;; This function calls:
  1997 ;;		_empty_reply
  1998 ;;		_end_pmode
  1999 ;;		_fill
  2000 ;;		_get_version
  2001 ;;		_getch
  2002 ;;		_program_page
  2003 ;;		_read_page
  2004 ;;		_read_signature
  2005 ;;		_set_parameters
  2006 ;;		_start_pmode
  2007 ;;		_uart_sendChar
  2008 ;;		_uart_sendString
  2009 ;;		_universal
  2010 ;; This function is called by:
  2011 ;;		_main
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           
  2016                           ;psect for function _avrisp
  2017  0145                     _avrisp:
  2018  0145                     l2397:	
  2019                           ;incstack = 0
  2020                           ; Regs used in _avrisp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2021                           
  2022                           
  2023                           ;progger.c: 456:   uint8_t ch = getch();
  2024  0145  3187  27E6  3181   	fcall	_getch
  2025  0148  0020               	movlb	0	; select bank0
  2026  0149  00BF               	movwf	??_avrisp
  2027  014A  083F               	movf	??_avrisp,w
  2028  014B  00C2               	movwf	avrisp@ch
  2029                           
  2030                           ;progger.c: 457:   switch (ch)
  2031  014C  2A00               	goto	l2461
  2032  014D                     l2399:
  2033                           
  2034                           ;progger.c: 460:     {;progger.c: 461:       errors = 0;
  2035  014D  01D7               	clrf	_errors
  2036  014E  01D8               	clrf	_errors+1
  2037  014F                     l2401:
  2038                           
  2039                           ;progger.c: 462:       empty_reply();
  2040  014F  3187  27CB  3181   	fcall	_empty_reply
  2041                           
  2042                           ;progger.c: 463:       break;
  2043  0152  2A37               	goto	l323
  2044  0153                     l2403:
  2045                           
  2046                           ;progger.c: 466:     {;progger.c: 467:       if (getch() == 0x20)
  2047  0153  3187  27E6  3181   	fcall	_getch
  2048  0156  3A20               	xorlw	32
  2049  0157  1D03               	skipz
  2050  0158  295A               	goto	u1361
  2051  0159  295B               	goto	u1360
  2052  015A                     u1361:
  2053  015A  296B               	goto	l2411
  2054  015B                     u1360:
  2055  015B                     l2405:
  2056                           
  2057                           ;progger.c: 468:       {;progger.c: 469:        uart_sendChar(0x14);
  2058  015B  3014               	movlw	20
  2059  015C  318F  2788  3181   	fcall	_uart_sendChar
  2060  015F                     l2407:
  2061                           
  2062                           ;progger.c: 470:        uart_sendString("AVR ISP");
  2063  015F  3000               	movlw	low (STR_1| (0+32768))
  2064  0160  00F3               	movwf	uart_sendString@str
  2065  0161  3090               	movlw	high (STR_1| (0+32768))
  2066  0162  00F4               	movwf	uart_sendString@str+1
  2067  0163  3187  2793  3181   	fcall	_uart_sendString
  2068  0166                     l2409:
  2069                           
  2070                           ;progger.c: 471:        uart_sendChar(0x10);
  2071  0166  3010               	movlw	16
  2072  0167  318F  2788  3181   	fcall	_uart_sendChar
  2073                           
  2074                           ;progger.c: 472:       }
  2075  016A  2A37               	goto	l323
  2076  016B                     l2411:
  2077                           
  2078                           ;progger.c: 474:       {;progger.c: 475:         errors++;
  2079  016B  3001               	movlw	1
  2080  016C  0020               	movlb	0	; select bank0
  2081  016D  07D7               	addwf	_errors,f
  2082  016E  3000               	movlw	0
  2083  016F  3DD8               	addwfc	_errors+1,f
  2084  0170                     l2413:
  2085                           
  2086                           ;progger.c: 476:         uart_sendChar(0x15);
  2087  0170  3015               	movlw	21
  2088  0171  318F  2788  3181   	fcall	_uart_sendChar
  2089  0174  2A37               	goto	l323
  2090  0175                     l2415:
  2091                           
  2092                           ;progger.c: 481:     {;progger.c: 482:       get_version(getch());
  2093  0175  3187  27E6  3181   	fcall	_getch
  2094  0178  3186  269D  3181   	fcall	_get_version
  2095                           
  2096                           ;progger.c: 483:       break;
  2097  017B  2A37               	goto	l323
  2098  017C                     l2417:
  2099                           
  2100                           ;progger.c: 486:     {;progger.c: 487:       fill(20);
  2101  017C  3014               	movlw	20
  2102  017D  00F4               	movwf	fill@n
  2103  017E  3000               	movlw	0
  2104  017F  00F5               	movwf	fill@n+1
  2105  0180  3186  26FE  3181   	fcall	_fill
  2106                           
  2107                           ;progger.c: 488:       set_parameters();
  2108  0183  3180  203D  3181   	fcall	_set_parameters
  2109                           
  2110                           ;progger.c: 489:       empty_reply();
  2111  0186  3187  27CB  3181   	fcall	_empty_reply
  2112                           
  2113                           ;progger.c: 490:       break;
  2114  0189  2A37               	goto	l323
  2115  018A                     l2419:
  2116                           
  2117                           ;progger.c: 493:     {;progger.c: 494:       fill(5);
  2118  018A  3005               	movlw	5
  2119  018B  00F4               	movwf	fill@n
  2120  018C  3000               	movlw	0
  2121  018D  00F5               	movwf	fill@n+1
  2122  018E  3186  26FE  3181   	fcall	_fill
  2123                           
  2124                           ;progger.c: 495:       empty_reply();
  2125  0191  3187  27CB  3181   	fcall	_empty_reply
  2126                           
  2127                           ;progger.c: 496:       break;
  2128  0194  2A37               	goto	l323
  2129  0195                     l2421:
  2130                           
  2131                           ;progger.c: 499:     {;progger.c: 500:       if (!pmode) start_pmode();
  2132  0195  0859               	movf	_pmode,w
  2133  0196  045A               	iorwf	_pmode+1,w
  2134  0197  1D03               	btfss	3,2
  2135  0198  299A               	goto	u1371
  2136  0199  299B               	goto	u1370
  2137  019A                     u1371:
  2138  019A  294F               	goto	l2401
  2139  019B                     u1370:
  2140  019B                     l2423:
  2141  019B  3185  2504  3181   	fcall	_start_pmode
  2142  019E  294F               	goto	l2401
  2143  019F                     l2427:
  2144                           
  2145                           ;progger.c: 505:     {;progger.c: 506:       here = getch();
  2146  019F  3187  27E6  3181   	fcall	_getch
  2147  01A2  0020               	movlb	0	; select bank0
  2148  01A3  00BF               	movwf	??_avrisp
  2149  01A4  01C0               	clrf	??_avrisp+1
  2150  01A5  083F               	movf	??_avrisp,w
  2151  01A6  00FA               	movwf	_here
  2152  01A7  0840               	movf	??_avrisp+1,w
  2153  01A8  00FB               	movwf	_here+1
  2154                           
  2155                           ;progger.c: 507:       here += 256 * getch();
  2156  01A9  3187  27E6  3181   	fcall	_getch
  2157  01AC  0020               	movlb	0	; select bank0
  2158  01AD  00BF               	movwf	??_avrisp
  2159  01AE  01C0               	clrf	??_avrisp+1
  2160  01AF  083F               	movf	??_avrisp,w
  2161  01B0  00C0               	movwf	??_avrisp+1
  2162  01B1  01BF               	clrf	??_avrisp
  2163  01B2  083F               	movf	??_avrisp,w
  2164  01B3  07FA               	addwf	_here,f
  2165  01B4  0840               	movf	??_avrisp+1,w
  2166  01B5  3DFB               	addwfc	_here+1,f
  2167                           
  2168                           ;progger.c: 508:       empty_reply();
  2169  01B6  3187  27CB  3181   	fcall	_empty_reply
  2170                           
  2171                           ;progger.c: 509:       break;
  2172  01B9  2A37               	goto	l323
  2173  01BA                     l2429:
  2174                           
  2175                           ;progger.c: 512:     {;progger.c: 513:       getch();
  2176  01BA  3187  27E6  3181   	fcall	_getch
  2177                           
  2178                           ;progger.c: 514:       getch();
  2179  01BD  3187  27E6  3181   	fcall	_getch
  2180                           
  2181                           ;progger.c: 515:       empty_reply();
  2182  01C0  3187  27CB  3181   	fcall	_empty_reply
  2183                           
  2184                           ;progger.c: 516:       break;
  2185  01C3  2A37               	goto	l323
  2186  01C4                     l2431:
  2187                           
  2188                           ;progger.c: 519:     {;progger.c: 520:       getch();
  2189  01C4  3187  27E6  3181   	fcall	_getch
  2190                           
  2191                           ;progger.c: 521:       empty_reply();
  2192  01C7  3187  27CB  3181   	fcall	_empty_reply
  2193                           
  2194                           ;progger.c: 522:       break;
  2195  01CA  2A37               	goto	l323
  2196  01CB                     l2433:
  2197                           
  2198                           ;progger.c: 525:     {;progger.c: 526:       program_page();
  2199  01CB  3183  237A  3181   	fcall	_program_page
  2200                           
  2201                           ;progger.c: 527:       break;
  2202  01CE  2A37               	goto	l323
  2203  01CF                     l2435:
  2204                           
  2205                           ;progger.c: 530:     {;progger.c: 531:       read_page();
  2206  01CF  3183  2319  3181   	fcall	_read_page
  2207                           
  2208                           ;progger.c: 532:       break;
  2209  01D2  2A37               	goto	l323
  2210  01D3                     l2437:
  2211                           
  2212                           ;progger.c: 535:     {;progger.c: 536:       universal();
  2213  01D3  3186  2669  3181   	fcall	_universal
  2214                           
  2215                           ;progger.c: 537:       break;
  2216  01D6  2A37               	goto	l323
  2217  01D7                     l2439:
  2218                           
  2219                           ;progger.c: 540:     {;progger.c: 541:       errors = 0;
  2220  01D7  01D7               	clrf	_errors
  2221  01D8  01D8               	clrf	_errors+1
  2222  01D9                     l2441:
  2223                           
  2224                           ;progger.c: 542:       end_pmode();
  2225  01D9  318F  27A8  3181   	fcall	_end_pmode
  2226  01DC  294F               	goto	l2401
  2227  01DD                     l2445:
  2228                           
  2229                           ;progger.c: 547:     {;progger.c: 548:       read_signature();
  2230  01DD  3183  23D8  3181   	fcall	_read_signature
  2231                           
  2232                           ;progger.c: 549:       break;
  2233  01E0  2A37               	goto	l323
  2234  01E1                     l2447:
  2235                           
  2236                           ;progger.c: 554:     {;progger.c: 555:       errors++;
  2237  01E1  3001               	movlw	1
  2238  01E2  07D7               	addwf	_errors,f
  2239  01E3  3000               	movlw	0
  2240  01E4  3DD8               	addwfc	_errors+1,f
  2241  01E5                     l2449:
  2242                           
  2243                           ;progger.c: 556:       uart_sendChar(0x15);
  2244  01E5  3015               	movlw	21
  2245  01E6  318F  2788  3181   	fcall	_uart_sendChar
  2246                           
  2247                           ;progger.c: 557:       break;
  2248  01E9  2A37               	goto	l323
  2249  01EA                     l2451:
  2250                           
  2251                           ;progger.c: 561:     {;progger.c: 562:       errors++;
  2252  01EA  3001               	movlw	1
  2253  01EB  07D7               	addwf	_errors,f
  2254  01EC  3000               	movlw	0
  2255  01ED  3DD8               	addwfc	_errors+1,f
  2256  01EE                     l2453:
  2257                           
  2258                           ;progger.c: 563:       if (0x20 == getch()) uart_sendChar(0x12);
  2259  01EE  3187  27E6  3181   	fcall	_getch
  2260  01F1  3A20               	xorlw	32
  2261  01F2  1D03               	skipz
  2262  01F3  29F5               	goto	u1381
  2263  01F4  29F6               	goto	u1380
  2264  01F5                     u1381:
  2265  01F5  29FB               	goto	l2457
  2266  01F6                     u1380:
  2267  01F6                     l2455:
  2268  01F6  3012               	movlw	18
  2269  01F7  318F  2788  3181   	fcall	_uart_sendChar
  2270  01FA  2A37               	goto	l323
  2271  01FB                     l2457:
  2272  01FB  3015               	movlw	21
  2273  01FC  318F  2788  3181   	fcall	_uart_sendChar
  2274  01FF  2A37               	goto	l323
  2275  0200                     l2461:
  2276  0200  0842               	movf	avrisp@ch,w
  2277  0201  00BF               	movwf	??_avrisp
  2278  0202  01C0               	clrf	??_avrisp+1
  2279                           
  2280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2281                           ; Switch size 1, requested type "simple"
  2282                           ; Number of cases is 1, Range of values is 0 to 0
  2283                           ; switch strategies available:
  2284                           ; Name         Instructions Cycles
  2285                           ; simple_byte            4     3 (average)
  2286                           ; direct_byte            8     6 (fixed)
  2287                           ; jumptable            260     6 (fixed)
  2288                           ;	Chosen strategy is simple_byte
  2289  0203  0840               	movf	??_avrisp+1,w
  2290  0204  3A00               	xorlw	0	; case 0
  2291  0205  1903               	skipnz
  2292  0206  2A08               	goto	l2525
  2293  0207  29EA               	goto	l2451
  2294  0208                     l2525:
  2295                           
  2296                           ; Switch size 1, requested type "simple"
  2297                           ; Number of cases is 15, Range of values is 32 to 117
  2298                           ; switch strategies available:
  2299                           ; Name         Instructions Cycles
  2300                           ; simple_byte           46    24 (average)
  2301                           ; direct_byte          181     9 (fixed)
  2302                           ; jumptable            263     9 (fixed)
  2303                           ;	Chosen strategy is simple_byte
  2304  0208  083F               	movf	??_avrisp,w
  2305  0209  3A20               	xorlw	32	; case 32
  2306  020A  1903               	skipnz
  2307  020B  29E1               	goto	l2447
  2308  020C  3A10               	xorlw	16	; case 48
  2309  020D  1903               	skipnz
  2310  020E  294D               	goto	l2399
  2311  020F  3A01               	xorlw	1	; case 49
  2312  0210  1903               	skipnz
  2313  0211  2953               	goto	l2403
  2314  0212  3A70               	xorlw	112	; case 65
  2315  0213  1903               	skipnz
  2316  0214  2975               	goto	l2415
  2317  0215  3A03               	xorlw	3	; case 66
  2318  0216  1903               	skipnz
  2319  0217  297C               	goto	l2417
  2320  0218  3A07               	xorlw	7	; case 69
  2321  0219  1903               	skipnz
  2322  021A  298A               	goto	l2419
  2323  021B  3A15               	xorlw	21	; case 80
  2324  021C  1903               	skipnz
  2325  021D  2995               	goto	l2421
  2326  021E  3A01               	xorlw	1	; case 81
  2327  021F  1903               	skipnz
  2328  0220  29D7               	goto	l2439
  2329  0221  3A04               	xorlw	4	; case 85
  2330  0222  1903               	skipnz
  2331  0223  299F               	goto	l2427
  2332  0224  3A03               	xorlw	3	; case 86
  2333  0225  1903               	skipnz
  2334  0226  29D3               	goto	l2437
  2335  0227  3A36               	xorlw	54	; case 96
  2336  0228  1903               	skipnz
  2337  0229  29BA               	goto	l2429
  2338  022A  3A01               	xorlw	1	; case 97
  2339  022B  1903               	skipnz
  2340  022C  29C4               	goto	l2431
  2341  022D  3A05               	xorlw	5	; case 100
  2342  022E  1903               	skipnz
  2343  022F  29CB               	goto	l2433
  2344  0230  3A10               	xorlw	16	; case 116
  2345  0231  1903               	skipnz
  2346  0232  29CF               	goto	l2435
  2347  0233  3A01               	xorlw	1	; case 117
  2348  0234  1903               	skipnz
  2349  0235  29DD               	goto	l2445
  2350  0236  29EA               	goto	l2451
  2351  0237                     l323:
  2352  0237  0008               	return
  2353  0238                     __end_of_avrisp:
  2354                           
  2355                           	psect	text5
  2356  0669                     __ptext5:	
  2357 ;; *************** function _universal *****************
  2358 ;; Defined at:
  2359 ;;		line 228 in file "progger.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  ch              1    9[COMMON] unsigned char 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      void 
  2366 ;; Registers used:
  2367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2375 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2376 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2377 ;;Total ram usage:        5 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    4
  2380 ;; This function calls:
  2381 ;;		_breply
  2382 ;;		_fill
  2383 ;;		_spi_transaction
  2384 ;; This function is called by:
  2385 ;;		_avrisp
  2386 ;; This function uses a non-reentrant model
  2387 ;;
  2388                           
  2389                           
  2390                           ;psect for function _universal
  2391  0669                     _universal:
  2392  0669                     l2329:	
  2393                           ;incstack = 0
  2394                           ; Regs used in _universal: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2395                           
  2396                           
  2397                           ;progger.c: 230:   uint8_t ch;;progger.c: 232:   fill(4);
  2398  0669  3004               	movlw	4
  2399  066A  00F4               	movwf	fill@n
  2400  066B  3000               	movlw	0
  2401  066C  00F5               	movwf	fill@n+1
  2402  066D  3186  26FE  3186   	fcall	_fill
  2403                           
  2404                           ;progger.c: 233:   ch = spi_transaction(buff[0], buff[1], buff[2], buff[3]);
  2405  0670  30F0               	movlw	240
  2406  0671  0086               	movwf	6
  2407  0672  3021               	movlw	33
  2408  0673  0087               	movwf	7
  2409  0674  3141               	addfsr 1,1
  2410  0675  0801               	movf	1,w
  2411  0676  0020               	movlb	0	; select bank0
  2412  0677  00A5               	movwf	??_universal
  2413  0678  0825               	movf	??_universal,w
  2414  0679  00A0               	movwf	spi_transaction@b
  2415  067A  30F0               	movlw	240
  2416  067B  0086               	movwf	6
  2417  067C  3021               	movlw	33
  2418  067D  0087               	movwf	7
  2419  067E  3142               	addfsr 1,2
  2420  067F  0801               	movf	1,w
  2421  0680  00A6               	movwf	??_universal+1
  2422  0681  0826               	movf	??_universal+1,w
  2423  0682  00A1               	movwf	spi_transaction@c
  2424  0683  30F0               	movlw	240
  2425  0684  0086               	movwf	6
  2426  0685  3021               	movlw	33
  2427  0686  0087               	movwf	7
  2428  0687  3143               	addfsr 1,3
  2429  0688  0801               	movf	1,w
  2430  0689  00A7               	movwf	??_universal+2
  2431  068A  0827               	movf	??_universal+2,w
  2432  068B  00A2               	movwf	spi_transaction@d
  2433  068C  30F0               	movlw	240
  2434  068D  0086               	movwf	6
  2435  068E  3021               	movlw	33
  2436  068F  0087               	movwf	7
  2437  0690  0801               	movf	1,w
  2438  0691  318F  27D3  3186   	fcall	_spi_transaction
  2439  0694  0020               	movlb	0	; select bank0
  2440  0695  00A8               	movwf	??_universal+3
  2441  0696  0828               	movf	??_universal+3,w
  2442  0697  00F9               	movwf	universal@ch
  2443                           
  2444                           ;progger.c: 234:   breply(ch);
  2445  0698  0879               	movf	universal@ch,w
  2446  0699  3187  2754  3186   	fcall	_breply
  2447  069C                     l223:
  2448  069C  0008               	return
  2449  069D                     __end_of_universal:
  2450                           
  2451                           	psect	text6
  2452  0793                     __ptext6:	
  2453 ;; *************** function _uart_sendString *****************
  2454 ;; Defined at:
  2455 ;;		line 21 in file "uart.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  str             2    3[COMMON] PTR unsigned char 
  2458 ;;		 -> STR_1(8), 
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;  i               2    6[COMMON] int 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2470 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2471 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2472 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2473 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2474 ;;Total ram usage:        5 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    2
  2477 ;; This function calls:
  2478 ;;		_uart_sendChar
  2479 ;; This function is called by:
  2480 ;;		_avrisp
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           
  2485                           ;psect for function _uart_sendString
  2486  0793                     _uart_sendString:
  2487  0793                     l2275:	
  2488                           ;incstack = 0
  2489                           ; Regs used in _uart_sendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2490                           
  2491                           
  2492                           ;uart.c: 21: void uart_sendString(uint8_t *str);uart.c: 22: {;uart.c: 23:     int i = 0;
  2493  0793  01F6               	clrf	uart_sendString@i
  2494  0794  01F7               	clrf	uart_sendString@i+1
  2495                           
  2496                           ;uart.c: 24:     while(str[i] != '\0') uart_sendChar(str[i++]);
  2497  0795  2FA4               	goto	l2281
  2498  0796                     l2277:
  2499  0796  0873               	movf	uart_sendString@str,w
  2500  0797  0776               	addwf	uart_sendString@i,w
  2501  0798  0084               	movwf	4
  2502  0799  0874               	movf	uart_sendString@str+1,w
  2503  079A  3D77               	addwfc	uart_sendString@i+1,w
  2504  079B  0085               	movwf	5
  2505  079C  0800               	movf	0,w	;code access
  2506  079D  318F  2788  3187   	fcall	_uart_sendChar
  2507  07A0                     l2279:
  2508  07A0  3001               	movlw	1
  2509  07A1  07F6               	addwf	uart_sendString@i,f
  2510  07A2  3000               	movlw	0
  2511  07A3  3DF7               	addwfc	uart_sendString@i+1,f
  2512  07A4                     l2281:
  2513  07A4  0873               	movf	uart_sendString@str,w
  2514  07A5  0776               	addwf	uart_sendString@i,w
  2515  07A6  0084               	movwf	4
  2516  07A7  0874               	movf	uart_sendString@str+1,w
  2517  07A8  3D77               	addwfc	uart_sendString@i+1,w
  2518  07A9  0085               	movwf	5
  2519  07AA  0012               	moviw fsr0++
  2520  07AB  1D03               	btfss	3,2
  2521  07AC  2FAE               	goto	u1271
  2522  07AD  2FAF               	goto	u1270
  2523  07AE                     u1271:
  2524  07AE  2F96               	goto	l2277
  2525  07AF                     u1270:
  2526  07AF                     l100:
  2527  07AF  0008               	return
  2528  07B0                     __end_of_uart_sendString:
  2529                           
  2530                           	psect	text7
  2531  0504                     __ptext7:	
  2532 ;; *************** function _start_pmode *****************
  2533 ;; Defined at:
  2534 ;;		line 191 in file "progger.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		wreg, status,2, status,0, pclath, cstack
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2550 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2551 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2552 ;;Total ram usage:        2 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    3
  2555 ;; This function calls:
  2556 ;;		_reset_target
  2557 ;;		_spi_init
  2558 ;;		_spi_transaction
  2559 ;; This function is called by:
  2560 ;;		_avrisp
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           
  2565                           ;psect for function _start_pmode
  2566  0504                     _start_pmode:
  2567  0504                     l2309:	
  2568                           ;incstack = 0
  2569                           ; Regs used in _start_pmode: [wreg+status,2+status,0+pclath+cstack]
  2570                           
  2571                           
  2572                           ;progger.c: 199:   reset_target(1);
  2573  0504  3001               	movlw	1
  2574  0505  3187  2774  3185   	fcall	_reset_target
  2575  0508                     l2311:
  2576                           
  2577                           ;progger.c: 200:   TRISC &= ~(1 << 1);
  2578  0508  30FD               	movlw	253
  2579  0509  0020               	movlb	0	; select bank0
  2580  050A  00A3               	movwf	??_start_pmode
  2581  050B  0823               	movf	??_start_pmode,w
  2582  050C  0021               	movlb	1	; select bank1
  2583  050D  058E               	andwf	14,f	;volatile
  2584  050E                     l2313:
  2585                           
  2586                           ;progger.c: 202:   spi_init();
  2587  050E  318F  2783  3185   	fcall	_spi_init
  2588  0511                     l2315:
  2589                           
  2590                           ;progger.c: 207:   _delay((unsigned long)((20)*(20000000/4000.0)));
  2591  0511  3082               	movlw	130
  2592  0512  0020               	movlb	0	; select bank0
  2593  0513  00A3               	movwf	??_start_pmode
  2594  0514  30DD               	movlw	221
  2595  0515                     u1487:
  2596  0515  0B89               	decfsz	9,f
  2597  0516  2D15               	goto	u1487
  2598  0517  0BA3               	decfsz	??_start_pmode,f
  2599  0518  2D15               	goto	u1487
  2600  0519  3200               	nop2
  2601  051A                     l2317:
  2602                           
  2603                           ;progger.c: 208:   reset_target(0);
  2604  051A  3000               	movlw	0
  2605  051B  3187  2774  3185   	fcall	_reset_target
  2606  051E                     l2319:
  2607                           
  2608                           ;progger.c: 211:   _delay((unsigned long)((100)*(20000000/4000000.0)));
  2609  051E  30A6               	movlw	166
  2610  051F                     u1497:
  2611  051F  0B89               	decfsz	9,f
  2612  0520  2D1F               	goto	u1497
  2613  0521  3200               	nop2
  2614  0522                     l2321:
  2615                           
  2616                           ;progger.c: 212:   reset_target(1);
  2617  0522  3001               	movlw	1
  2618  0523  3187  2774  3185   	fcall	_reset_target
  2619  0526                     l2323:
  2620                           
  2621                           ;progger.c: 215:   _delay((unsigned long)((50)*(20000000/4000.0)));
  2622  0526  3002               	movlw	2
  2623  0527  0020               	movlb	0	; select bank0
  2624  0528  00A4               	movwf	??_start_pmode+1
  2625  0529  3045               	movlw	69
  2626  052A  00A3               	movwf	??_start_pmode
  2627  052B  30A9               	movlw	169
  2628  052C                     u1507:
  2629  052C  0B89               	decfsz	9,f
  2630  052D  2D2C               	goto	u1507
  2631  052E  0BA3               	decfsz	??_start_pmode,f
  2632  052F  2D2C               	goto	u1507
  2633  0530  0BA4               	decfsz	??_start_pmode+1,f
  2634  0531  2D2C               	goto	u1507
  2635  0532  3200               	nop2
  2636  0533                     l2325:
  2637                           
  2638                           ;progger.c: 216:   spi_transaction(0xAC, 0x53, 0x00, 0x00);
  2639  0533  3053               	movlw	83
  2640  0534  0020               	movlb	0	; select bank0
  2641  0535  00A3               	movwf	??_start_pmode
  2642  0536  0823               	movf	??_start_pmode,w
  2643  0537  00A0               	movwf	spi_transaction@b
  2644  0538  01A1               	clrf	spi_transaction@c
  2645  0539  01A2               	clrf	spi_transaction@d
  2646  053A  30AC               	movlw	172
  2647  053B  318F  27D3  3185   	fcall	_spi_transaction
  2648  053E                     l2327:
  2649                           
  2650                           ;progger.c: 217:   pmode = 1;
  2651  053E  3001               	movlw	1
  2652  053F  0020               	movlb	0	; select bank0
  2653  0540  00D9               	movwf	_pmode
  2654  0541  3000               	movlw	0
  2655  0542  00DA               	movwf	_pmode+1
  2656  0543                     l217:
  2657  0543  0008               	return
  2658  0544                     __end_of_start_pmode:
  2659                           
  2660                           	psect	text8
  2661  0F83                     __ptext8:	
  2662 ;; *************** function _spi_init *****************
  2663 ;; Defined at:
  2664 ;;		line 5 in file "spi.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;		None
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;		None
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  1    wreg      void 
  2671 ;; Registers used:
  2672 ;;		None
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2682 ;;Total ram usage:        0 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    1
  2685 ;; This function calls:
  2686 ;;		Nothing
  2687 ;; This function is called by:
  2688 ;;		_start_pmode
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           
  2693                           ;psect for function _spi_init
  2694  0F83                     _spi_init:
  2695  0F83                     l1667:	
  2696                           ;incstack = 0
  2697                           ; Regs used in _spi_init: []
  2698                           
  2699                           
  2700                           ;spi.c: 7:     TRISC5 = 0;
  2701  0F83  0021               	movlb	1	; select bank1
  2702  0F84  128E               	bcf	14,5	;volatile
  2703                           
  2704                           ;spi.c: 8:     TRISC4 = 1;
  2705  0F85  160E               	bsf	14,4	;volatile
  2706                           
  2707                           ;spi.c: 9:     TRISC3 = 0;
  2708  0F86  118E               	bcf	14,3	;volatile
  2709  0F87                     l60:
  2710  0F87  0008               	return
  2711  0F88                     __end_of_spi_init:
  2712                           
  2713                           	psect	text9
  2714  003D                     __ptext9:	
  2715 ;; *************** function _set_parameters *****************
  2716 ;; Defined at:
  2717 ;;		line 164 in file "progger.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;		None
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;		None
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      void 
  2724 ;; Registers used:
  2725 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2733 ;;      Temps:          0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2734 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2735 ;;Total ram usage:       19 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:    1
  2738 ;; This function calls:
  2739 ;;		Nothing
  2740 ;; This function is called by:
  2741 ;;		_avrisp
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           
  2746                           ;psect for function _set_parameters
  2747  003D                     _set_parameters:
  2748  003D                     l1821:	
  2749                           ;incstack = 0
  2750                           ; Regs used in _set_parameters: [wreg+fsr1l+fsr1h+status,2+status,0]
  2751                           
  2752                           
  2753                           ;progger.c: 166:   param.devicecode = buff[0];
  2754  003D  30F0               	movlw	240
  2755  003E  0086               	movwf	6
  2756  003F  3021               	movlw	33
  2757  0040  0087               	movwf	7
  2758  0041  0801               	movf	1,w
  2759  0042  0020               	movlb	0	; select bank0
  2760  0043  00A0               	movwf	??_set_parameters
  2761  0044  0820               	movf	??_set_parameters,w
  2762  0045  00C4               	movwf	_param
  2763                           
  2764                           ;progger.c: 167:   param.revision = buff[1];
  2765  0046  30F0               	movlw	240
  2766  0047  0086               	movwf	6
  2767  0048  3021               	movlw	33
  2768  0049  0087               	movwf	7
  2769  004A  3141               	addfsr 1,1
  2770  004B  0801               	movf	1,w
  2771  004C  00A0               	movwf	??_set_parameters
  2772  004D  0820               	movf	??_set_parameters,w
  2773  004E  00C5               	movwf	_param+1
  2774                           
  2775                           ;progger.c: 168:   param.progtype = buff[2];
  2776  004F  30F0               	movlw	240
  2777  0050  0086               	movwf	6
  2778  0051  3021               	movlw	33
  2779  0052  0087               	movwf	7
  2780  0053  3142               	addfsr 1,2
  2781  0054  0801               	movf	1,w
  2782  0055  00A0               	movwf	??_set_parameters
  2783  0056  0820               	movf	??_set_parameters,w
  2784  0057  00C6               	movwf	_param+2
  2785                           
  2786                           ;progger.c: 169:   param.parmode = buff[3];
  2787  0058  30F0               	movlw	240
  2788  0059  0086               	movwf	6
  2789  005A  3021               	movlw	33
  2790  005B  0087               	movwf	7
  2791  005C  3143               	addfsr 1,3
  2792  005D  0801               	movf	1,w
  2793  005E  00A0               	movwf	??_set_parameters
  2794  005F  0820               	movf	??_set_parameters,w
  2795  0060  00C7               	movwf	_param+3
  2796                           
  2797                           ;progger.c: 170:   param.polling = buff[4];
  2798  0061  30F0               	movlw	240
  2799  0062  0086               	movwf	6
  2800  0063  3021               	movlw	33
  2801  0064  0087               	movwf	7
  2802  0065  3144               	addfsr 1,4
  2803  0066  0801               	movf	1,w
  2804  0067  00A0               	movwf	??_set_parameters
  2805  0068  0820               	movf	??_set_parameters,w
  2806  0069  00C8               	movwf	_param+4
  2807                           
  2808                           ;progger.c: 171:   param.selftimed = buff[5];
  2809  006A  30F0               	movlw	240
  2810  006B  0086               	movwf	6
  2811  006C  3021               	movlw	33
  2812  006D  0087               	movwf	7
  2813  006E  3145               	addfsr 1,5
  2814  006F  0801               	movf	1,w
  2815  0070  00A0               	movwf	??_set_parameters
  2816  0071  0820               	movf	??_set_parameters,w
  2817  0072  00C9               	movwf	_param+5
  2818                           
  2819                           ;progger.c: 172:   param.lockbytes = buff[6];
  2820  0073  30F0               	movlw	240
  2821  0074  0086               	movwf	6
  2822  0075  3021               	movlw	33
  2823  0076  0087               	movwf	7
  2824  0077  3146               	addfsr 1,6
  2825  0078  0801               	movf	1,w
  2826  0079  00A0               	movwf	??_set_parameters
  2827  007A  0820               	movf	??_set_parameters,w
  2828  007B  00CA               	movwf	_param+6
  2829                           
  2830                           ;progger.c: 173:   param.fusebytes = buff[7];
  2831  007C  30F0               	movlw	240
  2832  007D  0086               	movwf	6
  2833  007E  3021               	movlw	33
  2834  007F  0087               	movwf	7
  2835  0080  3147               	addfsr 1,7
  2836  0081  0801               	movf	1,w
  2837  0082  00A0               	movwf	??_set_parameters
  2838  0083  0820               	movf	??_set_parameters,w
  2839  0084  00CB               	movwf	_param+7
  2840                           
  2841                           ;progger.c: 174:   param.flashpoll = buff[8];
  2842  0085  30F0               	movlw	240
  2843  0086  0086               	movwf	6
  2844  0087  3021               	movlw	33
  2845  0088  0087               	movwf	7
  2846  0089  3148               	addfsr 1,8
  2847  008A  0801               	movf	1,w
  2848  008B  00A0               	movwf	??_set_parameters
  2849  008C  0820               	movf	??_set_parameters,w
  2850  008D  00CC               	movwf	_param+8
  2851  008E                     l1823:
  2852                           
  2853                           ;progger.c: 177:   param.eeprompoll = (*&buff[10] * 256 + *(&buff[10]+1) );
  2854  008E  30F0               	movlw	240
  2855  008F  0086               	movwf	6
  2856  0090  3021               	movlw	33
  2857  0091  0087               	movwf	7
  2858  0092  314B               	addfsr 1,11
  2859  0093  0801               	movf	1,w
  2860  0094  00A0               	movwf	??_set_parameters
  2861  0095  01A1               	clrf	??_set_parameters+1
  2862  0096  30F0               	movlw	240
  2863  0097  0086               	movwf	6
  2864  0098  3021               	movlw	33
  2865  0099  0087               	movwf	7
  2866  009A  314A               	addfsr 1,10
  2867  009B  0801               	movf	1,w
  2868  009C  00A2               	movwf	??_set_parameters+2
  2869  009D  01A3               	clrf	??_set_parameters+3
  2870  009E  0822               	movf	??_set_parameters+2,w
  2871  009F  00A3               	movwf	??_set_parameters+3
  2872  00A0  01A2               	clrf	??_set_parameters+2
  2873  00A1  0820               	movf	??_set_parameters,w
  2874  00A2  0722               	addwf	??_set_parameters+2,w
  2875  00A3  00CD               	movwf	_param+9
  2876  00A4  0821               	movf	??_set_parameters+1,w
  2877  00A5  3D23               	addwfc	??_set_parameters+3,w
  2878  00A6  00CE               	movwf	_param+10
  2879  00A7                     l1825:
  2880                           
  2881                           ;progger.c: 178:   param.pagesize = (*&buff[12] * 256 + *(&buff[12]+1) );
  2882  00A7  30F0               	movlw	240
  2883  00A8  0086               	movwf	6
  2884  00A9  3021               	movlw	33
  2885  00AA  0087               	movwf	7
  2886  00AB  314D               	addfsr 1,13
  2887  00AC  0801               	movf	1,w
  2888  00AD  00A0               	movwf	??_set_parameters
  2889  00AE  01A1               	clrf	??_set_parameters+1
  2890  00AF  30F0               	movlw	240
  2891  00B0  0086               	movwf	6
  2892  00B1  3021               	movlw	33
  2893  00B2  0087               	movwf	7
  2894  00B3  314C               	addfsr 1,12
  2895  00B4  0801               	movf	1,w
  2896  00B5  00A2               	movwf	??_set_parameters+2
  2897  00B6  01A3               	clrf	??_set_parameters+3
  2898  00B7  0822               	movf	??_set_parameters+2,w
  2899  00B8  00A3               	movwf	??_set_parameters+3
  2900  00B9  01A2               	clrf	??_set_parameters+2
  2901  00BA  0820               	movf	??_set_parameters,w
  2902  00BB  0722               	addwf	??_set_parameters+2,w
  2903  00BC  00CF               	movwf	_param+11
  2904  00BD  0821               	movf	??_set_parameters+1,w
  2905  00BE  3D23               	addwfc	??_set_parameters+3,w
  2906  00BF  00D0               	movwf	_param+12
  2907  00C0                     l1827:
  2908                           
  2909                           ;progger.c: 179:   param.eepromsize = (*&buff[14] * 256 + *(&buff[14]+1) );
  2910  00C0  30F0               	movlw	240
  2911  00C1  0086               	movwf	6
  2912  00C2  3021               	movlw	33
  2913  00C3  0087               	movwf	7
  2914  00C4  314F               	addfsr 1,15
  2915  00C5  0801               	movf	1,w
  2916  00C6  00A0               	movwf	??_set_parameters
  2917  00C7  01A1               	clrf	??_set_parameters+1
  2918  00C8  30F0               	movlw	240
  2919  00C9  0086               	movwf	6
  2920  00CA  3021               	movlw	33
  2921  00CB  0087               	movwf	7
  2922  00CC  314E               	addfsr 1,14
  2923  00CD  0801               	movf	1,w
  2924  00CE  00A2               	movwf	??_set_parameters+2
  2925  00CF  01A3               	clrf	??_set_parameters+3
  2926  00D0  0822               	movf	??_set_parameters+2,w
  2927  00D1  00A3               	movwf	??_set_parameters+3
  2928  00D2  01A2               	clrf	??_set_parameters+2
  2929  00D3  0820               	movf	??_set_parameters,w
  2930  00D4  0722               	addwf	??_set_parameters+2,w
  2931  00D5  00D1               	movwf	_param+13
  2932  00D6  0821               	movf	??_set_parameters+1,w
  2933  00D7  3D23               	addwfc	??_set_parameters+3,w
  2934  00D8  00D2               	movwf	_param+14
  2935  00D9                     l1829:
  2936                           
  2937                           ;progger.c: 182:   param.flashsize = buff[16] * 0x01000000
  2938  00D9  30F0               	movlw	240
  2939  00DA  0086               	movwf	6
  2940  00DB  3021               	movlw	33
  2941  00DC  0087               	movwf	7
  2942  00DD  3153               	addfsr 1,19
  2943  00DE  0801               	movf	1,w
  2944  00DF  00A0               	movwf	??_set_parameters
  2945  00E0  01A1               	clrf	??_set_parameters+1
  2946  00E1  01A2               	clrf	??_set_parameters+2
  2947  00E2  01A3               	clrf	??_set_parameters+3
  2948  00E3  30F0               	movlw	240
  2949  00E4  0086               	movwf	6
  2950  00E5  3021               	movlw	33
  2951  00E6  0087               	movwf	7
  2952  00E7  3152               	addfsr 1,18
  2953  00E8  0801               	movf	1,w
  2954  00E9  00A4               	movwf	??_set_parameters+4
  2955  00EA  01A5               	clrf	??_set_parameters+5
  2956  00EB  0824               	movf	??_set_parameters+4,w
  2957  00EC  00A5               	movwf	??_set_parameters+5
  2958  00ED  01A4               	clrf	??_set_parameters+4
  2959  00EE  0824               	movf	??_set_parameters+4,w
  2960  00EF  00A7               	movwf	??_set_parameters+7
  2961  00F0  0825               	movf	??_set_parameters+5,w
  2962  00F1  00A8               	movwf	??_set_parameters+8
  2963  00F2  3000               	movlw	0
  2964  00F3  1BA8               	btfsc	??_set_parameters+8,7
  2965  00F4  30FF               	movlw	255
  2966  00F5  00A9               	movwf	??_set_parameters+9
  2967  00F6  00AA               	movwf	??_set_parameters+10
  2968  00F7  30F0               	movlw	240
  2969  00F8  0086               	movwf	6
  2970  00F9  3021               	movlw	33
  2971  00FA  0087               	movwf	7
  2972  00FB  3151               	addfsr 1,17
  2973  00FC  0801               	movf	1,w
  2974  00FD  00AB               	movwf	??_set_parameters+11
  2975  00FE  01AC               	clrf	??_set_parameters+12
  2976  00FF  01AD               	clrf	??_set_parameters+13
  2977  0100  01AE               	clrf	??_set_parameters+14
  2978  0101  3010               	movlw	16
  2979  0102                     u885:
  2980  0102  35AB               	lslf	??_set_parameters+11,f
  2981  0103  0DAC               	rlf	??_set_parameters+12,f
  2982  0104  0DAD               	rlf	??_set_parameters+13,f
  2983  0105  0DAE               	rlf	??_set_parameters+14,f
  2984  0106                     u880:
  2985  0106  0B89               	decfsz	9,f
  2986  0107  2902               	goto	u885
  2987  0108  30F0               	movlw	240
  2988  0109  0086               	movwf	6
  2989  010A  3021               	movlw	33
  2990  010B  0087               	movwf	7
  2991  010C  3150               	addfsr 1,16
  2992  010D  0801               	movf	1,w
  2993  010E  00AF               	movwf	??_set_parameters+15
  2994  010F  01B0               	clrf	??_set_parameters+16
  2995  0110  01B1               	clrf	??_set_parameters+17
  2996  0111  01B2               	clrf	??_set_parameters+18
  2997  0112  3018               	movlw	24
  2998  0113                     u895:
  2999  0113  35AF               	lslf	??_set_parameters+15,f
  3000  0114  0DB0               	rlf	??_set_parameters+16,f
  3001  0115  0DB1               	rlf	??_set_parameters+17,f
  3002  0116  0DB2               	rlf	??_set_parameters+18,f
  3003  0117                     u890:
  3004  0117  0B89               	decfsz	9,f
  3005  0118  2913               	goto	u895
  3006  0119  082F               	movf	??_set_parameters+15,w
  3007  011A  07AB               	addwf	??_set_parameters+11,f
  3008  011B  0830               	movf	??_set_parameters+16,w
  3009  011C  3DAC               	addwfc	??_set_parameters+12,f
  3010  011D  0831               	movf	??_set_parameters+17,w
  3011  011E  3DAD               	addwfc	??_set_parameters+13,f
  3012  011F  0832               	movf	??_set_parameters+18,w
  3013  0120  3DAE               	addwfc	??_set_parameters+14,f
  3014  0121  082B               	movf	??_set_parameters+11,w
  3015  0122  07A7               	addwf	??_set_parameters+7,f
  3016  0123  082C               	movf	??_set_parameters+12,w
  3017  0124  3DA8               	addwfc	??_set_parameters+8,f
  3018  0125  082D               	movf	??_set_parameters+13,w
  3019  0126  3DA9               	addwfc	??_set_parameters+9,f
  3020  0127  082E               	movf	??_set_parameters+14,w
  3021  0128  3DAA               	addwfc	??_set_parameters+10,f
  3022  0129  0827               	movf	??_set_parameters+7,w
  3023  012A  07A0               	addwf	??_set_parameters,f
  3024  012B  0828               	movf	??_set_parameters+8,w
  3025  012C  3DA1               	addwfc	??_set_parameters+1,f
  3026  012D  0829               	movf	??_set_parameters+9,w
  3027  012E  3DA2               	addwfc	??_set_parameters+2,f
  3028  012F  082A               	movf	??_set_parameters+10,w
  3029  0130  3DA3               	addwfc	??_set_parameters+3,f
  3030  0131  0823               	movf	??_set_parameters+3,w
  3031  0132  00D6               	movwf	_param+18
  3032  0133  0822               	movf	??_set_parameters+2,w
  3033  0134  00D5               	movwf	_param+17
  3034  0135  0821               	movf	??_set_parameters+1,w
  3035  0136  00D4               	movwf	_param+16
  3036  0137  0820               	movf	??_set_parameters,w
  3037  0138  00D3               	movwf	_param+15
  3038  0139                     l1831:
  3039                           
  3040                           ;progger.c: 188:   rst_active_high = (param.devicecode >= 0xe0);
  3041  0139  30E0               	movlw	224
  3042  013A  0244               	subwf	_param,w
  3043  013B  1803               	skipnc
  3044  013C  293E               	goto	u901
  3045  013D  2940               	goto	u900
  3046  013E                     u901:
  3047  013E  3001               	movlw	1
  3048  013F  2941               	goto	u910
  3049  0140                     u900:
  3050  0140  3000               	movlw	0
  3051  0141                     u910:
  3052  0141  00A0               	movwf	??_set_parameters
  3053  0142  0820               	movf	??_set_parameters,w
  3054  0143  00DB               	movwf	_rst_active_high
  3055  0144                     l214:
  3056  0144  0008               	return
  3057  0145                     __end_of_set_parameters:
  3058                           
  3059                           	psect	text10
  3060  03D8                     __ptext10:	
  3061 ;; *************** function _read_signature *****************
  3062 ;; Defined at:
  3063 ;;		line 434 in file "progger.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;		None
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;  low             1    7[BANK0 ] unsigned char 
  3068 ;;  middle          1    6[BANK0 ] unsigned char 
  3069 ;;  high            1    5[BANK0 ] unsigned char 
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      void 
  3072 ;; Registers used:
  3073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3080 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3081 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3082 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3083 ;;Total ram usage:        5 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    3
  3086 ;; This function calls:
  3087 ;;		_getch
  3088 ;;		_spi_transaction
  3089 ;;		_uart_sendChar
  3090 ;; This function is called by:
  3091 ;;		_avrisp
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           
  3096                           ;psect for function _read_signature
  3097  03D8                     _read_signature:
  3098  03D8                     l2387:	
  3099                           ;incstack = 0
  3100                           ; Regs used in _read_signature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3101                           
  3102                           
  3103                           ;progger.c: 436:   if (0x20 != getch())
  3104  03D8  3187  27E6  3183   	fcall	_getch
  3105  03DB  3A20               	xorlw	32
  3106  03DC  1903               	skipnz
  3107  03DD  2BDF               	goto	u1351
  3108  03DE  2BE0               	goto	u1350
  3109  03DF                     u1351:
  3110  03DF  2BEA               	goto	l2395
  3111  03E0                     u1350:
  3112  03E0                     l2389:
  3113                           
  3114                           ;progger.c: 437:   {;progger.c: 438:     errors++;
  3115  03E0  3001               	movlw	1
  3116  03E1  0020               	movlb	0	; select bank0
  3117  03E2  07D7               	addwf	_errors,f
  3118  03E3  3000               	movlw	0
  3119  03E4  3DD8               	addwfc	_errors+1,f
  3120  03E5                     l2391:
  3121                           
  3122                           ;progger.c: 439:     uart_sendChar(0x15);
  3123  03E5  3015               	movlw	21
  3124  03E6  318F  2788  3183   	fcall	_uart_sendChar
  3125  03E9  2C26               	goto	l297
  3126  03EA                     l2395:
  3127                           
  3128                           ;progger.c: 442:   uart_sendChar(0x14);
  3129  03EA  3014               	movlw	20
  3130  03EB  318F  2788  3183   	fcall	_uart_sendChar
  3131                           
  3132                           ;progger.c: 443:   uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
  3133  03EE  0020               	movlb	0	; select bank0
  3134  03EF  01A0               	clrf	spi_transaction@b
  3135  03F0  01A1               	clrf	spi_transaction@c
  3136  03F1  01A2               	clrf	spi_transaction@d
  3137  03F2  3030               	movlw	48
  3138  03F3  318F  27D3  3183   	fcall	_spi_transaction
  3139  03F6  0020               	movlb	0	; select bank0
  3140  03F7  00A3               	movwf	??_read_signature
  3141  03F8  0823               	movf	??_read_signature,w
  3142  03F9  00A5               	movwf	read_signature@high
  3143                           
  3144                           ;progger.c: 444:   uart_sendChar(high);
  3145  03FA  0825               	movf	read_signature@high,w
  3146  03FB  318F  2788  3183   	fcall	_uart_sendChar
  3147                           
  3148                           ;progger.c: 445:   uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
  3149  03FE  0020               	movlb	0	; select bank0
  3150  03FF  01A0               	clrf	spi_transaction@b
  3151  0400  01A1               	clrf	spi_transaction@c
  3152  0401  0AA1               	incf	spi_transaction@c,f
  3153  0402  01A2               	clrf	spi_transaction@d
  3154  0403  3030               	movlw	48
  3155  0404  318F  27D3  3183   	fcall	_spi_transaction
  3156  0407  0020               	movlb	0	; select bank0
  3157  0408  00A3               	movwf	??_read_signature
  3158  0409  0823               	movf	??_read_signature,w
  3159  040A  00A6               	movwf	read_signature@middle
  3160                           
  3161                           ;progger.c: 446:   uart_sendChar(middle);
  3162  040B  0826               	movf	read_signature@middle,w
  3163  040C  318F  2788  3183   	fcall	_uart_sendChar
  3164                           
  3165                           ;progger.c: 447:   uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
  3166  040F  0020               	movlb	0	; select bank0
  3167  0410  01A0               	clrf	spi_transaction@b
  3168  0411  3002               	movlw	2
  3169  0412  00A3               	movwf	??_read_signature
  3170  0413  0823               	movf	??_read_signature,w
  3171  0414  00A1               	movwf	spi_transaction@c
  3172  0415  01A2               	clrf	spi_transaction@d
  3173  0416  3030               	movlw	48
  3174  0417  318F  27D3  3183   	fcall	_spi_transaction
  3175  041A  0020               	movlb	0	; select bank0
  3176  041B  00A4               	movwf	??_read_signature+1
  3177  041C  0824               	movf	??_read_signature+1,w
  3178  041D  00A7               	movwf	read_signature@low
  3179                           
  3180                           ;progger.c: 448:   uart_sendChar(low);
  3181  041E  0827               	movf	read_signature@low,w
  3182  041F  318F  2788  3183   	fcall	_uart_sendChar
  3183                           
  3184                           ;progger.c: 449:   uart_sendChar(0x10);
  3185  0422  3010               	movlw	16
  3186  0423  318F  2788  3183   	fcall	_uart_sendChar
  3187  0426                     l297:
  3188  0426  0008               	return
  3189  0427                     __end_of_read_signature:
  3190                           
  3191                           	psect	text11
  3192  0319                     __ptext11:	
  3193 ;; *************** function _read_page *****************
  3194 ;; Defined at:
  3195 ;;		line 416 in file "progger.c"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;		None
  3198 ;; Auto vars:     Size  Location     Type
  3199 ;;  length          2   21[BANK0 ] int 
  3200 ;;  memtype         1   20[BANK0 ] unsigned char 
  3201 ;;  result          1   19[BANK0 ] unsigned char 
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  1    wreg      void 
  3204 ;; Registers used:
  3205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3212 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3213 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3214 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3215 ;;Total ram usage:        7 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; Hardware stack levels required when called:    5
  3218 ;; This function calls:
  3219 ;;		_eeprom_read_page
  3220 ;;		_flash_read_page
  3221 ;;		_getch
  3222 ;;		_uart_sendChar
  3223 ;; This function is called by:
  3224 ;;		_avrisp
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           
  3229                           ;psect for function _read_page
  3230  0319                     _read_page:
  3231  0319                     l2361:	
  3232                           ;incstack = 0
  3233                           ; Regs used in _read_page: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3234                           
  3235                           
  3236                           ;progger.c: 418:   char result = (char)0x11;
  3237  0319  3011               	movlw	17
  3238  031A  0020               	movlb	0	; select bank0
  3239  031B  00B0               	movwf	??_read_page
  3240  031C  0830               	movf	??_read_page,w
  3241  031D  00B3               	movwf	read_page@result
  3242  031E                     l2363:
  3243                           
  3244                           ;progger.c: 419:   int length = 256 * getch();
  3245  031E  3187  27E6  3183   	fcall	_getch
  3246  0321  0020               	movlb	0	; select bank0
  3247  0322  00B0               	movwf	??_read_page
  3248  0323  01B1               	clrf	??_read_page+1
  3249  0324  0830               	movf	??_read_page,w
  3250  0325  00B1               	movwf	??_read_page+1
  3251  0326  01B0               	clrf	??_read_page
  3252  0327  0830               	movf	??_read_page,w
  3253  0328  00B5               	movwf	read_page@length
  3254  0329  0831               	movf	??_read_page+1,w
  3255  032A  00B6               	movwf	read_page@length+1
  3256  032B                     l2365:
  3257                           
  3258                           ;progger.c: 420:   length += getch();
  3259  032B  3187  27E6  3183   	fcall	_getch
  3260  032E  0020               	movlb	0	; select bank0
  3261  032F  00B0               	movwf	??_read_page
  3262  0330  01B1               	clrf	??_read_page+1
  3263  0331  0830               	movf	??_read_page,w
  3264  0332  07B5               	addwf	read_page@length,f
  3265  0333  0831               	movf	??_read_page+1,w
  3266  0334  3DB6               	addwfc	read_page@length+1,f
  3267  0335                     l2367:
  3268                           
  3269                           ;progger.c: 421:   char memtype = getch();
  3270  0335  3187  27E6  3183   	fcall	_getch
  3271  0338  0020               	movlb	0	; select bank0
  3272  0339  00B0               	movwf	??_read_page
  3273  033A  0830               	movf	??_read_page,w
  3274  033B  00B4               	movwf	read_page@memtype
  3275  033C                     l2369:
  3276                           
  3277                           ;progger.c: 422:   if (0x20 != getch())
  3278  033C  3187  27E6  3183   	fcall	_getch
  3279  033F  3A20               	xorlw	32
  3280  0340  1903               	skipnz
  3281  0341  2B43               	goto	u1321
  3282  0342  2B44               	goto	u1320
  3283  0343                     u1321:
  3284  0343  2B4E               	goto	l2377
  3285  0344                     u1320:
  3286  0344                     l2371:
  3287                           
  3288                           ;progger.c: 423:   {;progger.c: 424:     errors++;
  3289  0344  3001               	movlw	1
  3290  0345  0020               	movlb	0	; select bank0
  3291  0346  07D7               	addwf	_errors,f
  3292  0347  3000               	movlw	0
  3293  0348  3DD8               	addwfc	_errors+1,f
  3294  0349                     l2373:
  3295                           
  3296                           ;progger.c: 425:     uart_sendChar(0x15);
  3297  0349  3015               	movlw	21
  3298  034A  318F  2788  3183   	fcall	_uart_sendChar
  3299  034D  2B79               	goto	l291
  3300  034E                     l2377:
  3301                           
  3302                           ;progger.c: 428:   uart_sendChar(0x14);
  3303  034E  3014               	movlw	20
  3304  034F  318F  2788  3183   	fcall	_uart_sendChar
  3305  0352                     l2379:
  3306                           
  3307                           ;progger.c: 429:   if (memtype == 'F') result = flash_read_page(length);
  3308  0352  3046               	movlw	70
  3309  0353  0020               	movlb	0	; select bank0
  3310  0354  0634               	xorwf	read_page@memtype,w
  3311  0355  1D03               	btfss	3,2
  3312  0356  2B58               	goto	u1331
  3313  0357  2B59               	goto	u1330
  3314  0358                     u1331:
  3315  0358  2B64               	goto	l2383
  3316  0359                     u1330:
  3317  0359                     l2381:
  3318  0359  0836               	movf	read_page@length+1,w
  3319  035A  00A9               	movwf	flash_read_page@length+1
  3320  035B  0835               	movf	read_page@length,w
  3321  035C  00A8               	movwf	flash_read_page@length
  3322  035D  3185  2544  3183   	fcall	_flash_read_page
  3323  0360  0020               	movlb	0	; select bank0
  3324  0361  00B0               	movwf	??_read_page
  3325  0362  0830               	movf	??_read_page,w
  3326  0363  00B3               	movwf	read_page@result
  3327  0364                     l2383:
  3328                           
  3329                           ;progger.c: 430:   if (memtype == 'E') result = eeprom_read_page(length);
  3330  0364  3045               	movlw	69
  3331  0365  0634               	xorwf	read_page@memtype,w
  3332  0366  1D03               	btfss	3,2
  3333  0367  2B69               	goto	u1341
  3334  0368  2B6A               	goto	u1340
  3335  0369                     u1341:
  3336  0369  2B75               	goto	l293
  3337  036A                     u1340:
  3338  036A                     l2385:
  3339  036A  0836               	movf	read_page@length+1,w
  3340  036B  00A4               	movwf	eeprom_read_page@length+1
  3341  036C  0835               	movf	read_page@length,w
  3342  036D  00A3               	movwf	eeprom_read_page@length
  3343  036E  3185  25C0  3183   	fcall	_eeprom_read_page
  3344  0371  0020               	movlb	0	; select bank0
  3345  0372  00B0               	movwf	??_read_page
  3346  0373  0830               	movf	??_read_page,w
  3347  0374  00B3               	movwf	read_page@result
  3348  0375                     l293:
  3349                           
  3350                           ;progger.c: 431:   uart_sendChar(result);
  3351  0375  0833               	movf	read_page@result,w
  3352  0376  318F  2788  3183   	fcall	_uart_sendChar
  3353  0379                     l291:
  3354  0379  0008               	return
  3355  037A                     __end_of_read_page:
  3356                           
  3357                           	psect	text12
  3358  0544                     __ptext12:	
  3359 ;; *************** function _flash_read_page *****************
  3360 ;; Defined at:
  3361 ;;		line 390 in file "progger.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  length          2    8[BANK0 ] int 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  high            1   12[BANK0 ] unsigned char 
  3366 ;;  low             1   11[BANK0 ] unsigned char 
  3367 ;;  x               2   13[BANK0 ] int 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      unsigned char 
  3370 ;; Registers used:
  3371 ;;		wreg, status,2, status,0, pclath, cstack
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3377 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3378 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3380 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3381 ;;Total ram usage:        7 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    4
  3384 ;; This function calls:
  3385 ;;		_flash_read
  3386 ;;		_uart_sendChar
  3387 ;; This function is called by:
  3388 ;;		_read_page
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           
  3393                           ;psect for function _flash_read_page
  3394  0544                     _flash_read_page:
  3395  0544                     l2243:	
  3396                           ;incstack = 0
  3397                           ; Regs used in _flash_read_page: [wreg+status,2+status,0+pclath+cstack]
  3398                           
  3399                           
  3400                           ;progger.c: 390: char flash_read_page(int length);progger.c: 391: {;progger.c: 392:   fo
      +                          r (int x = 0; x < length; x += 2)
  3401  0544  0020               	movlb	0	; select bank0
  3402  0545  01AD               	clrf	flash_read_page@x
  3403  0546  01AE               	clrf	flash_read_page@x+1
  3404  0547  2D73               	goto	l2251
  3405  0548                     l2245:
  3406                           
  3407                           ;progger.c: 393:   {;progger.c: 394:     uint8_t low = flash_read(0, here);
  3408  0548  087B               	movf	_here+1,w
  3409  0549  0020               	movlb	0	; select bank0
  3410  054A  00A4               	movwf	flash_read@addr+1
  3411  054B  087A               	movf	_here,w
  3412  054C  00A3               	movwf	flash_read@addr
  3413  054D  3000               	movlw	0
  3414  054E  318F  27E8  3185   	fcall	_flash_read
  3415  0551  0020               	movlb	0	; select bank0
  3416  0552  00AA               	movwf	??_flash_read_page
  3417  0553  082A               	movf	??_flash_read_page,w
  3418  0554  00AB               	movwf	flash_read_page@low
  3419                           
  3420                           ;progger.c: 395:     uart_sendChar(low);
  3421  0555  082B               	movf	flash_read_page@low,w
  3422  0556  318F  2788  3185   	fcall	_uart_sendChar
  3423                           
  3424                           ;progger.c: 396:     uint8_t high = flash_read(1, here);
  3425  0559  087B               	movf	_here+1,w
  3426  055A  0020               	movlb	0	; select bank0
  3427  055B  00A4               	movwf	flash_read@addr+1
  3428  055C  087A               	movf	_here,w
  3429  055D  00A3               	movwf	flash_read@addr
  3430  055E  3001               	movlw	1
  3431  055F  318F  27E8  3185   	fcall	_flash_read
  3432  0562  0020               	movlb	0	; select bank0
  3433  0563  00AA               	movwf	??_flash_read_page
  3434  0564  082A               	movf	??_flash_read_page,w
  3435  0565  00AC               	movwf	flash_read_page@high
  3436                           
  3437                           ;progger.c: 397:     uart_sendChar(high);
  3438  0566  082C               	movf	flash_read_page@high,w
  3439  0567  318F  2788  3185   	fcall	_uart_sendChar
  3440  056A                     l2247:
  3441                           
  3442                           ;progger.c: 398:     here++;
  3443  056A  3001               	movlw	1
  3444  056B  07FA               	addwf	_here,f
  3445  056C  3000               	movlw	0
  3446  056D  3DFB               	addwfc	_here+1,f
  3447  056E                     l2249:
  3448                           
  3449                           ;progger.c: 399:   }
  3450  056E  3002               	movlw	2
  3451  056F  0020               	movlb	0	; select bank0
  3452  0570  07AD               	addwf	flash_read_page@x,f
  3453  0571  3000               	movlw	0
  3454  0572  3DAE               	addwfc	flash_read_page@x+1,f
  3455  0573                     l2251:
  3456  0573  082E               	movf	flash_read_page@x+1,w
  3457  0574  3A80               	xorlw	128
  3458  0575  00AA               	movwf	??_flash_read_page
  3459  0576  0829               	movf	flash_read_page@length+1,w
  3460  0577  3A80               	xorlw	128
  3461  0578  022A               	subwf	??_flash_read_page,w
  3462  0579  1D03               	skipz
  3463  057A  2D7D               	goto	u1255
  3464  057B  0828               	movf	flash_read_page@length,w
  3465  057C  022D               	subwf	flash_read_page@x,w
  3466  057D                     u1255:
  3467  057D  1C03               	skipc
  3468  057E  2D80               	goto	u1251
  3469  057F  2D81               	goto	u1250
  3470  0580                     u1251:
  3471  0580  2D48               	goto	l2245
  3472  0581                     u1250:
  3473  0581                     l2253:
  3474                           
  3475                           ;progger.c: 400:   return 0x10;
  3476  0581  3010               	movlw	16
  3477  0582                     l281:
  3478  0582  0008               	return
  3479  0583                     __end_of_flash_read_page:
  3480                           
  3481                           	psect	text13
  3482  0FE8                     __ptext13:	
  3483 ;; *************** function _flash_read *****************
  3484 ;; Defined at:
  3485 ;;		line 382 in file "progger.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  hilo            1    wreg     unsigned char 
  3488 ;;  addr            2    3[BANK0 ] unsigned int 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  hilo            1    9[COMMON] unsigned char 
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      unsigned char 
  3493 ;; Registers used:
  3494 ;;		wreg, status,2, status,0, pclath, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3500 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3501 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3502 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3503 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3504 ;;Total ram usage:        6 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    3
  3507 ;; This function calls:
  3508 ;;		_spi_transaction
  3509 ;; This function is called by:
  3510 ;;		_flash_read_page
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           
  3515                           ;psect for function _flash_read
  3516  0FE8                     _flash_read:
  3517                           
  3518                           ;incstack = 0
  3519                           ; Regs used in _flash_read: [wreg+status,2+status,0+pclath+cstack]
  3520                           ;flash_read@hilo stored from wreg
  3521  0FE8  00F9               	movwf	flash_read@hilo
  3522  0FE9                     l2201:
  3523                           
  3524                           ;progger.c: 382: uint8_t flash_read(uint8_t hilo, unsigned int addr);progger.c: 383: {;p
      +                          rogger.c: 384:   return spi_transaction(0x20 + hilo * 8,
  3525  0FE9  0020               	movlb	0	; select bank0
  3526  0FEA  0824               	movf	flash_read@addr+1,w
  3527  0FEB  00A5               	movwf	??_flash_read
  3528  0FEC  0825               	movf	??_flash_read,w
  3529  0FED  00A0               	movwf	spi_transaction@b
  3530  0FEE  0823               	movf	flash_read@addr,w
  3531  0FEF  00A6               	movwf	??_flash_read+1
  3532  0FF0  0826               	movf	??_flash_read+1,w
  3533  0FF1  00A1               	movwf	spi_transaction@c
  3534  0FF2  01A2               	clrf	spi_transaction@d
  3535  0FF3  0879               	movf	flash_read@hilo,w
  3536  0FF4  00A7               	movwf	??_flash_read+2
  3537  0FF5  3002               	movlw	2
  3538  0FF6                     u1205:
  3539  0FF6  35A7               	lslf	??_flash_read+2,f
  3540  0FF7  3EFF               	addlw	-1
  3541  0FF8  1D03               	skipz
  3542  0FF9  2FF6               	goto	u1205
  3543  0FFA  3527               	lslf	??_flash_read+2,w
  3544  0FFB  3E20               	addlw	32
  3545  0FFC  318F  27D3  318F   	fcall	_spi_transaction
  3546  0FFF                     l275:
  3547  0FFF  0008               	return
  3548  1000                     __end_of_flash_read:
  3549                           
  3550                           	psect	text14
  3551  05C0                     __ptext14:	
  3552 ;; *************** function _eeprom_read_page *****************
  3553 ;; Defined at:
  3554 ;;		line 403 in file "progger.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  length          2    3[BANK0 ] int 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  addr            2   12[BANK0 ] int 
  3559 ;;  ee              1   11[BANK0 ] unsigned char 
  3560 ;;  x               2   14[BANK0 ] int 
  3561 ;;  start           2    9[BANK0 ] int 
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  1    wreg      unsigned char 
  3564 ;; Registers used:
  3565 ;;		wreg, status,2, status,0, pclath, cstack
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3571 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3572 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3573 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3574 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3575 ;;Total ram usage:       13 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    3
  3578 ;; This function calls:
  3579 ;;		_spi_transaction
  3580 ;;		_uart_sendChar
  3581 ;; This function is called by:
  3582 ;;		_read_page
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           
  3587                           ;psect for function _eeprom_read_page
  3588  05C0                     _eeprom_read_page:
  3589  05C0                     l2257:	
  3590                           ;incstack = 0
  3591                           ; Regs used in _eeprom_read_page: [wreg+status,2+status,0+pclath+cstack]
  3592                           
  3593                           
  3594                           ;progger.c: 403: char eeprom_read_page(int length);progger.c: 404: {;progger.c: 406:   i
      +                          nt start = here * 2;
  3595  05C0  357A               	lslf	_here,w
  3596  05C1  0020               	movlb	0	; select bank0
  3597  05C2  00A9               	movwf	eeprom_read_page@start
  3598  05C3  0D7B               	rlf	_here+1,w
  3599  05C4  00AA               	movwf	eeprom_read_page@start+1
  3600  05C5                     l2259:
  3601                           
  3602                           ;progger.c: 407:   for (int x = 0; x < length; x++)
  3603  05C5  01AE               	clrf	eeprom_read_page@x
  3604  05C6  01AF               	clrf	eeprom_read_page@x+1
  3605  05C7  2DEC               	goto	l2269
  3606  05C8                     l2261:
  3607                           
  3608                           ;progger.c: 408:   {;progger.c: 409:     int addr = start + x;
  3609  05C8  0020               	movlb	0	; select bank0
  3610  05C9  082E               	movf	eeprom_read_page@x,w
  3611  05CA  0729               	addwf	eeprom_read_page@start,w
  3612  05CB  00AC               	movwf	eeprom_read_page@addr
  3613  05CC  082F               	movf	eeprom_read_page@x+1,w
  3614  05CD  3D2A               	addwfc	eeprom_read_page@start+1,w
  3615  05CE  00AD               	movwf	eeprom_read_page@addr+1
  3616  05CF                     l2263:
  3617                           
  3618                           ;progger.c: 410:     uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF,
      +                           0xFF);
  3619  05CF  082D               	movf	eeprom_read_page@addr+1,w
  3620  05D0  00A5               	movwf	??_eeprom_read_page
  3621  05D1  0825               	movf	??_eeprom_read_page,w
  3622  05D2  00A0               	movwf	spi_transaction@b
  3623  05D3  082C               	movf	eeprom_read_page@addr,w
  3624  05D4  00A6               	movwf	??_eeprom_read_page+1
  3625  05D5  0826               	movf	??_eeprom_read_page+1,w
  3626  05D6  00A1               	movwf	spi_transaction@c
  3627  05D7  30FF               	movlw	255
  3628  05D8  00A7               	movwf	??_eeprom_read_page+2
  3629  05D9  0827               	movf	??_eeprom_read_page+2,w
  3630  05DA  00A2               	movwf	spi_transaction@d
  3631  05DB  30A0               	movlw	160
  3632  05DC  318F  27D3  3185   	fcall	_spi_transaction
  3633  05DF  0020               	movlb	0	; select bank0
  3634  05E0  00A8               	movwf	??_eeprom_read_page+3
  3635  05E1  0828               	movf	??_eeprom_read_page+3,w
  3636  05E2  00AB               	movwf	eeprom_read_page@ee
  3637  05E3                     l2265:
  3638                           
  3639                           ;progger.c: 411:     uart_sendChar(ee);
  3640  05E3  082B               	movf	eeprom_read_page@ee,w
  3641  05E4  318F  2788  3185   	fcall	_uart_sendChar
  3642  05E7                     l2267:
  3643                           
  3644                           ;progger.c: 412:   }
  3645  05E7  3001               	movlw	1
  3646  05E8  0020               	movlb	0	; select bank0
  3647  05E9  07AE               	addwf	eeprom_read_page@x,f
  3648  05EA  3000               	movlw	0
  3649  05EB  3DAF               	addwfc	eeprom_read_page@x+1,f
  3650  05EC                     l2269:
  3651  05EC  082F               	movf	eeprom_read_page@x+1,w
  3652  05ED  3A80               	xorlw	128
  3653  05EE  00A5               	movwf	??_eeprom_read_page
  3654  05EF  0824               	movf	eeprom_read_page@length+1,w
  3655  05F0  3A80               	xorlw	128
  3656  05F1  0225               	subwf	??_eeprom_read_page,w
  3657  05F2  1D03               	skipz
  3658  05F3  2DF6               	goto	u1265
  3659  05F4  0823               	movf	eeprom_read_page@length,w
  3660  05F5  022E               	subwf	eeprom_read_page@x,w
  3661  05F6                     u1265:
  3662  05F6  1C03               	skipc
  3663  05F7  2DF9               	goto	u1261
  3664  05F8  2DFA               	goto	u1260
  3665  05F9                     u1261:
  3666  05F9  2DC8               	goto	l2261
  3667  05FA                     u1260:
  3668  05FA                     l2271:
  3669                           
  3670                           ;progger.c: 413:   return 0x10;
  3671  05FA  3010               	movlw	16
  3672  05FB                     l287:
  3673  05FB  0008               	return
  3674  05FC                     __end_of_eeprom_read_page:
  3675                           
  3676                           	psect	text15
  3677  037A                     __ptext15:	
  3678 ;; *************** function _program_page *****************
  3679 ;; Defined at:
  3680 ;;		line 351 in file "progger.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;		None
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;  length          2   29[BANK0 ] unsigned int 
  3685 ;;  memtype         1   28[BANK0 ] unsigned char 
  3686 ;;  result          1   27[BANK0 ] unsigned char 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3699 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3700 ;;Total ram usage:        7 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:    6
  3703 ;; This function calls:
  3704 ;;		_getch
  3705 ;;		_uart_sendChar
  3706 ;;		_write_eeprom
  3707 ;;		_write_flash
  3708 ;; This function is called by:
  3709 ;;		_avrisp
  3710 ;; This function uses a non-reentrant model
  3711 ;;
  3712                           
  3713                           
  3714                           ;psect for function _program_page
  3715  037A                     _program_page:
  3716  037A                     l2331:	
  3717                           ;incstack = 0
  3718                           ; Regs used in _program_page: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3719                           
  3720  037A                     l2333:
  3721                           
  3722                           ;progger.c: 354:   unsigned int length = 256 * getch();
  3723  037A  3187  27E6  3183   	fcall	_getch
  3724  037D  0020               	movlb	0	; select bank0
  3725  037E  00B8               	movwf	??_program_page
  3726  037F  01B9               	clrf	??_program_page+1
  3727  0380  0838               	movf	??_program_page,w
  3728  0381  00B9               	movwf	??_program_page+1
  3729  0382  01B8               	clrf	??_program_page
  3730  0383  0838               	movf	??_program_page,w
  3731  0384  00BD               	movwf	program_page@length
  3732  0385  0839               	movf	??_program_page+1,w
  3733  0386  00BE               	movwf	program_page@length+1
  3734  0387                     l2335:
  3735                           
  3736                           ;progger.c: 355:   length += getch();
  3737  0387  3187  27E6  3183   	fcall	_getch
  3738  038A  0020               	movlb	0	; select bank0
  3739  038B  00B8               	movwf	??_program_page
  3740  038C  01B9               	clrf	??_program_page+1
  3741  038D  0838               	movf	??_program_page,w
  3742  038E  07BD               	addwf	program_page@length,f
  3743  038F  0839               	movf	??_program_page+1,w
  3744  0390  3DBE               	addwfc	program_page@length+1,f
  3745  0391                     l2337:
  3746                           
  3747                           ;progger.c: 356:   char memtype = getch();
  3748  0391  3187  27E6  3183   	fcall	_getch
  3749  0394  0020               	movlb	0	; select bank0
  3750  0395  00B8               	movwf	??_program_page
  3751  0396  0838               	movf	??_program_page,w
  3752  0397  00BC               	movwf	program_page@memtype
  3753  0398                     l2339:
  3754                           
  3755                           ;progger.c: 358:   if (memtype == 'F')
  3756  0398  3046               	movlw	70
  3757  0399  063C               	xorwf	program_page@memtype,w
  3758  039A  1D03               	btfss	3,2
  3759  039B  2B9D               	goto	u1291
  3760  039C  2B9E               	goto	u1290
  3761  039D                     u1291:
  3762  039D  2BA6               	goto	l2345
  3763  039E                     u1290:
  3764  039E                     l2341:
  3765                           
  3766                           ;progger.c: 359:   {;progger.c: 360:     write_flash(length);
  3767  039E  083E               	movf	program_page@length+1,w
  3768  039F  00B4               	movwf	write_flash@length+1
  3769  03A0  083D               	movf	program_page@length,w
  3770  03A1  00B3               	movwf	write_flash@length
  3771  03A2  3187  272A  3183   	fcall	_write_flash
  3772  03A5  2BD7               	goto	l269
  3773  03A6                     l2345:
  3774                           
  3775                           ;progger.c: 363:   if (memtype == 'E')
  3776  03A6  3045               	movlw	69
  3777  03A7  063C               	xorwf	program_page@memtype,w
  3778  03A8  1D03               	btfss	3,2
  3779  03A9  2BAB               	goto	u1301
  3780  03AA  2BAC               	goto	u1300
  3781  03AB                     u1301:
  3782  03AB  2BD3               	goto	l2357
  3783  03AC                     u1300:
  3784  03AC                     l2347:
  3785                           
  3786                           ;progger.c: 364:   {;progger.c: 365:     result = (char)write_eeprom(length);
  3787  03AC  083E               	movf	program_page@length+1,w
  3788  03AD  00B3               	movwf	write_eeprom@length+1
  3789  03AE  083D               	movf	program_page@length,w
  3790  03AF  00B2               	movwf	write_eeprom@length
  3791  03B0  3184  24C1  3183   	fcall	_write_eeprom
  3792  03B3  0020               	movlb	0	; select bank0
  3793  03B4  00B8               	movwf	??_program_page
  3794  03B5  0838               	movf	??_program_page,w
  3795  03B6  00BB               	movwf	program_page@result
  3796                           
  3797                           ;progger.c: 366:     if (0x20 == getch())
  3798  03B7  3187  27E6  3183   	fcall	_getch
  3799  03BA  3A20               	xorlw	32
  3800  03BB  1D03               	skipz
  3801  03BC  2BBE               	goto	u1311
  3802  03BD  2BBF               	goto	u1310
  3803  03BE                     u1311:
  3804  03BE  2BC9               	goto	l2351
  3805  03BF                     u1310:
  3806  03BF                     l2349:
  3807                           
  3808                           ;progger.c: 367:     {;progger.c: 368:      uart_sendChar(0x14);
  3809  03BF  3014               	movlw	20
  3810  03C0  318F  2788  3183   	fcall	_uart_sendChar
  3811                           
  3812                           ;progger.c: 369:      uart_sendChar(result);
  3813  03C3  0020               	movlb	0	; select bank0
  3814  03C4  083B               	movf	program_page@result,w
  3815  03C5  318F  2788  3183   	fcall	_uart_sendChar
  3816                           
  3817                           ;progger.c: 370:     }
  3818  03C8  2BD7               	goto	l269
  3819  03C9                     l2351:
  3820                           
  3821                           ;progger.c: 372:     {;progger.c: 373:       errors++;
  3822  03C9  3001               	movlw	1
  3823  03CA  0020               	movlb	0	; select bank0
  3824  03CB  07D7               	addwf	_errors,f
  3825  03CC  3000               	movlw	0
  3826  03CD  3DD8               	addwfc	_errors+1,f
  3827  03CE                     l2353:
  3828                           
  3829                           ;progger.c: 374:       uart_sendChar(0x15);
  3830  03CE  3015               	movlw	21
  3831  03CF  318F  2788  3183   	fcall	_uart_sendChar
  3832  03D2  2BD7               	goto	l269
  3833  03D3                     l2357:
  3834                           
  3835                           ;progger.c: 378:   uart_sendChar(0x11);
  3836  03D3  3011               	movlw	17
  3837  03D4  318F  2788  3183   	fcall	_uart_sendChar
  3838  03D7                     l269:
  3839  03D7  0008               	return
  3840  03D8                     __end_of_program_page:
  3841                           
  3842                           	psect	text16
  3843  072A                     __ptext16:	
  3844 ;; *************** function _write_flash *****************
  3845 ;; Defined at:
  3846 ;;		line 280 in file "progger.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  length          2   19[BANK0 ] int 
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;		None
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3860 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3863 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3864 ;;Total ram usage:        2 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; Hardware stack levels required when called:    5
  3867 ;; This function calls:
  3868 ;;		_fill
  3869 ;;		_getch
  3870 ;;		_uart_sendChar
  3871 ;;		_write_flash_pages
  3872 ;; This function is called by:
  3873 ;;		_program_page
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           
  3878                           ;psect for function _write_flash
  3879  072A                     _write_flash:
  3880  072A                     l2213:	
  3881                           ;incstack = 0
  3882                           ; Regs used in _write_flash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3883                           
  3884                           
  3885                           ;progger.c: 280: void write_flash(int length);progger.c: 281: {;progger.c: 282:   fill(l
      +                          ength);
  3886  072A  0020               	movlb	0	; select bank0
  3887  072B  0834               	movf	write_flash@length+1,w
  3888  072C  00F5               	movwf	fill@n+1
  3889  072D  0833               	movf	write_flash@length,w
  3890  072E  00F4               	movwf	fill@n
  3891  072F  3186  26FE  3187   	fcall	_fill
  3892                           
  3893                           ;progger.c: 283:   if (0x20 == getch())
  3894  0732  3187  27E6  3187   	fcall	_getch
  3895  0735  3A20               	xorlw	32
  3896  0736  1D03               	skipz
  3897  0737  2F39               	goto	u1221
  3898  0738  2F3A               	goto	u1220
  3899  0739                     u1221:
  3900  0739  2F4A               	goto	l2219
  3901  073A                     u1220:
  3902  073A                     l2215:
  3903                           
  3904                           ;progger.c: 284:   {;progger.c: 285:    uart_sendChar(0x14);
  3905  073A  3014               	movlw	20
  3906  073B  318F  2788  3187   	fcall	_uart_sendChar
  3907  073E                     l2217:
  3908                           
  3909                           ;progger.c: 286:    uart_sendChar(write_flash_pages(length));
  3910  073E  0020               	movlb	0	; select bank0
  3911  073F  0834               	movf	write_flash@length+1,w
  3912  0740  00AB               	movwf	write_flash_pages@length+1
  3913  0741  0833               	movf	write_flash@length,w
  3914  0742  00AA               	movwf	write_flash_pages@length
  3915  0743  3182  2238  3187   	fcall	_write_flash_pages
  3916  0746  318F  2788  3187   	fcall	_uart_sendChar
  3917                           
  3918                           ;progger.c: 287:   }
  3919  0749  2F53               	goto	l245
  3920  074A                     l2219:
  3921                           
  3922                           ;progger.c: 289:   {;progger.c: 290:    errors++;
  3923  074A  3001               	movlw	1
  3924  074B  0020               	movlb	0	; select bank0
  3925  074C  07D7               	addwf	_errors,f
  3926  074D  3000               	movlw	0
  3927  074E  3DD8               	addwfc	_errors+1,f
  3928  074F                     l2221:
  3929                           
  3930                           ;progger.c: 291:    uart_sendChar(0x15);
  3931  074F  3015               	movlw	21
  3932  0750  318F  2788  3187   	fcall	_uart_sendChar
  3933  0753                     l245:
  3934  0753  0008               	return
  3935  0754                     __end_of_write_flash:
  3936                           
  3937                           	psect	text17
  3938  0238                     __ptext17:	
  3939 ;; *************** function _write_flash_pages *****************
  3940 ;; Defined at:
  3941 ;;		line 295 in file "progger.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  length          2   10[BANK0 ] int 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  x               2   17[BANK0 ] int 
  3946 ;;  page            2   15[BANK0 ] unsigned int 
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      unsigned char 
  3949 ;; Registers used:
  3950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3956 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3959 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3960 ;;Total ram usage:        9 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    4
  3963 ;; This function calls:
  3964 ;;		_commit
  3965 ;;		_current_page
  3966 ;;		_flash
  3967 ;; This function is called by:
  3968 ;;		_write_flash
  3969 ;; This function uses a non-reentrant model
  3970 ;;
  3971                           
  3972                           
  3973                           ;psect for function _write_flash_pages
  3974  0238                     _write_flash_pages:
  3975  0238                     l2155:	
  3976                           ;incstack = 0
  3977                           ; Regs used in _write_flash_pages: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3978                           
  3979                           
  3980                           ;progger.c: 295: uint8_t write_flash_pages(int length);progger.c: 296: {;progger.c: 297:
      +                             int x = 0;
  3981  0238  0020               	movlb	0	; select bank0
  3982  0239  01B1               	clrf	write_flash_pages@x
  3983  023A  01B2               	clrf	write_flash_pages@x+1
  3984  023B                     l2157:
  3985                           
  3986                           ;progger.c: 298:   unsigned int page = current_page();
  3987  023B  3185  2583  3182   	fcall	_current_page
  3988  023E  0873               	movf	?_current_page+1,w
  3989  023F  0020               	movlb	0	; select bank0
  3990  0240  00B0               	movwf	write_flash_pages@page+1
  3991  0241  0872               	movf	?_current_page,w
  3992  0242  00AF               	movwf	write_flash_pages@page
  3993                           
  3994                           ;progger.c: 299:   while (x < length)
  3995  0243  2A9B               	goto	l2173
  3996  0244                     l2159:
  3997                           
  3998                           ;progger.c: 300:   {;progger.c: 301:     if (page != current_page())
  3999  0244  3185  2583  3182   	fcall	_current_page
  4000  0247  0020               	movlb	0	; select bank0
  4001  0248  0830               	movf	write_flash_pages@page+1,w
  4002  0249  0673               	xorwf	?_current_page+1,w
  4003  024A  1D03               	skipz
  4004  024B  2A4E               	goto	u1175
  4005  024C  082F               	movf	write_flash_pages@page,w
  4006  024D  0672               	xorwf	?_current_page,w
  4007  024E                     u1175:
  4008  024E  1903               	skipnz
  4009  024F  2A51               	goto	u1171
  4010  0250  2A52               	goto	u1170
  4011  0251                     u1171:
  4012  0251  2A61               	goto	l2163
  4013  0252                     u1170:
  4014  0252                     l2161:
  4015                           
  4016                           ;progger.c: 302:     {;progger.c: 303:       commit(page);
  4017  0252  0830               	movf	write_flash_pages@page+1,w
  4018  0253  00A4               	movwf	commit@addr+1
  4019  0254  082F               	movf	write_flash_pages@page,w
  4020  0255  00A3               	movwf	commit@addr
  4021  0256  3185  25FC  3182   	fcall	_commit
  4022                           
  4023                           ;progger.c: 304:       page = current_page();
  4024  0259  3185  2583  3182   	fcall	_current_page
  4025  025C  0873               	movf	?_current_page+1,w
  4026  025D  0020               	movlb	0	; select bank0
  4027  025E  00B0               	movwf	write_flash_pages@page+1
  4028  025F  0872               	movf	?_current_page,w
  4029  0260  00AF               	movwf	write_flash_pages@page
  4030  0261                     l2163:
  4031                           
  4032                           ;progger.c: 306:     flash(0, here, buff[x++]);
  4033  0261  087B               	movf	_here+1,w
  4034  0262  00A4               	movwf	flash@addr+1
  4035  0263  087A               	movf	_here,w
  4036  0264  00A3               	movwf	flash@addr
  4037  0265  30F0               	movlw	240
  4038  0266  00AC               	movwf	??_write_flash_pages
  4039  0267  3021               	movlw	33
  4040  0268  00AD               	movwf	??_write_flash_pages+1
  4041  0269  0831               	movf	write_flash_pages@x,w
  4042  026A  072C               	addwf	??_write_flash_pages,w
  4043  026B  0086               	movwf	6
  4044  026C  0832               	movf	write_flash_pages@x+1,w
  4045  026D  3D2D               	addwfc	??_write_flash_pages+1,w
  4046  026E  0087               	movwf	7
  4047  026F  0801               	movf	1,w
  4048  0270  00AE               	movwf	??_write_flash_pages+2
  4049  0271  082E               	movf	??_write_flash_pages+2,w
  4050  0272  00A5               	movwf	flash@data
  4051  0273  3000               	movlw	0
  4052  0274  3187  27B0  3182   	fcall	_flash
  4053  0277                     l2165:
  4054  0277  3001               	movlw	1
  4055  0278  0020               	movlb	0	; select bank0
  4056  0279  07B1               	addwf	write_flash_pages@x,f
  4057  027A  3000               	movlw	0
  4058  027B  3DB2               	addwfc	write_flash_pages@x+1,f
  4059  027C                     l2167:
  4060                           
  4061                           ;progger.c: 307:     flash(1, here, buff[x++]);
  4062  027C  087B               	movf	_here+1,w
  4063  027D  00A4               	movwf	flash@addr+1
  4064  027E  087A               	movf	_here,w
  4065  027F  00A3               	movwf	flash@addr
  4066  0280  30F0               	movlw	240
  4067  0281  00AC               	movwf	??_write_flash_pages
  4068  0282  3021               	movlw	33
  4069  0283  00AD               	movwf	??_write_flash_pages+1
  4070  0284  0831               	movf	write_flash_pages@x,w
  4071  0285  072C               	addwf	??_write_flash_pages,w
  4072  0286  0086               	movwf	6
  4073  0287  0832               	movf	write_flash_pages@x+1,w
  4074  0288  3D2D               	addwfc	??_write_flash_pages+1,w
  4075  0289  0087               	movwf	7
  4076  028A  0801               	movf	1,w
  4077  028B  00AE               	movwf	??_write_flash_pages+2
  4078  028C  082E               	movf	??_write_flash_pages+2,w
  4079  028D  00A5               	movwf	flash@data
  4080  028E  3001               	movlw	1
  4081  028F  3187  27B0  3182   	fcall	_flash
  4082  0292                     l2169:
  4083  0292  3001               	movlw	1
  4084  0293  0020               	movlb	0	; select bank0
  4085  0294  07B1               	addwf	write_flash_pages@x,f
  4086  0295  3000               	movlw	0
  4087  0296  3DB2               	addwfc	write_flash_pages@x+1,f
  4088  0297                     l2171:
  4089                           
  4090                           ;progger.c: 308:     here++;
  4091  0297  3001               	movlw	1
  4092  0298  07FA               	addwf	_here,f
  4093  0299  3000               	movlw	0
  4094  029A  3DFB               	addwfc	_here+1,f
  4095  029B                     l2173:
  4096                           
  4097                           ;progger.c: 299:   while (x < length)
  4098  029B  0832               	movf	write_flash_pages@x+1,w
  4099  029C  3A80               	xorlw	128
  4100  029D  00AC               	movwf	??_write_flash_pages
  4101  029E  082B               	movf	write_flash_pages@length+1,w
  4102  029F  3A80               	xorlw	128
  4103  02A0  022C               	subwf	??_write_flash_pages,w
  4104  02A1  1D03               	skipz
  4105  02A2  2AA5               	goto	u1185
  4106  02A3  082A               	movf	write_flash_pages@length,w
  4107  02A4  0231               	subwf	write_flash_pages@x,w
  4108  02A5                     u1185:
  4109  02A5  1C03               	skipc
  4110  02A6  2AA8               	goto	u1181
  4111  02A7  2AA9               	goto	u1180
  4112  02A8                     u1181:
  4113  02A8  2A44               	goto	l2159
  4114  02A9                     u1180:
  4115  02A9                     l2175:
  4116                           
  4117                           ;progger.c: 311:   commit(page);
  4118  02A9  0020               	movlb	0	; select bank0
  4119  02AA  0830               	movf	write_flash_pages@page+1,w
  4120  02AB  00A4               	movwf	commit@addr+1
  4121  02AC  082F               	movf	write_flash_pages@page,w
  4122  02AD  00A3               	movwf	commit@addr
  4123  02AE  3185  25FC  3182   	fcall	_commit
  4124  02B1                     l2177:
  4125                           
  4126                           ;progger.c: 313:   return 0x10;
  4127  02B1  3010               	movlw	16
  4128  02B2                     l252:
  4129  02B2  0008               	return
  4130  02B3                     __end_of_write_flash_pages:
  4131                           
  4132                           	psect	text18
  4133  07B0                     __ptext18:	
  4134 ;; *************** function _flash *****************
  4135 ;; Defined at:
  4136 ;;		line 237 in file "progger.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;  hilo            1    wreg     unsigned char 
  4139 ;;  addr            2    3[BANK0 ] unsigned int 
  4140 ;;  data            1    5[BANK0 ] unsigned char 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  hilo            1    9[COMMON] unsigned char 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  1    wreg      void 
  4145 ;; Registers used:
  4146 ;;		wreg, status,2, status,0, pclath, cstack
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4152 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;Total ram usage:        8 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    3
  4159 ;; This function calls:
  4160 ;;		_spi_transaction
  4161 ;; This function is called by:
  4162 ;;		_write_flash_pages
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           
  4167                           ;psect for function _flash
  4168  07B0                     _flash:
  4169                           
  4170                           ;incstack = 0
  4171                           ; Regs used in _flash: [wreg+status,2+status,0+pclath+cstack]
  4172                           ;flash@hilo stored from wreg
  4173  07B0  00F9               	movwf	flash@hilo
  4174  07B1                     l2137:
  4175                           
  4176                           ;progger.c: 237: void flash(uint8_t hilo, unsigned int addr, uint8_t data);progger.c: 23
      +                          8: {;progger.c: 239:   spi_transaction(0x40 + 8 * hilo,
  4177  07B1  0020               	movlb	0	; select bank0
  4178  07B2  0824               	movf	flash@addr+1,w
  4179  07B3  00A6               	movwf	??_flash
  4180  07B4  0826               	movf	??_flash,w
  4181  07B5  00A0               	movwf	spi_transaction@b
  4182  07B6  0823               	movf	flash@addr,w
  4183  07B7  00A7               	movwf	??_flash+1
  4184  07B8  0827               	movf	??_flash+1,w
  4185  07B9  00A1               	movwf	spi_transaction@c
  4186  07BA  0825               	movf	flash@data,w
  4187  07BB  00A8               	movwf	??_flash+2
  4188  07BC  0828               	movf	??_flash+2,w
  4189  07BD  00A2               	movwf	spi_transaction@d
  4190  07BE  0879               	movf	flash@hilo,w
  4191  07BF  00A9               	movwf	??_flash+3
  4192  07C0  3002               	movlw	2
  4193  07C1                     u1145:
  4194  07C1  35A9               	lslf	??_flash+3,f
  4195  07C2  3EFF               	addlw	-1
  4196  07C3  1D03               	skipz
  4197  07C4  2FC1               	goto	u1145
  4198  07C5  3529               	lslf	??_flash+3,w
  4199  07C6  3E40               	addlw	64
  4200  07C7  318F  27D3  3187   	fcall	_spi_transaction
  4201  07CA                     l226:
  4202  07CA  0008               	return
  4203  07CB                     __end_of_flash:
  4204                           
  4205                           	psect	text19
  4206  0583                     __ptext19:	
  4207 ;; *************** function _current_page *****************
  4208 ;; Defined at:
  4209 ;;		line 259 in file "progger.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  2    2[COMMON] unsigned int 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;Total ram usage:        2 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    1
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_write_flash_pages
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _current_page
  4239  0583                     _current_page:
  4240  0583                     l1585:	
  4241                           ;incstack = 0
  4242                           ; Regs used in _current_page: [wreg+status,2+status,0]
  4243                           
  4244                           
  4245                           ;progger.c: 261:   if (param.pagesize == 32)
  4246  0583  3020               	movlw	32
  4247  0584  0020               	movlb	0	; select bank0
  4248  0585  064F               	xorwf	_param+11,w
  4249  0586  0450               	iorwf	_param+12,w
  4250  0587  1D03               	btfss	3,2
  4251  0588  2D8A               	goto	u631
  4252  0589  2D8B               	goto	u630
  4253  058A                     u631:
  4254  058A  2D92               	goto	l1591
  4255  058B                     u630:
  4256  058B                     l1587:
  4257                           
  4258                           ;progger.c: 262:   {;progger.c: 263:     return here & 0xFFFFFFF0;
  4259  058B  30F0               	movlw	240
  4260  058C  057A               	andwf	_here,w
  4261  058D  00F2               	movwf	?_current_page
  4262  058E  30FF               	movlw	255
  4263  058F  057B               	andwf	_here+1,w
  4264  0590  00F3               	movwf	?_current_page+1
  4265  0591  2DBF               	goto	l237
  4266  0592                     l1591:
  4267                           
  4268                           ;progger.c: 265:   if (param.pagesize == 64)
  4269  0592  3040               	movlw	64
  4270  0593  064F               	xorwf	_param+11,w
  4271  0594  0450               	iorwf	_param+12,w
  4272  0595  1D03               	btfss	3,2
  4273  0596  2D98               	goto	u641
  4274  0597  2D99               	goto	u640
  4275  0598                     u641:
  4276  0598  2DA0               	goto	l1597
  4277  0599                     u640:
  4278  0599                     l1593:
  4279                           
  4280                           ;progger.c: 266:   {;progger.c: 267:     return here & 0xFFFFFFE0;
  4281  0599  30E0               	movlw	224
  4282  059A  057A               	andwf	_here,w
  4283  059B  00F2               	movwf	?_current_page
  4284  059C  30FF               	movlw	255
  4285  059D  057B               	andwf	_here+1,w
  4286  059E  00F3               	movwf	?_current_page+1
  4287  059F  2DBF               	goto	l237
  4288  05A0                     l1597:
  4289                           
  4290                           ;progger.c: 269:   if (param.pagesize == 128)
  4291  05A0  3080               	movlw	128
  4292  05A1  064F               	xorwf	_param+11,w
  4293  05A2  0450               	iorwf	_param+12,w
  4294  05A3  1D03               	btfss	3,2
  4295  05A4  2DA6               	goto	u651
  4296  05A5  2DA7               	goto	u650
  4297  05A6                     u651:
  4298  05A6  2DAE               	goto	l1603
  4299  05A7                     u650:
  4300  05A7                     l1599:
  4301                           
  4302                           ;progger.c: 270:   {;progger.c: 271:     return here & 0xFFFFFFC0;
  4303  05A7  30C0               	movlw	192
  4304  05A8  057A               	andwf	_here,w
  4305  05A9  00F2               	movwf	?_current_page
  4306  05AA  30FF               	movlw	255
  4307  05AB  057B               	andwf	_here+1,w
  4308  05AC  00F3               	movwf	?_current_page+1
  4309  05AD  2DBF               	goto	l237
  4310  05AE                     l1603:
  4311                           
  4312                           ;progger.c: 273:   if (param.pagesize == 256)
  4313  05AE  0350               	decf	_param+12,w
  4314  05AF  044F               	iorwf	_param+11,w
  4315  05B0  1D03               	btfss	3,2
  4316  05B1  2DB3               	goto	u661
  4317  05B2  2DB4               	goto	u660
  4318  05B3                     u661:
  4319  05B3  2DBB               	goto	l1609
  4320  05B4                     u660:
  4321  05B4                     l1605:
  4322                           
  4323                           ;progger.c: 274:   {;progger.c: 275:     return here & 0xFFFFFF80;
  4324  05B4  3080               	movlw	128
  4325  05B5  057A               	andwf	_here,w
  4326  05B6  00F2               	movwf	?_current_page
  4327  05B7  30FF               	movlw	255
  4328  05B8  057B               	andwf	_here+1,w
  4329  05B9  00F3               	movwf	?_current_page+1
  4330  05BA  2DBF               	goto	l237
  4331  05BB                     l1609:
  4332                           
  4333                           ;progger.c: 277:   return here;
  4334  05BB  087B               	movf	_here+1,w
  4335  05BC  00F3               	movwf	?_current_page+1
  4336  05BD  087A               	movf	_here,w
  4337  05BE  00F2               	movwf	?_current_page
  4338  05BF                     l237:
  4339  05BF  0008               	return
  4340  05C0                     __end_of_current_page:
  4341                           
  4342                           	psect	text20
  4343  05FC                     __ptext20:	
  4344 ;; *************** function _commit *****************
  4345 ;; Defined at:
  4346 ;;		line 245 in file "progger.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;  addr            2    3[BANK0 ] unsigned int 
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;  i               2    7[BANK0 ] int 
  4351 ;; Return value:  Size  Location     Type
  4352 ;;                  1    wreg      void 
  4353 ;; Registers used:
  4354 ;;		wreg, status,2, status,0, pclath, cstack
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4360 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4361 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4362 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4363 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4364 ;;Total ram usage:        6 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; Hardware stack levels required when called:    3
  4367 ;; This function calls:
  4368 ;;		_prog_lamp
  4369 ;;		_spi_transaction
  4370 ;; This function is called by:
  4371 ;;		_write_flash_pages
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           
  4376                           ;psect for function _commit
  4377  05FC                     _commit:
  4378  05FC                     l2139:	
  4379                           ;incstack = 0
  4380                           ; Regs used in _commit: [wreg+status,2+status,0+pclath+cstack]
  4381                           
  4382                           
  4383                           ;progger.c: 248:   {;progger.c: 249:     prog_lamp(0);
  4384  05FC  3000               	movlw	0
  4385  05FD  00F2               	movwf	prog_lamp@state
  4386  05FE  00F3               	movwf	prog_lamp@state+1
  4387  05FF  318F  27B5  3185   	fcall	_prog_lamp
  4388  0602                     l229:	
  4389                           ;progger.c: 250:   }
  4390                           
  4391                           
  4392                           ;progger.c: 252:   if (1)
  4393  0602  0020               	movlb	0	; select bank0
  4394  0603  0824               	movf	commit@addr+1,w
  4395  0604  00A5               	movwf	??_commit
  4396  0605  0825               	movf	??_commit,w
  4397  0606  00A0               	movwf	spi_transaction@b
  4398  0607  0823               	movf	commit@addr,w
  4399  0608  00A6               	movwf	??_commit+1
  4400  0609  0826               	movf	??_commit+1,w
  4401  060A  00A1               	movwf	spi_transaction@c
  4402  060B  01A2               	clrf	spi_transaction@d
  4403  060C  304C               	movlw	76
  4404  060D  318F  27D3  3185   	fcall	_spi_transaction
  4405  0610                     l2141:
  4406                           
  4407                           ;progger.c: 253:   {;progger.c: 254:     for(int i=0; i<30; i++) _delay((unsigned long)(
      +                          (1)*(20000000/4000.0)));
  4408  0610  0020               	movlb	0	; select bank0
  4409  0611  01A7               	clrf	commit@i
  4410  0612  01A8               	clrf	commit@i+1
  4411  0613                     l2147:
  4412  0613  3007               	movlw	7
  4413  0614  0020               	movlb	0	; select bank0
  4414  0615  00A5               	movwf	??_commit
  4415  0616  307D               	movlw	125
  4416  0617                     u1517:
  4417  0617  0B89               	decfsz	9,f
  4418  0618  2E17               	goto	u1517
  4419  0619  0BA5               	decfsz	??_commit,f
  4420  061A  2E17               	goto	u1517
  4421  061B  3001               	movlw	1
  4422  061C  0020               	movlb	0	; select bank0
  4423  061D  07A7               	addwf	commit@i,f
  4424  061E  3000               	movlw	0
  4425  061F  3DA8               	addwfc	commit@i+1,f
  4426  0620  0828               	movf	commit@i+1,w
  4427  0621  3A80               	xorlw	128
  4428  0622  00A5               	movwf	??_commit
  4429  0623  3080               	movlw	128
  4430  0624  0225               	subwf	??_commit,w
  4431  0625  1D03               	skipz
  4432  0626  2E29               	goto	u1155
  4433  0627  301E               	movlw	30
  4434  0628  0227               	subwf	commit@i,w
  4435  0629                     u1155:
  4436  0629  1C03               	skipc
  4437  062A  2E2C               	goto	u1151
  4438  062B  2E2D               	goto	u1150
  4439  062C                     u1151:
  4440  062C  2E13               	goto	l2147
  4441  062D                     u1150:
  4442  062D                     l2149:
  4443                           
  4444                           ;progger.c: 255:     prog_lamp(1);
  4445  062D  3001               	movlw	1
  4446  062E  00F2               	movwf	prog_lamp@state
  4447  062F  3000               	movlw	0
  4448  0630  00F3               	movwf	prog_lamp@state+1
  4449  0631  318F  27B5  3185   	fcall	_prog_lamp
  4450  0634                     l233:
  4451  0634  0008               	return
  4452  0635                     __end_of_commit:
  4453                           
  4454                           	psect	text21
  4455  04C1                     __ptext21:	
  4456 ;; *************** function _write_eeprom *****************
  4457 ;; Defined at:
  4458 ;;		line 316 in file "progger.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;  length          2   18[BANK0 ] unsigned int 
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;  remaining       2   22[BANK0 ] unsigned int 
  4463 ;;  start           2   20[BANK0 ] unsigned int 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  1    wreg      unsigned char 
  4466 ;; Registers used:
  4467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4473 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;Total ram usage:        6 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    5
  4480 ;; This function calls:
  4481 ;;		_write_eeprom_chunk
  4482 ;; This function is called by:
  4483 ;;		_program_page
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           
  4488                           ;psect for function _write_eeprom
  4489  04C1                     _write_eeprom:
  4490  04C1                     l2223:	
  4491                           ;incstack = 0
  4492                           ; Regs used in _write_eeprom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4493                           
  4494                           
  4495                           ;progger.c: 316: uint8_t write_eeprom(unsigned int length);progger.c: 317: {;progger.c: 
      +                          319:   unsigned int start = here * 2;
  4496  04C1  357A               	lslf	_here,w
  4497  04C2  0020               	movlb	0	; select bank0
  4498  04C3  00B4               	movwf	write_eeprom@start
  4499  04C4  0D7B               	rlf	_here+1,w
  4500  04C5  00B5               	movwf	write_eeprom@start+1
  4501                           
  4502                           ;progger.c: 320:   unsigned int remaining = length;
  4503  04C6  0833               	movf	write_eeprom@length+1,w
  4504  04C7  00B7               	movwf	write_eeprom@remaining+1
  4505  04C8  0832               	movf	write_eeprom@length,w
  4506  04C9  00B6               	movwf	write_eeprom@remaining
  4507                           
  4508                           ;progger.c: 321:   if (length > param.eepromsize)
  4509  04CA  0833               	movf	write_eeprom@length+1,w
  4510  04CB  0252               	subwf	_param+14,w
  4511  04CC  1D03               	skipz
  4512  04CD  2CD0               	goto	u1235
  4513  04CE  0832               	movf	write_eeprom@length,w
  4514  04CF  0251               	subwf	_param+13,w
  4515  04D0                     u1235:
  4516  04D0  1803               	skipnc
  4517  04D1  2CD3               	goto	u1231
  4518  04D2  2CD4               	goto	u1230
  4519  04D3                     u1231:
  4520  04D3  2CEE               	goto	l2235
  4521  04D4                     u1230:
  4522  04D4                     l2225:
  4523                           
  4524                           ;progger.c: 322:   {;progger.c: 323:     errors++;
  4525  04D4  3001               	movlw	1
  4526  04D5  07D7               	addwf	_errors,f
  4527  04D6  3000               	movlw	0
  4528  04D7  3DD8               	addwfc	_errors+1,f
  4529                           
  4530                           ;progger.c: 324:     return 0x11;
  4531  04D8  3011               	movlw	17
  4532  04D9  2D03               	goto	l256
  4533  04DA                     l2229:
  4534                           
  4535                           ;progger.c: 327:   {;progger.c: 328:     write_eeprom_chunk(start, (32));
  4536  04DA  0835               	movf	write_eeprom@start+1,w
  4537  04DB  00A6               	movwf	write_eeprom_chunk@start+1
  4538  04DC  0834               	movf	write_eeprom@start,w
  4539  04DD  00A5               	movwf	write_eeprom_chunk@start
  4540  04DE  3020               	movlw	32
  4541  04DF  00A7               	movwf	write_eeprom_chunk@length
  4542  04E0  3000               	movlw	0
  4543  04E1  00A8               	movwf	write_eeprom_chunk@length+1
  4544  04E2  3184  2475  3184   	fcall	_write_eeprom_chunk
  4545  04E5                     l2231:
  4546                           
  4547                           ;progger.c: 329:     start += (32);
  4548  04E5  3020               	movlw	32
  4549  04E6  0020               	movlb	0	; select bank0
  4550  04E7  07B4               	addwf	write_eeprom@start,f
  4551  04E8  3000               	movlw	0
  4552  04E9  3DB5               	addwfc	write_eeprom@start+1,f
  4553  04EA                     l2233:
  4554                           
  4555                           ;progger.c: 330:     remaining -= (32);
  4556  04EA  3020               	movlw	32
  4557  04EB  02B6               	subwf	write_eeprom@remaining,f
  4558  04EC  3000               	movlw	0
  4559  04ED  3BB7               	subwfb	write_eeprom@remaining+1,f
  4560  04EE                     l2235:
  4561                           
  4562                           ;progger.c: 326:   while (remaining > (32))
  4563  04EE  3000               	movlw	0
  4564  04EF  0237               	subwf	write_eeprom@remaining+1,w
  4565  04F0  3021               	movlw	33
  4566  04F1  1903               	skipnz
  4567  04F2  0236               	subwf	write_eeprom@remaining,w
  4568  04F3  1803               	skipnc
  4569  04F4  2CF6               	goto	u1241
  4570  04F5  2CF7               	goto	u1240
  4571  04F6                     u1241:
  4572  04F6  2CDA               	goto	l2229
  4573  04F7                     u1240:
  4574  04F7                     l2237:
  4575                           
  4576                           ;progger.c: 332:   write_eeprom_chunk(start, remaining);
  4577  04F7  0835               	movf	write_eeprom@start+1,w
  4578  04F8  00A6               	movwf	write_eeprom_chunk@start+1
  4579  04F9  0834               	movf	write_eeprom@start,w
  4580  04FA  00A5               	movwf	write_eeprom_chunk@start
  4581  04FB  0837               	movf	write_eeprom@remaining+1,w
  4582  04FC  00A8               	movwf	write_eeprom_chunk@length+1
  4583  04FD  0836               	movf	write_eeprom@remaining,w
  4584  04FE  00A7               	movwf	write_eeprom_chunk@length
  4585  04FF  3184  2475  3184   	fcall	_write_eeprom_chunk
  4586  0502                     l2239:
  4587                           
  4588                           ;progger.c: 333:   return 0x10;
  4589  0502  3010               	movlw	16
  4590  0503                     l256:
  4591  0503  0008               	return
  4592  0504                     __end_of_write_eeprom:
  4593                           
  4594                           	psect	text22
  4595  0475                     __ptext22:	
  4596 ;; *************** function _write_eeprom_chunk *****************
  4597 ;; Defined at:
  4598 ;;		line 336 in file "progger.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;  start           2    5[BANK0 ] unsigned int 
  4601 ;;  length          2    7[BANK0 ] unsigned int 
  4602 ;; Auto vars:     Size  Location     Type
  4603 ;;  addr            2   14[BANK0 ] unsigned int 
  4604 ;;  x               2   16[BANK0 ] unsigned int 
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  1    wreg      unsigned char 
  4607 ;; Registers used:
  4608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4609 ;; Tracked objects:
  4610 ;;		On entry : 0/0
  4611 ;;		On exit  : 0/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4614 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4615 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4616 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4617 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;Total ram usage:       13 bytes
  4619 ;; Hardware stack levels used:    1
  4620 ;; Hardware stack levels required when called:    4
  4621 ;; This function calls:
  4622 ;;		_fill
  4623 ;;		_prog_lamp
  4624 ;;		_spi_transaction
  4625 ;; This function is called by:
  4626 ;;		_write_eeprom
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           
  4631                           ;psect for function _write_eeprom_chunk
  4632  0475                     _write_eeprom_chunk:
  4633  0475                     l2181:	
  4634                           ;incstack = 0
  4635                           ; Regs used in _write_eeprom_chunk: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4636                           
  4637                           
  4638                           ;progger.c: 336: uint8_t write_eeprom_chunk(unsigned int start, unsigned int length);pro
      +                          gger.c: 337: {;progger.c: 339:   fill(length);
  4639  0475  0020               	movlb	0	; select bank0
  4640  0476  0828               	movf	write_eeprom_chunk@length+1,w
  4641  0477  00F5               	movwf	fill@n+1
  4642  0478  0827               	movf	write_eeprom_chunk@length,w
  4643  0479  00F4               	movwf	fill@n
  4644  047A  3186  26FE  3184   	fcall	_fill
  4645  047D                     l2183:
  4646                           
  4647                           ;progger.c: 340:   prog_lamp(0);
  4648  047D  3000               	movlw	0
  4649  047E  00F2               	movwf	prog_lamp@state
  4650  047F  00F3               	movwf	prog_lamp@state+1
  4651  0480  318F  27B5  3184   	fcall	_prog_lamp
  4652  0483                     l2185:
  4653                           
  4654                           ;progger.c: 341:   for (unsigned int x = 0; x < length; x++)
  4655  0483  0020               	movlb	0	; select bank0
  4656  0484  01B0               	clrf	write_eeprom_chunk@x
  4657  0485  01B1               	clrf	write_eeprom_chunk@x+1
  4658  0486  2CAF               	goto	l2195
  4659  0487                     l2187:
  4660                           
  4661                           ;progger.c: 342:   {;progger.c: 343:     unsigned int addr = start + x;
  4662  0487  0830               	movf	write_eeprom_chunk@x,w
  4663  0488  0725               	addwf	write_eeprom_chunk@start,w
  4664  0489  00AE               	movwf	write_eeprom_chunk@addr
  4665  048A  0831               	movf	write_eeprom_chunk@x+1,w
  4666  048B  3D26               	addwfc	write_eeprom_chunk@start+1,w
  4667  048C  00AF               	movwf	write_eeprom_chunk@addr+1
  4668  048D                     l2189:
  4669                           
  4670                           ;progger.c: 344:     spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, buff[x]);
  4671  048D  082F               	movf	write_eeprom_chunk@addr+1,w
  4672  048E  00A9               	movwf	??_write_eeprom_chunk
  4673  048F  0829               	movf	??_write_eeprom_chunk,w
  4674  0490  00A0               	movwf	spi_transaction@b
  4675  0491  082E               	movf	write_eeprom_chunk@addr,w
  4676  0492  00AA               	movwf	??_write_eeprom_chunk+1
  4677  0493  082A               	movf	??_write_eeprom_chunk+1,w
  4678  0494  00A1               	movwf	spi_transaction@c
  4679  0495  30F0               	movlw	240
  4680  0496  00AB               	movwf	??_write_eeprom_chunk+2
  4681  0497  3021               	movlw	33
  4682  0498  00AC               	movwf	??_write_eeprom_chunk+3
  4683  0499  0830               	movf	write_eeprom_chunk@x,w
  4684  049A  072B               	addwf	??_write_eeprom_chunk+2,w
  4685  049B  0086               	movwf	6
  4686  049C  0831               	movf	write_eeprom_chunk@x+1,w
  4687  049D  3D2C               	addwfc	??_write_eeprom_chunk+3,w
  4688  049E  0087               	movwf	7
  4689  049F  0801               	movf	1,w
  4690  04A0  00AD               	movwf	??_write_eeprom_chunk+4
  4691  04A1  082D               	movf	??_write_eeprom_chunk+4,w
  4692  04A2  00A2               	movwf	spi_transaction@d
  4693  04A3  30C0               	movlw	192
  4694  04A4  318F  27D3  3184   	fcall	_spi_transaction
  4695  04A7                     l2191:
  4696                           
  4697                           ;progger.c: 345:     _delay((unsigned long)((45)*(20000000/4000000.0)));
  4698  04A7  304B               	movlw	75
  4699  04A8                     u1527:
  4700  04A8  0B89               	decfsz	9,f
  4701  04A9  2CA8               	goto	u1527
  4702  04AA                     l2193:
  4703                           
  4704                           ;progger.c: 346:   }
  4705  04AA  3001               	movlw	1
  4706  04AB  0020               	movlb	0	; select bank0
  4707  04AC  07B0               	addwf	write_eeprom_chunk@x,f
  4708  04AD  3000               	movlw	0
  4709  04AE  3DB1               	addwfc	write_eeprom_chunk@x+1,f
  4710  04AF                     l2195:
  4711  04AF  0828               	movf	write_eeprom_chunk@length+1,w
  4712  04B0  0231               	subwf	write_eeprom_chunk@x+1,w
  4713  04B1  1D03               	skipz
  4714  04B2  2CB5               	goto	u1195
  4715  04B3  0827               	movf	write_eeprom_chunk@length,w
  4716  04B4  0230               	subwf	write_eeprom_chunk@x,w
  4717  04B5                     u1195:
  4718  04B5  1C03               	skipc
  4719  04B6  2CB8               	goto	u1191
  4720  04B7  2CB9               	goto	u1190
  4721  04B8                     u1191:
  4722  04B8  2C87               	goto	l2187
  4723  04B9                     u1190:
  4724  04B9                     l2197:
  4725                           
  4726                           ;progger.c: 347:   prog_lamp(1);
  4727  04B9  3001               	movlw	1
  4728  04BA  00F2               	movwf	prog_lamp@state
  4729  04BB  3000               	movlw	0
  4730  04BC  00F3               	movwf	prog_lamp@state+1
  4731  04BD  318F  27B5  3184   	fcall	_prog_lamp
  4732  04C0                     l265:
  4733  04C0  0008               	return
  4734  04C1                     __end_of_write_eeprom_chunk:
  4735                           
  4736                           	psect	text23
  4737  0FD3                     __ptext23:	
  4738 ;; *************** function _spi_transaction *****************
  4739 ;; Defined at:
  4740 ;;		line 107 in file "progger.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  a               1    wreg     unsigned char 
  4743 ;;  b               1    0[BANK0 ] unsigned char 
  4744 ;;  c               1    1[BANK0 ] unsigned char 
  4745 ;;  d               1    2[BANK0 ] unsigned char 
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;  a               1    8[COMMON] unsigned char 
  4748 ;; Return value:  Size  Location     Type
  4749 ;;                  1    wreg      unsigned char 
  4750 ;; Registers used:
  4751 ;;		wreg, status,2, status,0, pclath, cstack
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4757 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4758 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4760 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4761 ;;Total ram usage:        4 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    2
  4764 ;; This function calls:
  4765 ;;		_SPI_transfer
  4766 ;; This function is called by:
  4767 ;;		_start_pmode
  4768 ;;		_universal
  4769 ;;		_flash
  4770 ;;		_commit
  4771 ;;		_write_eeprom_chunk
  4772 ;;		_flash_read
  4773 ;;		_eeprom_read_page
  4774 ;;		_read_signature
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           
  4779                           ;psect for function _spi_transaction
  4780  0FD3                     _spi_transaction:
  4781                           
  4782                           ;incstack = 0
  4783                           ; Regs used in _spi_transaction: [wreg+status,2+status,0+pclath+cstack]
  4784                           ;spi_transaction@a stored from wreg
  4785  0FD3  00F8               	movwf	spi_transaction@a
  4786  0FD4                     l2125:
  4787                           
  4788                           ;progger.c: 107: uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d);pro
      +                          gger.c: 108: {;progger.c: 109:   SPI_transfer(a);
  4789  0FD4  0878               	movf	spi_transaction@a,w
  4790  0FD5  3184  2427  318F   	fcall	_SPI_transfer
  4791                           
  4792                           ;progger.c: 110:   SPI_transfer(b);
  4793  0FD8  0020               	movlb	0	; select bank0
  4794  0FD9  0820               	movf	spi_transaction@b,w
  4795  0FDA  3184  2427  318F   	fcall	_SPI_transfer
  4796                           
  4797                           ;progger.c: 111:   SPI_transfer(c);
  4798  0FDD  0020               	movlb	0	; select bank0
  4799  0FDE  0821               	movf	spi_transaction@c,w
  4800  0FDF  3184  2427  318F   	fcall	_SPI_transfer
  4801                           
  4802                           ;progger.c: 112:   return SPI_transfer(d);
  4803  0FE2  0020               	movlb	0	; select bank0
  4804  0FE3  0822               	movf	spi_transaction@d,w
  4805  0FE4  3184  2427  318F   	fcall	_SPI_transfer
  4806  0FE7                     l191:
  4807  0FE7  0008               	return
  4808  0FE8                     __end_of_spi_transaction:
  4809                           
  4810                           	psect	text24
  4811  0427                     __ptext24:	
  4812 ;; *************** function _SPI_transfer *****************
  4813 ;; Defined at:
  4814 ;;		line 15 in file "spi.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  dat             1    wreg     unsigned char 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  dat             1    4[COMMON] unsigned char 
  4819 ;;  i               2    6[COMMON] unsigned int 
  4820 ;;  rslt            1    5[COMMON] unsigned char 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  1    wreg      unsigned char 
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;Total ram usage:        6 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    1
  4837 ;; This function calls:
  4838 ;;		Nothing
  4839 ;; This function is called by:
  4840 ;;		_spi_transaction
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           
  4845                           ;psect for function _SPI_transfer
  4846  0427                     _SPI_transfer:
  4847                           
  4848                           ;incstack = 0
  4849                           ; Regs used in _SPI_transfer: [wreg+status,2+status,0]
  4850                           ;SPI_transfer@dat stored from wreg
  4851  0427  00F4               	movwf	SPI_transfer@dat
  4852  0428                     l2081:
  4853                           
  4854                           ;spi.c: 15: uint8_t SPI_transfer(uint8_t dat);spi.c: 16: {;spi.c: 23:     uint8_t rslt =
      +                           0;
  4855  0428  01F5               	clrf	SPI_transfer@rslt
  4856                           
  4857                           ;spi.c: 25:     for (unsigned int i = 0; i < 8; i++)
  4858  0429  01F6               	clrf	SPI_transfer@i
  4859  042A  01F7               	clrf	SPI_transfer@i+1
  4860  042B                     l2087:
  4861                           
  4862                           ;spi.c: 26:     {;spi.c: 27:         if(dat & (1 << (7 - i))) PORTC |= (1 << 5);
  4863  042B  3001               	movlw	1
  4864  042C  00F2               	movwf	??_SPI_transfer
  4865  042D  0876               	movf	SPI_transfer@i,w
  4866  042E  3C07               	sublw	7
  4867  042F  0A89               	incf	9,f
  4868  0430  2C32               	goto	u1074
  4869  0431                     u1075:
  4870  0431  35F2               	lslf	??_SPI_transfer,f
  4871  0432                     u1074:
  4872  0432  0B89               	decfsz	9,f
  4873  0433  2C31               	goto	u1075
  4874  0434  0872               	movf	??_SPI_transfer,w
  4875  0435  0574               	andwf	SPI_transfer@dat,w
  4876  0436  1903               	btfsc	3,2
  4877  0437  2C39               	goto	u1081
  4878  0438  2C3A               	goto	u1080
  4879  0439                     u1081:
  4880  0439  2C3D               	goto	l2091
  4881  043A                     u1080:
  4882  043A                     l2089:
  4883  043A  0020               	movlb	0	; select bank0
  4884  043B  168E               	bsf	14,5	;volatile
  4885  043C  2C42               	goto	l2093
  4886  043D                     l2091:
  4887  043D  30DF               	movlw	223
  4888  043E  00F2               	movwf	??_SPI_transfer
  4889  043F  0872               	movf	??_SPI_transfer,w
  4890  0440  0020               	movlb	0	; select bank0
  4891  0441  058E               	andwf	14,f	;volatile
  4892  0442                     l2093:
  4893                           
  4894                           ;spi.c: 29:         PORTC |= (1 << 3);
  4895  0442  158E               	bsf	14,3	;volatile
  4896  0443                     l2095:
  4897                           
  4898                           ;spi.c: 30:         _delay((unsigned long)((20)*(20000000/4000000.0)));
  4899  0443  3021               	movlw	33
  4900  0444                     u1537:
  4901  0444  0B89               	decfsz	9,f
  4902  0445  2C44               	goto	u1537
  4903  0446  0000               	nop
  4904  0447                     l2097:
  4905                           
  4906                           ;spi.c: 31:         if(PORTC & (1 << 4)) rslt |= (1 << (7 - i));
  4907  0447  0020               	movlb	0	; select bank0
  4908  0448  1E0E               	btfss	14,4	;volatile
  4909  0449  2C4B               	goto	u1091
  4910  044A  2C4C               	goto	u1090
  4911  044B                     u1091:
  4912  044B  2C59               	goto	l67
  4913  044C                     u1090:
  4914  044C                     l2099:
  4915  044C  3001               	movlw	1
  4916  044D  00F2               	movwf	??_SPI_transfer
  4917  044E  0876               	movf	SPI_transfer@i,w
  4918  044F  3C07               	sublw	7
  4919  0450  0A89               	incf	9,f
  4920  0451  2C53               	goto	u1104
  4921  0452                     u1105:
  4922  0452  35F2               	lslf	??_SPI_transfer,f
  4923  0453                     u1104:
  4924  0453  0B89               	decfsz	9,f
  4925  0454  2C52               	goto	u1105
  4926  0455  0872               	movf	??_SPI_transfer,w
  4927  0456  00F3               	movwf	??_SPI_transfer+1
  4928  0457  0873               	movf	??_SPI_transfer+1,w
  4929  0458  04F5               	iorwf	SPI_transfer@rslt,f
  4930  0459                     l67:
  4931                           
  4932                           ;spi.c: 32:         PORTC &= ~(1 << 3);
  4933  0459  30F7               	movlw	247
  4934  045A  00F2               	movwf	??_SPI_transfer
  4935  045B  0872               	movf	??_SPI_transfer,w
  4936  045C  058E               	andwf	14,f	;volatile
  4937  045D                     l2101:
  4938                           
  4939                           ;spi.c: 33:         _delay((unsigned long)((20)*(20000000/4000000.0)));
  4940  045D  3021               	movlw	33
  4941  045E                     u1547:
  4942  045E  0B89               	decfsz	9,f
  4943  045F  2C5E               	goto	u1547
  4944  0460  0000               	nop
  4945  0461                     l2103:
  4946                           
  4947                           ;spi.c: 34:     }
  4948  0461  3001               	movlw	1
  4949  0462  07F6               	addwf	SPI_transfer@i,f
  4950  0463  3000               	movlw	0
  4951  0464  3DF7               	addwfc	SPI_transfer@i+1,f
  4952  0465                     l2105:
  4953  0465  3000               	movlw	0
  4954  0466  0277               	subwf	SPI_transfer@i+1,w
  4955  0467  3008               	movlw	8
  4956  0468  1903               	skipnz
  4957  0469  0276               	subwf	SPI_transfer@i,w
  4958  046A  1C03               	skipc
  4959  046B  2C6D               	goto	u1111
  4960  046C  2C6E               	goto	u1110
  4961  046D                     u1111:
  4962  046D  2C2B               	goto	l2087
  4963  046E                     u1110:
  4964  046E                     l2107:
  4965                           
  4966                           ;spi.c: 35:     PORTC &= ~(1 << 5);
  4967  046E  30DF               	movlw	223
  4968  046F  00F2               	movwf	??_SPI_transfer
  4969  0470  0872               	movf	??_SPI_transfer,w
  4970  0471  0020               	movlb	0	; select bank0
  4971  0472  058E               	andwf	14,f	;volatile
  4972  0473                     l2109:
  4973                           
  4974                           ;spi.c: 36:     return rslt;
  4975  0473  0875               	movf	SPI_transfer@rslt,w
  4976  0474                     l68:
  4977  0474  0008               	return
  4978  0475                     __end_of_SPI_transfer:
  4979                           
  4980                           	psect	text25
  4981  0FB5                     __ptext25:	
  4982 ;; *************** function _prog_lamp *****************
  4983 ;; Defined at:
  4984 ;;		line 98 in file "progger.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;  state           2    2[COMMON] int 
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;		None
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  1    wreg      void 
  4991 ;; Registers used:
  4992 ;;		wreg, status,2, status,0
  4993 ;; Tracked objects:
  4994 ;;		On entry : 0/0
  4995 ;;		On exit  : 0/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4998 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5001 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5002 ;;Total ram usage:        3 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; Hardware stack levels required when called:    1
  5005 ;; This function calls:
  5006 ;;		Nothing
  5007 ;; This function is called by:
  5008 ;;		_commit
  5009 ;;		_write_eeprom_chunk
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           
  5014                           ;psect for function _prog_lamp
  5015  0FB5                     _prog_lamp:
  5016  0FB5                     l1553:	
  5017                           ;incstack = 0
  5018                           ; Regs used in _prog_lamp: [wreg+status,2+status,0]
  5019                           
  5020                           
  5021                           ;progger.c: 101:  {;progger.c: 102:   if(state) PORTA |= (1 << 4);
  5022  0FB5  0872               	movf	prog_lamp@state,w
  5023  0FB6  0473               	iorwf	prog_lamp@state+1,w
  5024  0FB7  1903               	btfsc	3,2
  5025  0FB8  2FBA               	goto	u591
  5026  0FB9  2FBB               	goto	u590
  5027  0FBA                     u591:
  5028  0FBA  2FBE               	goto	l1557
  5029  0FBB                     u590:
  5030  0FBB                     l1555:
  5031  0FBB  0020               	movlb	0	; select bank0
  5032  0FBC  160C               	bsf	12,4	;volatile
  5033  0FBD  2FC3               	goto	l188
  5034  0FBE                     l1557:
  5035  0FBE  30EF               	movlw	239
  5036  0FBF  00F4               	movwf	??_prog_lamp
  5037  0FC0  0874               	movf	??_prog_lamp,w
  5038  0FC1  0020               	movlb	0	; select bank0
  5039  0FC2  058C               	andwf	12,f	;volatile
  5040  0FC3                     l188:
  5041  0FC3  0008               	return
  5042  0FC4                     __end_of_prog_lamp:
  5043                           
  5044                           	psect	text26
  5045  06FE                     __ptext26:	
  5046 ;; *************** function _fill *****************
  5047 ;; Defined at:
  5048 ;;		line 93 in file "progger.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;  n               2    4[COMMON] int 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  x               2    6[COMMON] int 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  1    wreg      void 
  5055 ;; Registers used:
  5056 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5062 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5063 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5064 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5065 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;Total ram usage:        9 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    3
  5069 ;; This function calls:
  5070 ;;		_getch
  5071 ;; This function is called by:
  5072 ;;		_universal
  5073 ;;		_write_flash
  5074 ;;		_write_eeprom_chunk
  5075 ;;		_avrisp
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           
  5080                           ;psect for function _fill
  5081  06FE                     _fill:
  5082  06FE                     l2129:	
  5083                           ;incstack = 0
  5084                           ; Regs used in _fill: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5085                           
  5086                           
  5087                           ;progger.c: 93: void fill(int n);progger.c: 94: {;progger.c: 95:   for (int x = 0; x < n
      +                          ; x++) buff[x] = getch();
  5088  06FE  01F6               	clrf	fill@x
  5089  06FF  01F7               	clrf	fill@x+1
  5090  0700  2F1A               	goto	l2135
  5091  0701                     l2131:
  5092  0701  3187  27E6  3186   	fcall	_getch
  5093  0704  0020               	movlb	0	; select bank0
  5094  0705  00A0               	movwf	??_fill
  5095  0706  30F0               	movlw	240
  5096  0707  00A1               	movwf	??_fill+1
  5097  0708  3021               	movlw	33
  5098  0709  00A2               	movwf	??_fill+2
  5099  070A  0876               	movf	fill@x,w
  5100  070B  0721               	addwf	??_fill+1,w
  5101  070C  00A3               	movwf	??_fill+3
  5102  070D  0877               	movf	fill@x+1,w
  5103  070E  3D22               	addwfc	??_fill+2,w
  5104  070F  00A4               	movwf	??_fill+4
  5105  0710  0823               	movf	??_fill+3,w
  5106  0711  0086               	movwf	6
  5107  0712  0824               	movf	??_fill+4,w
  5108  0713  0087               	movwf	7
  5109  0714  0820               	movf	??_fill,w
  5110  0715  0081               	movwf	1
  5111  0716                     l2133:
  5112  0716  3001               	movlw	1
  5113  0717  07F6               	addwf	fill@x,f
  5114  0718  3000               	movlw	0
  5115  0719  3DF7               	addwfc	fill@x+1,f
  5116  071A                     l2135:
  5117  071A  0877               	movf	fill@x+1,w
  5118  071B  3A80               	xorlw	128
  5119  071C  0020               	movlb	0	; select bank0
  5120  071D  00A0               	movwf	??_fill
  5121  071E  0875               	movf	fill@n+1,w
  5122  071F  3A80               	xorlw	128
  5123  0720  0220               	subwf	??_fill,w
  5124  0721  1D03               	skipz
  5125  0722  2F25               	goto	u1135
  5126  0723  0874               	movf	fill@n,w
  5127  0724  0276               	subwf	fill@x,w
  5128  0725                     u1135:
  5129  0725  1C03               	skipc
  5130  0726  2F28               	goto	u1131
  5131  0727  2F29               	goto	u1130
  5132  0728                     u1131:
  5133  0728  2F01               	goto	l2131
  5134  0729                     u1130:
  5135  0729                     l182:
  5136  0729  0008               	return
  5137  072A                     __end_of_fill:
  5138                           
  5139                           	psect	text27
  5140  069D                     __ptext27:	
  5141 ;; *************** function _get_version *****************
  5142 ;; Defined at:
  5143 ;;		line 144 in file "progger.c"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;  c               1    wreg     unsigned char 
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;  c               1    7[COMMON] unsigned char 
  5148 ;; Return value:  Size  Location     Type
  5149 ;;                  1    wreg      void 
  5150 ;; Registers used:
  5151 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5152 ;; Tracked objects:
  5153 ;;		On entry : 0/0
  5154 ;;		On exit  : 0/0
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5159 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5160 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5161 ;;Total ram usage:        3 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:    4
  5164 ;; This function calls:
  5165 ;;		_breply
  5166 ;; This function is called by:
  5167 ;;		_avrisp
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           
  5172                           ;psect for function _get_version
  5173  069D                     _get_version:
  5174                           
  5175                           ;incstack = 0
  5176                           ; Regs used in _get_version: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5177                           ;get_version@c stored from wreg
  5178  069D  00F7               	movwf	get_version@c
  5179  069E                     l2291:
  5180                           
  5181                           ;progger.c: 144: void get_version(uint8_t c);progger.c: 145: {;progger.c: 146:   switch 
      +                          (c) {
  5182  069E  2EB8               	goto	l2303
  5183  069F                     l2293:
  5184                           
  5185                           ;progger.c: 148:       breply(2);
  5186  069F  3002               	movlw	2
  5187  06A0  3187  2754  3186   	fcall	_breply
  5188                           
  5189                           ;progger.c: 149:       break;
  5190  06A3  2ECE               	goto	l211
  5191  06A4                     l2295:
  5192                           
  5193                           ;progger.c: 151:       breply(1);
  5194  06A4  3001               	movlw	1
  5195  06A5  3187  2754  3186   	fcall	_breply
  5196                           
  5197                           ;progger.c: 152:       break;
  5198  06A8  2ECE               	goto	l211
  5199  06A9                     l2297:
  5200                           
  5201                           ;progger.c: 154:       breply(18);
  5202  06A9  3012               	movlw	18
  5203  06AA  3187  2754  3186   	fcall	_breply
  5204                           
  5205                           ;progger.c: 155:       break;
  5206  06AD  2ECE               	goto	l211
  5207  06AE                     l2299:
  5208                           
  5209                           ;progger.c: 157:       breply('S');
  5210  06AE  3053               	movlw	83
  5211  06AF  3187  2754  3186   	fcall	_breply
  5212                           
  5213                           ;progger.c: 158:       break;
  5214  06B2  2ECE               	goto	l211
  5215  06B3                     l2301:
  5216                           
  5217                           ;progger.c: 160:       breply(0);
  5218  06B3  3000               	movlw	0
  5219  06B4  3187  2754  3186   	fcall	_breply
  5220                           
  5221                           ;progger.c: 161:   }
  5222  06B7  2ECE               	goto	l211
  5223  06B8                     l2303:
  5224  06B8  0877               	movf	get_version@c,w
  5225  06B9  00F5               	movwf	??_get_version
  5226  06BA  01F6               	clrf	??_get_version+1
  5227                           
  5228                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5229                           ; Switch size 1, requested type "simple"
  5230                           ; Number of cases is 1, Range of values is 0 to 0
  5231                           ; switch strategies available:
  5232                           ; Name         Instructions Cycles
  5233                           ; simple_byte            4     3 (average)
  5234                           ; direct_byte            8     6 (fixed)
  5235                           ; jumptable            260     6 (fixed)
  5236                           ;	Chosen strategy is simple_byte
  5237  06BB  0876               	movf	??_get_version+1,w
  5238  06BC  3A00               	xorlw	0	; case 0
  5239  06BD  1903               	skipnz
  5240  06BE  2EC0               	goto	l2527
  5241  06BF  2EB3               	goto	l2301
  5242  06C0                     l2527:
  5243                           
  5244                           ; Switch size 1, requested type "simple"
  5245                           ; Number of cases is 4, Range of values is 128 to 147
  5246                           ; switch strategies available:
  5247                           ; Name         Instructions Cycles
  5248                           ; simple_byte           13     7 (average)
  5249                           ; direct_byte           49     9 (fixed)
  5250                           ; jumptable            263     9 (fixed)
  5251                           ;	Chosen strategy is simple_byte
  5252  06C0  0875               	movf	??_get_version,w
  5253  06C1  3A80               	xorlw	128	; case 128
  5254  06C2  1903               	skipnz
  5255  06C3  2E9F               	goto	l2293
  5256  06C4  3A01               	xorlw	1	; case 129
  5257  06C5  1903               	skipnz
  5258  06C6  2EA4               	goto	l2295
  5259  06C7  3A03               	xorlw	3	; case 130
  5260  06C8  1903               	skipnz
  5261  06C9  2EA9               	goto	l2297
  5262  06CA  3A11               	xorlw	17	; case 147
  5263  06CB  1903               	skipnz
  5264  06CC  2EAE               	goto	l2299
  5265  06CD  2EB3               	goto	l2301
  5266  06CE                     l211:
  5267  06CE  0008               	return
  5268  06CF                     __end_of_get_version:
  5269                           
  5270                           	psect	text28
  5271  0754                     __ptext28:	
  5272 ;; *************** function _breply *****************
  5273 ;; Defined at:
  5274 ;;		line 129 in file "progger.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  b               1    wreg     unsigned char 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  b               1    4[COMMON] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5292 ;;Total ram usage:        1 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    3
  5295 ;; This function calls:
  5296 ;;		_getch
  5297 ;;		_uart_sendChar
  5298 ;; This function is called by:
  5299 ;;		_get_version
  5300 ;;		_universal
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           
  5305                           ;psect for function _breply
  5306  0754                     _breply:
  5307                           
  5308                           ;incstack = 0
  5309                           ; Regs used in _breply: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5310                           ;breply@b stored from wreg
  5311  0754  00F4               	movwf	breply@b
  5312  0755                     l2205:
  5313                           
  5314                           ;progger.c: 129: void breply(uint8_t b);progger.c: 130: {;progger.c: 131:   if (0x20 == 
      +                          getch())
  5315  0755  3187  27E6  3187   	fcall	_getch
  5316  0758  3A20               	xorlw	32
  5317  0759  1D03               	skipz
  5318  075A  2F5C               	goto	u1211
  5319  075B  2F5D               	goto	u1210
  5320  075C                     u1211:
  5321  075C  2F6A               	goto	l2209
  5322  075D                     u1210:
  5323  075D                     l2207:
  5324                           
  5325                           ;progger.c: 132:   {;progger.c: 133:    uart_sendChar(0x14);
  5326  075D  3014               	movlw	20
  5327  075E  318F  2788  3187   	fcall	_uart_sendChar
  5328                           
  5329                           ;progger.c: 134:    uart_sendChar(b);
  5330  0761  0874               	movf	breply@b,w
  5331  0762  318F  2788  3187   	fcall	_uart_sendChar
  5332                           
  5333                           ;progger.c: 135:    uart_sendChar(0x10);
  5334  0765  3010               	movlw	16
  5335  0766  318F  2788  3187   	fcall	_uart_sendChar
  5336                           
  5337                           ;progger.c: 136:   }
  5338  0769  2F73               	goto	l201
  5339  076A                     l2209:
  5340                           
  5341                           ;progger.c: 138:   {;progger.c: 139:    errors++;
  5342  076A  3001               	movlw	1
  5343  076B  0020               	movlb	0	; select bank0
  5344  076C  07D7               	addwf	_errors,f
  5345  076D  3000               	movlw	0
  5346  076E  3DD8               	addwfc	_errors+1,f
  5347  076F                     l2211:
  5348                           
  5349                           ;progger.c: 140:    uart_sendChar(0x15);
  5350  076F  3015               	movlw	21
  5351  0770  318F  2788  3187   	fcall	_uart_sendChar
  5352  0773                     l201:
  5353  0773  0008               	return
  5354  0774                     __end_of_breply:
  5355                           
  5356                           	psect	text29
  5357  0FA8                     __ptext29:	
  5358 ;; *************** function _end_pmode *****************
  5359 ;; Defined at:
  5360 ;;		line 220 in file "progger.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;		None
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;		None
  5365 ;; Return value:  Size  Location     Type
  5366 ;;                  1    wreg      void 
  5367 ;; Registers used:
  5368 ;;		wreg, status,2, status,0, pclath, cstack
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;Total ram usage:        0 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    2
  5381 ;; This function calls:
  5382 ;;		_reset_target
  5383 ;;		_spi_deinit
  5384 ;; This function is called by:
  5385 ;;		_avrisp
  5386 ;; This function uses a non-reentrant model
  5387 ;;
  5388                           
  5389                           
  5390                           ;psect for function _end_pmode
  5391  0FA8                     _end_pmode:
  5392  0FA8                     l1853:	
  5393                           ;incstack = 0
  5394                           ; Regs used in _end_pmode: [wreg+status,2+status,0+pclath+cstack]
  5395                           
  5396                           
  5397                           ;progger.c: 221:  spi_deinit();
  5398  0FA8  318F  277F  318F   	fcall	_spi_deinit
  5399                           
  5400                           ;progger.c: 223:  reset_target(1);
  5401  0FAB  3001               	movlw	1
  5402  0FAC  3187  2774  318F   	fcall	_reset_target
  5403  0FAF                     l1855:
  5404                           
  5405                           ;progger.c: 224:  TRISC |= (1 << 1);
  5406  0FAF  0021               	movlb	1	; select bank1
  5407  0FB0  148E               	bsf	14,1	;volatile
  5408  0FB1                     l1857:
  5409                           
  5410                           ;progger.c: 225:  pmode = 0;
  5411  0FB1  0020               	movlb	0	; select bank0
  5412  0FB2  01D9               	clrf	_pmode
  5413  0FB3  01DA               	clrf	_pmode+1
  5414  0FB4                     l220:
  5415  0FB4  0008               	return
  5416  0FB5                     __end_of_end_pmode:
  5417                           
  5418                           	psect	text30
  5419  0F7F                     __ptext30:	
  5420 ;; *************** function _spi_deinit *****************
  5421 ;; Defined at:
  5422 ;;		line 40 in file "spi.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;		None
  5427 ;; Return value:  Size  Location     Type
  5428 ;;                  1    wreg      void 
  5429 ;; Registers used:
  5430 ;;		wreg
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;Total ram usage:        0 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:    1
  5443 ;; This function calls:
  5444 ;;		Nothing
  5445 ;; This function is called by:
  5446 ;;		_end_pmode
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           
  5451                           ;psect for function _spi_deinit
  5452  0F7F                     _spi_deinit:
  5453  0F7F                     l1669:	
  5454                           ;incstack = 0
  5455                           ; Regs used in _spi_deinit: [wreg]
  5456                           
  5457                           
  5458                           ;spi.c: 42:     SSPCON1 = 0x02;
  5459  0F7F  3002               	movlw	2
  5460  0F80  0024               	movlb	4	; select bank4
  5461  0F81  0095               	movwf	21	;volatile
  5462  0F82                     l71:
  5463  0F82  0008               	return
  5464  0F83                     __end_of_spi_deinit:
  5465                           
  5466                           	psect	text31
  5467  0774                     __ptext31:	
  5468 ;; *************** function _reset_target *****************
  5469 ;; Defined at:
  5470 ;;		line 72 in file "progger.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  reset           1    wreg     unsigned char 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;  reset           1    3[COMMON] unsigned char 
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  1    wreg      void 
  5477 ;; Registers used:
  5478 ;;		wreg, status,2, status,0
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;Total ram usage:        2 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    1
  5491 ;; This function calls:
  5492 ;;		Nothing
  5493 ;; This function is called by:
  5494 ;;		_start_pmode
  5495 ;;		_end_pmode
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           
  5500                           ;psect for function _reset_target
  5501  0774                     _reset_target:
  5502                           
  5503                           ;incstack = 0
  5504                           ; Regs used in _reset_target: [wreg+status,2+status,0]
  5505                           ;reset_target@reset stored from wreg
  5506  0774  00F3               	movwf	reset_target@reset
  5507  0775                     l1671:
  5508                           
  5509                           ;progger.c: 72: void reset_target(uint8_t reset);progger.c: 73: {;progger.c: 74:  if((re
      +                          set && rst_active_high) || (!reset && !rst_active_high)) PORTC |= (1 << 1);
  5510  0775  0873               	movf	reset_target@reset,w
  5511  0776  1903               	btfsc	3,2
  5512  0777  2F79               	goto	u721
  5513  0778  2F7A               	goto	u720
  5514  0779                     u721:
  5515  0779  2F80               	goto	l1675
  5516  077A                     u720:
  5517  077A                     l1673:
  5518  077A  0020               	movlb	0	; select bank0
  5519  077B  085B               	movf	_rst_active_high,w
  5520  077C  1D03               	btfss	3,2
  5521  077D  2F7F               	goto	u731
  5522  077E  2F80               	goto	u730
  5523  077F                     u731:
  5524  077F  2F8B               	goto	l162
  5525  0780                     u730:
  5526  0780                     l1675:
  5527  0780  0873               	movf	reset_target@reset,w
  5528  0781  1D03               	btfss	3,2
  5529  0782  2F84               	goto	u741
  5530  0783  2F85               	goto	u740
  5531  0784                     u741:
  5532  0784  2F8D               	goto	l1679
  5533  0785                     u740:
  5534  0785                     l1677:
  5535  0785  0020               	movlb	0	; select bank0
  5536  0786  085B               	movf	_rst_active_high,w
  5537  0787  1D03               	btfss	3,2
  5538  0788  2F8A               	goto	u751
  5539  0789  2F8B               	goto	u750
  5540  078A                     u751:
  5541  078A  2F8D               	goto	l1679
  5542  078B                     u750:
  5543  078B                     l162:
  5544  078B  148E               	bsf	14,1	;volatile
  5545  078C  2F92               	goto	l166
  5546  078D                     l1679:
  5547  078D  30FD               	movlw	253
  5548  078E  00F2               	movwf	??_reset_target
  5549  078F  0872               	movf	??_reset_target,w
  5550  0790  0020               	movlb	0	; select bank0
  5551  0791  058E               	andwf	14,f	;volatile
  5552  0792                     l166:
  5553  0792  0008               	return
  5554  0793                     __end_of_reset_target:
  5555                           
  5556                           	psect	text32
  5557  07CB                     __ptext32:	
  5558 ;; *************** function _empty_reply *****************
  5559 ;; Defined at:
  5560 ;;		line 115 in file "progger.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;		None
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      void 
  5567 ;; Registers used:
  5568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;Total ram usage:        0 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    3
  5581 ;; This function calls:
  5582 ;;		_getch
  5583 ;;		_uart_sendChar
  5584 ;; This function is called by:
  5585 ;;		_avrisp
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           
  5590                           ;psect for function _empty_reply
  5591  07CB                     _empty_reply:
  5592  07CB                     l2283:	
  5593                           ;incstack = 0
  5594                           ; Regs used in _empty_reply: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5595                           
  5596                           
  5597                           ;progger.c: 117:   if (0x20 == getch())
  5598  07CB  3187  27E6  3187   	fcall	_getch
  5599  07CE  3A20               	xorlw	32
  5600  07CF  1D03               	skipz
  5601  07D0  2FD2               	goto	u1281
  5602  07D1  2FD3               	goto	u1280
  5603  07D2                     u1281:
  5604  07D2  2FDC               	goto	l2287
  5605  07D3                     u1280:
  5606  07D3                     l2285:
  5607                           
  5608                           ;progger.c: 118:   {;progger.c: 119:    uart_sendChar(0x14);
  5609  07D3  3014               	movlw	20
  5610  07D4  318F  2788  3187   	fcall	_uart_sendChar
  5611                           
  5612                           ;progger.c: 120:    uart_sendChar(0x10);
  5613  07D7  3010               	movlw	16
  5614  07D8  318F  2788  3187   	fcall	_uart_sendChar
  5615                           
  5616                           ;progger.c: 121:   }
  5617  07DB  2FE5               	goto	l196
  5618  07DC                     l2287:
  5619                           
  5620                           ;progger.c: 123:   {;progger.c: 124:     errors++;
  5621  07DC  3001               	movlw	1
  5622  07DD  0020               	movlb	0	; select bank0
  5623  07DE  07D7               	addwf	_errors,f
  5624  07DF  3000               	movlw	0
  5625  07E0  3DD8               	addwfc	_errors+1,f
  5626  07E1                     l2289:
  5627                           
  5628                           ;progger.c: 125:     uart_sendChar(0x15);
  5629  07E1  3015               	movlw	21
  5630  07E2  318F  2788  3187   	fcall	_uart_sendChar
  5631  07E5                     l196:
  5632  07E5  0008               	return
  5633  07E6                     __end_of_empty_reply:
  5634                           
  5635                           	psect	text33
  5636  0F88                     __ptext33:	
  5637 ;; *************** function _uart_sendChar *****************
  5638 ;; Defined at:
  5639 ;;		line 15 in file "uart.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;  ch              1    wreg     unsigned char 
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;  ch              1    2[COMMON] unsigned char 
  5644 ;; Return value:  Size  Location     Type
  5645 ;;                  1    wreg      void 
  5646 ;; Registers used:
  5647 ;;		wreg
  5648 ;; Tracked objects:
  5649 ;;		On entry : 0/0
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5654 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5656 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5657 ;;Total ram usage:        1 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    1
  5660 ;; This function calls:
  5661 ;;		Nothing
  5662 ;; This function is called by:
  5663 ;;		_uart_sendString
  5664 ;;		_empty_reply
  5665 ;;		_breply
  5666 ;;		_write_flash
  5667 ;;		_program_page
  5668 ;;		_flash_read_page
  5669 ;;		_eeprom_read_page
  5670 ;;		_read_page
  5671 ;;		_read_signature
  5672 ;;		_avrisp
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           
  5677                           ;psect for function _uart_sendChar
  5678  0F88                     _uart_sendChar:
  5679                           
  5680                           ;incstack = 0
  5681                           ; Regs used in _uart_sendChar: [wreg]
  5682                           ;uart_sendChar@ch stored from wreg
  5683  0F88  00F2               	movwf	uart_sendChar@ch
  5684  0F89                     l2151:
  5685  0F89                     l91:	
  5686                           ;uart.c: 15: void uart_sendChar(uint8_t ch);uart.c: 16: {;uart.c: 17:     while(!TRMT);
  5687                           
  5688  0F89  0023               	movlb	3	; select bank3
  5689  0F8A  1C9E               	btfss	30,1	;volatile
  5690  0F8B  2F8D               	goto	u1161
  5691  0F8C  2F8E               	goto	u1160
  5692  0F8D                     u1161:
  5693  0F8D  2F89               	goto	l91
  5694  0F8E                     u1160:
  5695  0F8E                     l2153:
  5696                           
  5697                           ;uart.c: 18:     TXREG = ch;
  5698  0F8E  0872               	movf	uart_sendChar@ch,w
  5699  0F8F  009A               	movwf	26	;volatile
  5700  0F90                     l94:
  5701  0F90  0008               	return
  5702  0F91                     __end_of_uart_sendChar:
  5703                           
  5704                           	psect	text34
  5705  07E6                     __ptext34:	
  5706 ;; *************** function _getch *****************
  5707 ;; Defined at:
  5708 ;;		line 84 in file "progger.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;		None
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  temp            1    3[COMMON] unsigned char 
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  1    wreg      unsigned char 
  5715 ;; Registers used:
  5716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5717 ;; Tracked objects:
  5718 ;;		On entry : 0/0
  5719 ;;		On exit  : 0/0
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5723 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5726 ;;Total ram usage:        2 bytes
  5727 ;; Hardware stack levels used:    1
  5728 ;; Hardware stack levels required when called:    2
  5729 ;; This function calls:
  5730 ;;		_Serial_available
  5731 ;; This function is called by:
  5732 ;;		_fill
  5733 ;;		_empty_reply
  5734 ;;		_breply
  5735 ;;		_write_flash
  5736 ;;		_program_page
  5737 ;;		_read_page
  5738 ;;		_read_signature
  5739 ;;		_avrisp
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           
  5744                           ;psect for function _getch
  5745  07E6                     _getch:
  5746  07E6                     l2113:	
  5747                           ;incstack = 0
  5748                           ; Regs used in _getch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5749                           
  5750  07E6                     l2115:	
  5751                           ;progger.c: 86:  uint8_t temp;;progger.c: 87:  while(!(Serial_available()));
  5752                           
  5753  07E6  318F  2791  3187   	fcall	_Serial_available
  5754  07E9  3A00               	xorlw	0
  5755  07EA  1903               	skipnz
  5756  07EB  2FED               	goto	u1121
  5757  07EC  2FEE               	goto	u1120
  5758  07ED                     u1121:
  5759  07ED  2FE6               	goto	l2115
  5760  07EE                     u1120:
  5761  07EE                     l2117:
  5762                           
  5763                           ;progger.c: 88:  temp = exchange[rx_rd_index0];
  5764  07EE  0020               	movlb	0	; select bank0
  5765  07EF  085C               	movf	_rx_rd_index0,w	;volatile
  5766  07F0  3EF0               	addlw	240
  5767  07F1  0086               	movwf	6
  5768  07F2  0187               	clrf	7
  5769  07F3  3022               	movlw	34
  5770  07F4  3D87               	addwfc	7,f
  5771  07F5  0801               	movf	1,w
  5772  07F6  00F2               	movwf	??_getch
  5773  07F7  0872               	movf	??_getch,w
  5774  07F8  00F3               	movwf	getch@temp
  5775  07F9                     l2119:
  5776                           
  5777                           ;progger.c: 89:  rx_rd_index0++;
  5778  07F9  3001               	movlw	1
  5779  07FA  00F2               	movwf	??_getch
  5780  07FB  0872               	movf	??_getch,w
  5781  07FC  07DC               	addwf	_rx_rd_index0,f	;volatile
  5782  07FD                     l2121:
  5783                           
  5784                           ;progger.c: 90:  return(temp);
  5785  07FD  0873               	movf	getch@temp,w
  5786  07FE                     l176:
  5787  07FE  0008               	return
  5788  07FF                     __end_of_getch:
  5789                           
  5790                           	psect	text35
  5791  0F91                     __ptext35:	
  5792 ;; *************** function _Serial_available *****************
  5793 ;; Defined at:
  5794 ;;		line 78 in file "progger.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;		None
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;		None
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  1    wreg      unsigned char 
  5801 ;; Registers used:
  5802 ;;		wreg
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5812 ;;Total ram usage:        0 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:    1
  5815 ;; This function calls:
  5816 ;;		Nothing
  5817 ;; This function is called by:
  5818 ;;		_main
  5819 ;;		_getch
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           
  5824                           ;psect for function _Serial_available
  5825  0F91                     _Serial_available:
  5826  0F91                     l2071:	
  5827                           ;incstack = 0
  5828                           ; Regs used in _Serial_available: [wreg]
  5829                           
  5830                           
  5831                           ;progger.c: 80:  if(rx_wr_index0 != rx_rd_index0) return 1;
  5832  0F91  0020               	movlb	0	; select bank0
  5833  0F92  085D               	movf	_rx_wr_index0,w	;volatile
  5834  0F93  065C               	xorwf	_rx_rd_index0,w	;volatile
  5835  0F94  1903               	skipnz
  5836  0F95  2F97               	goto	u1061
  5837  0F96  2F98               	goto	u1060
  5838  0F97                     u1061:
  5839  0F97  2F9A               	goto	l2077
  5840  0F98                     u1060:
  5841  0F98                     l2073:
  5842  0F98  3001               	movlw	1
  5843  0F99  2F9B               	goto	l170
  5844  0F9A                     l2077:
  5845                           
  5846                           ;progger.c: 81:  return 0;
  5847  0F9A  3000               	movlw	0
  5848  0F9B                     l170:
  5849  0F9B  0008               	return
  5850  0F9C                     __end_of_Serial_available:
  5851                           
  5852                           	psect	intentry
  5853  0004                     __pintentry:	
  5854 ;; *************** function _ISR *****************
  5855 ;; Defined at:
  5856 ;;		line 44 in file "main.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;		None
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;		None
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      void 
  5863 ;; Registers used:
  5864 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;Total ram usage:        2 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; This function calls:
  5877 ;;		Nothing
  5878 ;; This function is called by:
  5879 ;;		Interrupt level 1
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883  0004                     _ISR:
  5884                           
  5885                           ;incstack = 0
  5886  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  5887                           
  5888                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5889  0005  3180               	pagesel	$
  5890  0006                     i1l2007:
  5891                           
  5892                           ;main.c: 46:   if (RCIF == 1)
  5893  0006  0020               	movlb	0	; select bank0
  5894  0007  1E91               	btfss	17,5	;volatile
  5895  0008  280A               	goto	u102_21
  5896  0009  280B               	goto	u102_20
  5897  000A                     u102_21:
  5898  000A  281D               	goto	i1l32
  5899  000B                     u102_20:
  5900  000B                     i1l2009:
  5901                           
  5902                           ;main.c: 47:   {;main.c: 48:     exchange[rx_wr_index0] = RCREG;
  5903  000B  085D               	movf	_rx_wr_index0,w	;volatile
  5904  000C  3EF0               	addlw	240
  5905  000D  00F0               	movwf	??_ISR
  5906  000E  01F1               	clrf	??_ISR+1
  5907  000F  3022               	movlw	34
  5908  0010  3DF1               	addwfc	??_ISR+1,f
  5909  0011  0870               	movf	??_ISR,w
  5910  0012  0086               	movwf	6
  5911  0013  0871               	movf	??_ISR+1,w
  5912  0014  0087               	movwf	7
  5913  0015  0023               	movlb	3	; select bank3
  5914  0016  0819               	movf	25,w	;volatile
  5915  0017  0081               	movwf	1
  5916  0018                     i1l2011:
  5917                           
  5918                           ;main.c: 49:     rx_wr_index0++;
  5919  0018  3001               	movlw	1
  5920  0019  00F0               	movwf	??_ISR
  5921  001A  0870               	movf	??_ISR,w
  5922  001B  0020               	movlb	0	; select bank0
  5923  001C  07DD               	addwf	_rx_wr_index0,f	;volatile
  5924  001D                     i1l32:
  5925  001D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5926  001E  0009               	retfie
  5927  001F                     __end_of_ISR:
  5928  007E                     btemp	set	126	;btemp
  5929  007E                     int$flags	set	126
  5930  007E                     wtemp0	set	126
  5931  21F0                     
  5932                           	psect	idloc
  5933                           
  5934                           ;Config register IDLOC0 @ 0x8000
  5935                           ;	unspecified, using default values
  5936  8000                     	org	32768
  5937  8000  3FFF               	dw	16383
  5938                           
  5939                           ;Config register IDLOC1 @ 0x8001
  5940                           ;	unspecified, using default values
  5941  8001                     	org	32769
  5942  8001  3FFF               	dw	16383
  5943                           
  5944                           ;Config register IDLOC2 @ 0x8002
  5945                           ;	unspecified, using default values
  5946  8002                     	org	32770
  5947  8002  3FFF               	dw	16383
  5948                           
  5949                           ;Config register IDLOC3 @ 0x8003
  5950                           ;	unspecified, using default values
  5951  8003                     	org	32771
  5952  8003  3FFF               	dw	16383
  5953                           
  5954                           	psect	config
  5955                           
  5956                           ;Config register CONFIG1 @ 0x8007
  5957                           ;	Oscillator Selection
  5958                           ;	FOSC = HS, HS Oscillator, High-speed crystal/resonator connected between OSC1 and OSC2
      +                           pins
  5959                           ;	Watchdog Timer Enable
  5960                           ;	WDTE = OFF, WDT disabled
  5961                           ;	Power-up Timer Enable
  5962                           ;	PWRTE = OFF, PWRT disabled
  5963                           ;	MCLR Pin Function Select
  5964                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  5965                           ;	Flash Program Memory Code Protection
  5966                           ;	CP = OFF, Program memory code protection is disabled
  5967                           ;	Data Memory Code Protection
  5968                           ;	CPD = OFF, Data memory code protection is disabled
  5969                           ;	Brown-out Reset Enable
  5970                           ;	BOREN = ON, Brown-out Reset enabled
  5971                           ;	Clock Out Enable
  5972                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  5973                           ;	Internal/External Switchover
  5974                           ;	IESO = ON, Internal/External Switchover mode is enabled
  5975                           ;	Fail-Safe Clock Monitor Enable
  5976                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  5977  8007                     	org	32775
  5978  8007  3FA2               	dw	16290
  5979                           
  5980                           ;Config register CONFIG2 @ 0x8008
  5981                           ;	Flash Memory Self-Write Protection
  5982                           ;	WRT = OFF, Write protection off
  5983                           ;	Voltage Regulator Capacitor Enable
  5984                           ;	VCAPEN = OFF, All VCAP pin functionality is disabled
  5985                           ;	PLL Enable
  5986                           ;	PLLEN = OFF, 4x PLL disabled
  5987                           ;	Stack Overflow/Underflow Reset Enable
  5988                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  5989                           ;	Brown-out Reset Voltage Selection
  5990                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  5991                           ;	Low-Voltage Programming Enable
  5992                           ;	LVP = ON, Low-voltage programming enabled
  5993  8008                     	org	32776
  5994  8008  3EFF               	dw	16127

Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         28
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     36      62
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    uart_sendString@str	PTR unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _setup->_pulse
    _avrisp->_universal
    _universal->_spi_transaction
    _uart_sendString->_uart_sendChar
    _start_pmode->_spi_transaction
    _read_signature->_spi_transaction
    _flash_read_page->_flash_read
    _flash_read->_spi_transaction
    _eeprom_read_page->_spi_transaction
    _write_flash_pages->_flash
    _flash->_spi_transaction
    _commit->_spi_transaction
    _write_eeprom_chunk->_spi_transaction
    _spi_transaction->_SPI_transfer
    _fill->_getch
    _get_version->_breply
    _breply->_getch
    _end_pmode->_reset_target
    _empty_reply->_getch

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_avrisp
    _avrisp->_program_page
    _universal->_fill
    _start_pmode->_spi_transaction
    _read_signature->_spi_transaction
    _read_page->_eeprom_read_page
    _flash_read_page->_flash_read
    _flash_read->_spi_transaction
    _eeprom_read_page->_spi_transaction
    _program_page->_write_eeprom
    _write_flash->_write_flash_pages
    _write_flash_pages->_flash
    _flash->_spi_transaction
    _commit->_spi_transaction
    _write_eeprom->_write_eeprom_chunk
    _write_eeprom_chunk->_fill

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   32225
                                             35 BANK0      1     1      0
                   _Serial_available
                             _avrisp
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0     544
                                              7 COMMON     1     1      0
                              _pulse
                          _uart_init
 ---------------------------------------------------------------------------------
 (2) _uart_init                                            1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _pulse                                                5     1      4     544
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (1) _avrisp                                               4     4      0   31681
                                             31 BANK0      4     4      0
                        _empty_reply
                          _end_pmode
                               _fill
                        _get_version
                              _getch
                       _program_page
                          _read_page
                     _read_signature
                     _set_parameters
                        _start_pmode
                      _uart_sendChar
                    _uart_sendString
                          _universal
 ---------------------------------------------------------------------------------
 (2) _universal                                            5     5      0    3735
                                              9 COMMON     1     1      0
                                              5 BANK0      4     4      0
                             _breply
                               _fill
                    _spi_transaction
 ---------------------------------------------------------------------------------
 (2) _uart_sendString                                      5     3      2     251
                                              3 COMMON     5     3      2
                      _uart_sendChar
 ---------------------------------------------------------------------------------
 (2) _start_pmode                                          2     2      0    3066
                                              3 BANK0      2     2      0
                       _reset_target
                           _spi_init
                    _spi_transaction
 ---------------------------------------------------------------------------------
 (3) _spi_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _set_parameters                                      19    19      0       0
                                              0 BANK0     19    19      0
 ---------------------------------------------------------------------------------
 (2) _read_signature                                       5     5      0    3189
                                              3 BANK0      5     5      0
                              _getch
                    _spi_transaction
                      _uart_sendChar
 ---------------------------------------------------------------------------------
 (2) _read_page                                            7     7      0    7165
                                             16 BANK0      7     7      0
                   _eeprom_read_page
                    _flash_read_page
                              _getch
                      _uart_sendChar
 ---------------------------------------------------------------------------------
 (3) _flash_read_page                                      7     5      2    3552
                                              8 BANK0      7     5      2
                         _flash_read
                      _uart_sendChar
 ---------------------------------------------------------------------------------
 (4) _flash_read                                           6     4      2    3295
                                              9 COMMON     1     1      0
                                              3 BANK0      5     3      2
                    _spi_transaction
 ---------------------------------------------------------------------------------
 (3) _eeprom_read_page                                    13    11      2    3375
                                              3 BANK0     13    11      2
                    _spi_transaction
                      _uart_sendChar
 ---------------------------------------------------------------------------------
 (2) _program_page                                         7     7      0   13357
                                             24 BANK0      7     7      0
                              _getch
                      _uart_sendChar
                       _write_eeprom
                        _write_flash
 ---------------------------------------------------------------------------------
 (3) _write_flash                                          2     0      2    8286
                                             19 BANK0      2     0      2
                               _fill
                              _getch
                      _uart_sendChar
                  _write_flash_pages
 ---------------------------------------------------------------------------------
 (4) _write_flash_pages                                    9     7      2    7486
                                             10 BANK0      9     7      2
                             _commit
                       _current_page
                              _flash
 ---------------------------------------------------------------------------------
 (5) _flash                                                8     5      3    3506
                                              9 COMMON     1     1      0
                                              3 BANK0      7     4      3
                    _spi_transaction
 ---------------------------------------------------------------------------------
 (5) _current_page                                         2     0      2       0
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (5) _commit                                               6     4      2    3658
                                              3 BANK0      6     4      2
                          _prog_lamp
                    _spi_transaction
 ---------------------------------------------------------------------------------
 (3) _write_eeprom                                         6     4      2    4836
                                             18 BANK0      6     4      2
                 _write_eeprom_chunk
 ---------------------------------------------------------------------------------
 (4) _write_eeprom_chunk                                  13     9      4    4548
                                              5 BANK0     13     9      4
                               _fill
                          _prog_lamp
                    _spi_transaction
 ---------------------------------------------------------------------------------
 (3) _spi_transaction                                      4     1      3    3022
                                              8 COMMON     1     1      0
                                              0 BANK0      3     0      3
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (4) _SPI_transfer                                         6     6      0     198
                                              2 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (6) _prog_lamp                                            3     1      2     326
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _fill                                                 9     7      2     583
                                              4 COMMON     4     2      2
                                              0 BANK0      5     5      0
                              _getch
 ---------------------------------------------------------------------------------
 (2) _get_version                                          3     3      0     127
                                              5 COMMON     3     3      0
                             _breply
 ---------------------------------------------------------------------------------
 (3) _breply                                               1     1      0      96
                                              4 COMMON     1     1      0
                              _getch
                      _uart_sendChar
 ---------------------------------------------------------------------------------
 (2) _end_pmode                                            0     0      0      44
                       _reset_target
                         _spi_deinit
 ---------------------------------------------------------------------------------
 (3) _spi_deinit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _reset_target                                         2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _empty_reply                                          0     0      0      65
                              _getch
                      _uart_sendChar
 ---------------------------------------------------------------------------------
 (4) _uart_sendChar                                        1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getch                                                2     2      0      34
                                              2 COMMON     2     2      0
                   _Serial_available
 ---------------------------------------------------------------------------------
 (5) _Serial_available                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Serial_available
   _avrisp
     _empty_reply
       _getch
         _Serial_available
       _uart_sendChar
     _end_pmode
       _reset_target
       _spi_deinit
     _fill
       _getch
         _Serial_available
     _get_version
       _breply
         _getch
           _Serial_available
         _uart_sendChar
     _getch
       _Serial_available
     _program_page
       _getch
         _Serial_available
       _uart_sendChar
       _write_eeprom
         _write_eeprom_chunk
           _fill
             _getch
               _Serial_available
           _prog_lamp
           _spi_transaction
             _SPI_transfer
       _write_flash
         _fill
           _getch
             _Serial_available
         _getch
           _Serial_available
         _uart_sendChar
         _write_flash_pages
           _commit
             _prog_lamp
             _spi_transaction
               _SPI_transfer
           _current_page
           _flash
             _spi_transaction
               _SPI_transfer
     _read_page
       _eeprom_read_page
         _spi_transaction
           _SPI_transfer
         _uart_sendChar
       _flash_read_page
         _flash_read
           _spi_transaction
             _SPI_transfer
         _uart_sendChar
       _getch
         _Serial_available
       _uart_sendChar
     _read_signature
       _getch
         _Serial_available
       _spi_transaction
         _SPI_transfer
       _uart_sendChar
     _set_parameters
     _start_pmode
       _reset_target
       _spi_init
       _spi_transaction
         _SPI_transfer
     _uart_sendChar
     _uart_sendString
       _uart_sendChar
     _universal
       _breply
         _getch
           _Serial_available
         _uart_sendChar
       _fill
         _getch
           _Serial_available
       _spi_transaction
         _SPI_transfer
   _setup
     _pulse
     _uart_init

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     24      3E       5       77.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      4A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      4A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Feb 07 14:29:47 2024

               ?_get_version 0070                           l60 0F87                           l71 0F82  
                         l39 06E4                           l91 0F89                           l67 0459  
                         l68 0474                           l94 0F90                           l88 0FD2  
    __end_of_spi_transaction 0FE8                          l100 07AF                          l201 0773  
                        l211 06CE                          l220 0FB4                          l214 0144  
                        l223 069C                          l152 02B3                          l233 0634  
                        l217 0543                          l153 02D1                          l170 0F9B  
                        l162 078B                          l226 07CA                          l154 02EF  
                        l323 0237                          l155 030C                          l252 02B2  
                        l229 0602                          l237 05BF                          l245 0753  
                        l157 0318                          l149 0668                          l166 0792  
                        l182 0729                          l191 0FE7                          l176 07FE  
                        l256 0503                          l265 04C0                          l281 0582  
                        l275 0FFF                          l291 0379                          l196 07E5  
                        l188 0FC3                          l269 03D7                          l293 0375  
                        l287 05FB                          l297 0426                          _ISR 0004  
                        u630 058B                          u631 058A                          u720 077A  
                        u640 0599                          u721 0779                          u641 0598  
                        u730 0780                          u650 05A7                          u731 077F  
                        u651 05A6                          u740 0785                          u660 05B4  
                        u900 0140                          u741 0784                          u661 05B3  
                        u901 013E                          u750 078B                          u590 0FBB  
                        u910 0141                          u830 02BA                          u751 078A  
                        u591 0FBA                          u831 02B9                          u840 02D8  
                        u841 02D7                          u850 02F5                          u851 02F4  
                        u860 0318                          u861 0317                          u880 0106  
                        u890 0117                          u885 0102                          u895 0113  
                _start_pmode 0504                          wreg 0009              ??_uart_sendChar 0072  
               _rx_rd_index0 005C                         ?_ISR 0070                         l2101 045D  
                       l2103 0461        __size_of_SPI_transfer 004E                         l2121 07FD  
                       l2113 07E6                         l2105 0465                         l2201 0FE9  
                       l2115 07E6                         l2211 076F                         l2131 0701  
                       l2107 046E                         l2117 07EE                         l2205 0755  
                       l2301 06B3                         l2133 0716                         l2109 0473  
                       l2125 0FD4                         l2141 0610                         l2221 074F  
                       l2213 072A                         l2071 0F91                         l2119 07F9  
                       l2151 0F89                         l2207 075D                         l2303 06B8  
                       l2135 071A                         l2231 04E5                         l2223 04C1  
                       l2215 073A                         l2311 0508                         l2073 0F98  
                       l2153 0F8E                         l2209 076A                         l2129 06FE  
                       l2081 0428                         l2233 04EA                         l2225 04D4  
                       l2137 07B1                         l2161 0252                         l2217 073E  
                       l2321 0522                         l2313 050E                         l2401 014F  
                       l2091 043D                         l2235 04EE                         l2147 0613  
                       l2139 05FC                         l1603 05AE                         l2171 0297  
                       l2163 0261                         l2155 0238                         l2219 074A  
                       l2331 037A                         l2251 0573                         l2243 0544  
                       l2323 0526                         l2315 0511                         l2411 016B  
                       l2403 0153                         l2077 0F9A                         l2093 0442  
                       l2181 0475                         l2237 04F7                         l2229 04DA  
                       l2149 062D                         l1605 05B4                         l2165 0277  
                       l2173 029B                         l2157 023B                         l2341 039E  
                       l2333 037A                         l2261 05C8                         l2253 0581  
                       l2245 0548                         l2325 0533                         l2317 051A  
                       l2309 0504                         l2421 0195                         l2413 0170  
                       l2405 015B                         l2095 0443                         l2087 042B  
                       l2191 04A7                         l2183 047D                         l2239 0502  
                       l2175 02A9                         l2167 027C                         l2159 0244  
                       l2351 03C9                         l2335 0387                         l2271 05FA  
                       l2263 05CF                         l2247 056A                         l2327 053E  
                       l2319 051E                         l2431 01C4                         l2423 019B  
                       l2415 0175                         l2407 015F                         l1553 0FB5  
                       l2097 0447                         l2089 043A                         l2193 04AA  
                       l2185 0483                         l1609 05BB                         l2177 02B1  
                       l2169 0292                         l2353 03CE                         l2345 03A6  
                       l2337 0391                         l2265 05E3                         l2257 05C0  
                       l2249 056E                         l2361 0319                         l2281 07A4  
                       l2329 0669                         l2441 01D9                         l2433 01CB  
                       l2417 017C                         l2409 0166                         l2283 07CB  
                       l2291 069E                         l1555 0FBB                         l2099 044C  
                       l2187 0487                         l2195 04AF                         l2347 03AC  
                       l2339 0398                         l2267 05E7                         l2259 05C5  
                       l2371 0344                         l2363 031E                         l2275 0793  
                       l2451 01EA                         l2435 01CF                         l2427 019F  
                       l2419 018A                         l2285 07D3                         l2293 069F  
                       l1557 0FBE                         l2197 04B9                         l2189 048D  
                       l2349 03BF                         l2357 03D3                         l2269 05EC  
                       l2381 0359                         l2373 0349                         l2365 032B  
                       l1821 003D                         l2277 0796                         l2525 0208  
                       l2453 01EE                         l2445 01DD                         l2437 01D3  
                       l2429 01BA                         l2461 0200                         l2287 07DC  
                       l1671 0775                         l2527 06C0                         l2295 06A4  
                       l1591 0592                         l2383 0364                         l2367 0335  
                       l2391 03E5                         l1831 0139                         l1823 008E  
                       l2279 07A0                         l2455 01F6                         l2447 01E1  
                       l2439 01D7                         l1751 0FC4                         l2471 06D7  
                       l2289 07E1                         l1673 077A                         l2297 06A9  
                       l1593 0599                         l1585 0583                         l2385 036A  
                       l2377 034E                         l2369 033C                         l1825 00A7  
                       l2457 01FB                         l2449 01E5                         l1753 0FC9  
                       l2481 06F0                         l2473 06DE                         l1675 0780  
                       l2299 06AE                         l1587 058B                         l2379 0352  
                       l2395 03EA                         l2387 03D8                         l1827 00C0  
                       l1667 0F83                         l1771 02BA                         l1755 0FCC  
                       l1931 063D                         l2483 06F8                         l2475 06E0  
                       l2467 06CF                         l1677 0785                         l1669 0F7F  
                       l1853 0FA8                         l1597 05A0                         l2389 03E0  
                       l1829 00D9                         l2397 0145                         l1781 02DA  
                       l1773 02BC                         l1757 0FCE                         l1933 064D  
                       l2477 06EA                         l2469 06D2                         l1679 078D  
                       l1855 0FAF                         l1599 05A7                         l2399 014D  
                       l1791 02FF                         l1783 02E2                         l1775 02C4  
                       l1759 0FD0                         l1935 0658                         l1927 0635  
                       l2479 06EC                         l1857 0FB1                         l1793 0304  
                       l1785 02E7                         l1777 02C9                         l1769 02B3  
                       l1929 0638                         l1787 02F5                         l1779 02D8  
                       l1789 02F7                         STR_1 1000                         u1110 046E  
                       u1111 046D                         u1120 07EE                         u1104 0453  
                       u1121 07ED                         u1105 0452                         u1210 075D  
                       u1130 0729                         u1211 075C                         u1131 0728  
                       u1060 0F98                         u1220 073A                         u1300 03AC  
                       u1061 0F97                         u1221 0739                         u1301 03AB  
                       u1205 0FF6                         u1230 04D4                         u1150 062D  
                       u1310 03BF                         u1135 0725                         u1231 04D3  
                       u1151 062C                         u1311 03BE                         u1160 0F8E  
                       u1080 043A                         u1240 04F7                         u1320 0344  
                       u1400 06EA                         u1161 0F8D                         u1081 0439  
                       u1241 04F6                         u1145 07C1                         u1321 0343  
                       u1401 06E9                         u1090 044C                         u1074 0432  
                       u1170 0252                         u1250 0581                         u1330 0359  
                       u1410 06F8                         u1091 044B                         u1075 0431  
                       u1235 04D0                         u1155 0629                         u1171 0251  
                       u1251 0580                         u1331 0358                         u1411 06F7  
                       u1180 02A9                         u1260 05FA                         u1340 036A  
                       u1181 02A8                         u1261 05F9                         u1341 0369  
                       u1190 04B9                         u1350 03E0                         u1270 07AF  
                       u1191 04B8                         u1175 024E                         u1255 057D  
                       u1351 03DF                         u1271 07AE                         u1280 07D3  
                       u1360 015B                         u1281 07D2                         u1185 02A5  
                       u1265 05F6                         u1361 015A                         u1290 039E  
                       u1370 019B                         u1195 04B5                         u1291 039D  
                       u1507 052C                         u1371 019A                         u1427 02BF  
                       u1380 01F6                         u1517 0617                         u1381 01F5  
                       u1437 02CC                         u1390 06DE                         u1527 04A8  
                       u1447 02DD                         u1391 06DD                         u1537 0444  
                       u1457 02EA                         u1547 045E                         u1467 02FA  
                       u1477 0307                         u1487 0515                         u1497 051F  
                       i1l32 001D                         _RCIE 048D                         _RCIF 008D  
                       _TRMT 0CF1            eeprom_read_page@x 002E          write_eeprom_chunk@x 0030  
                       _buff 21F0                         _fill 06FE                         _here 007A  
                       _main 06CF                         fsr0h 0005                         fsr1h 0007  
                       indf0 0000                         fsr0l 0004                         indf1 0001  
                       fsr1l 0006                         btemp 007E                         start 001F  
               ?_empty_reply 0070                        ??_ISR 0070            ?_Serial_available 0070  
         ??_Serial_available 0072                 _rx_wr_index0 005D                        ?_fill 0074  
                      ?_main 0070                        _RCREG 0199                        _RCSTA 019D  
               _SPI_transfer 0427                        _SPBRG 019B                        _PORTA 000C  
                      _PORTC 000E             SPI_transfer@rslt 0075                        _TRISA 008C  
                      _TRISC 008E                        _TXREG 019A                        _TXSTA 019E  
           ??_read_signature 0023                  _write_flash 072A           eeprom_read_page@ee 002B  
                      _flash 07B0                        _getch 07E6                        _param 0044  
                      _pmode 0059                        fill@n 0074                        fill@x 0076  
                      _setup 0635                        _pulse 02B3                 get_version@c 0077  
        program_page@memtype 003C                        status 0003                        wtemp0 007E  
            __initialization 0021            ??_uart_sendString 0075                 __end_of_fill 072A  
               __end_of_main 06FE        __size_of_write_eeprom 0043   __end_of_write_eeprom_chunk 04C1  
             prog_lamp@state 0072             ?_spi_transaction 0020                       ??_fill 0020  
                     ??_main 0043                       ?_flash 0023                       ?_getch 0070  
             flash_read@addr 0023               flash_read@hilo 0079                       ?_setup 0070  
                     ?_pulse 0072                       u102_20 000B                       u102_21 000A  
                     i1l2011 0018                       i1l2007 0006                       i1l2009 000B  
                     _INTCON 000B             _eeprom_read_page 05C0                       _TRISC3 0473  
                     _TRISC4 0474                       _TRISC5 0475                ?_current_page 0072  
               _write_eeprom 04C1                       _breply 0754                       _commit 05FC  
                     _avrisp 0145                       _errors 0057         __size_of_get_version 0032  
          _write_flash_pages 0238           ?_write_flash_pages 002A             __end_of_spi_init 0F88  
      flash_read_page@length 0028     __size_of_flash_read_page 003F          ??_write_flash_pages 002C  
    __end_of__initialization 0039               ??_current_page 0074               __pcstackCOMMON 0070  
              __end_of_flash 07CB                __end_of_getch 07FF                __end_of_setup 0669  
       __size_of_empty_reply 001B                __end_of_pulse 0319    __end_of_write_flash_pages 02B3  
    write_flash_pages@length 002A                 ?_start_pmode 0070      __size_of_set_parameters 0108  
         __size_of_end_pmode 000D                      ??_flash 0026                      ??_getch 0072  
                    ??_setup 0077                      ??_pulse 0076                   __pbssBANK0 0044  
      write_flash_pages@page 002F           __size_of_read_page 0061                   __pmaintext 06CF  
                 __pintentry 0004                      ?_breply 0070                      ?_commit 0023  
                    ?_avrisp 0070           __size_of_uart_init 000F           __size_of_prog_lamp 000F  
               ?_write_flash 0033                   _flash_read 0FE8        __end_of_uart_sendChar 0F91  
  __size_of_Serial_available 000B                      _SSPCON1 0215           __size_of_universal 0034  
            _uart_sendString 0793                ?_reset_target 0070            ??_flash_read_page 002A  
          __end_of_end_pmode 0FB5         eeprom_read_page@addr 002C              _rst_active_high 005B  
                  ?_spi_init 0070              __size_of_breply 0020              __size_of_commit 0039  
            __size_of_avrisp 00F3       write_eeprom_chunk@addr 002E   __size_of_write_flash_pages 007B  
   __end_of_eeprom_read_page 05FC                      __ptext1 0635                      __ptext2 0FC4  
                    __ptext3 02B3                      __ptext4 0145                      __ptext5 0669  
                    __ptext6 0793                      __ptext7 0504                      __ptext8 0F83  
                    __ptext9 003D         __end_of_current_page 05C0                 __size_of_ISR 001B  
          __end_of_read_page 037A                      breply@b 0074                      commit@i 0027  
                    clrloop0 0F9D           _write_eeprom_chunk 0475         end_of_initialization 0039  
        ?_write_eeprom_chunk 0025               ??_reset_target 0072            __end_of_uart_init 0FD3  
          __end_of_prog_lamp 0FC4                   ??_spi_init 0072            __end_of_universal 069D  
                 _spi_deinit 0F7F         ??_write_eeprom_chunk 0029               _set_parameters 003D  
                ?_flash_read 0023           write_eeprom@length 0032      __end_of_uart_sendString 07B0  
       __size_of_start_pmode 0040     __size_of_spi_transaction 0015                ?_program_page 0070  
    __size_of_read_signature 004F                   commit@addr 0023           write_flash_pages@x 0031  
              ??_get_version 0075              SPI_transfer@dat 0074               __end_of_breply 0774  
             __end_of_commit 0635       __end_of_set_parameters 0145               __end_of_avrisp 0238  
           read_page@memtype 0034           program_page@length 003D           program_page@result 003B  
        start_initialization 0021                  __end_of_ISR 001F             _Serial_available 0F91  
       __size_of_write_flash 002A               ??_program_page 0038         read_signature@middle 0026  
        __size_of_flash_read 0018                ??_empty_reply 0074        __size_of_current_page 003D  
     eeprom_read_page@length 0023                     ??_breply 0074                     ??_commit 0025  
                   ??_avrisp 003F            reset_target@reset 0073                  ?_spi_deinit 0070  
            ?_set_parameters 0070                ?_SPI_transfer 0070                  __pbssBIGRAM 21F0  
        __end_of_get_version 06CF         __end_of_reset_target 0793                  __pbssCOMMON 007A  
                  ___latbits 0003                __pcstackBANK0 0020             ?_uart_sendString 0073  
              SPI_transfer@i 0076              _flash_read_page 0544           read_signature@high 0025  
          ??_spi_transaction 0078                 _current_page 0583                  universal@ch 0079  
   write_eeprom_chunk@length 0027                    _end_pmode 0FA8            __size_of_spi_init 0005  
           uart_sendString@i 0076               ??_SPI_transfer 0072            ?_eeprom_read_page 0023  
        __end_of_empty_reply 07E6           ??_eeprom_read_page 0025               __size_of_flash 001B  
             __size_of_getch 0019                    _read_page 0319               __size_of_setup 0034  
             __size_of_pulse 0066               _read_signature 03D8          __size_of_spi_deinit 0004  
                  clear_ram0 0F9C                ?_write_eeprom 0032             flash_read_page@x 002D  
          write_flash@length 0033                    _uart_init 0FC4           uart_sendString@str 0073  
     __size_of_uart_sendChar 0009                    _prog_lamp 0FB5                  _get_version 069D  
                 ?_end_pmode 0070                    flash@addr 0023                    flash@data 0025  
                  flash@hilo 0079         __end_of_program_page 03D8                    getch@temp 0073  
          write_eeprom@start 0034      __end_of_flash_read_page 0583             spi_transaction@a 0078  
           spi_transaction@b 0020             spi_transaction@c 0021             spi_transaction@d 0022  
                  _universal 0669                 ??_flash_read 0025                   ?_read_page 0070  
            read_page@length 0035       __end_of_read_signature 0427              read_page@result 0033  
             ??_write_eeprom 0079                  _empty_reply 07CB           __end_of_flash_read 1000  
   __end_of_Serial_available 0F9C                   ?_uart_init 0070          flash_read_page@high 002C  
      eeprom_read_page@start 0029                   ?_prog_lamp 0072              uart_sendChar@ch 0072  
      __size_of_reset_target 001F                ??_start_pmode 0023            read_signature@low 0027  
__size_of_write_eeprom_chunk 004C                   ?_universal 0070                     __ptext10 03D8  
                   __ptext11 0319                     __ptext20 05FC                     __ptext12 0544  
                   __ptext21 04C1                     __ptext13 0FE8                     __ptext30 0F7F  
                   __ptext22 0475                     __ptext14 05C0                     __ptext31 0774  
                   __ptext23 0FD3                     __ptext15 037A                     __ptext32 07CB  
                   __ptext24 0427                     __ptext16 072A                     __ptext33 0F88  
                   __ptext25 0FB5                     __ptext17 0238                     __ptext34 07E6  
                   __ptext26 06FE                     __ptext18 07B0                     __ptext35 0F91  
                   __ptext27 069D                     __ptext19 0583                     __ptext28 0754  
                   __ptext29 0FA8      write_eeprom_chunk@start 0025                _uart_sendChar 0F88  
            ?_read_signature 0070                     _exchange 22F0                __size_of_fill 002C  
              __size_of_main 002F         __end_of_SPI_transfer 0475                 _reset_target 0774  
           ??_set_parameters 0020                     _spi_init 0F83                     int$flags 007E  
                ??_end_pmode 0074                 ??_spi_deinit 0072                     avrisp@ch 0042  
                  pulse@tmes 0074             ?_flash_read_page 0028                ??_write_flash 007A  
            _spi_transaction 0FD3           flash_read_page@low 002B               ?_uart_sendChar 0070  
                ??_read_page 0030          __end_of_start_pmode 0544                     intlevel1 0000  
         __end_of_spi_deinit 0F83        __size_of_program_page 005E                  ??_uart_init 0072  
                ??_prog_lamp 0074                     pulse@pin 0072                __pstringtext1 1000  
              __pstringtext2 0000         __end_of_write_eeprom 0504                  ??_universal 0025  
        __end_of_write_flash 0754    __size_of_eeprom_read_page 003C                 _program_page 037A  
   __size_of_uart_sendString 001D        write_eeprom@remaining 0036  
