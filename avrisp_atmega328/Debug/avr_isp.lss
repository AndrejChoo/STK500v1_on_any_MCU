
avr_isp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000c2c  00000cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021c  00800108  00800108  00000cc8  2**0
                  ALLOC
  3 .stab         000022e0  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012c0  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00004268  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004298  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000042d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  000048cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00004e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00004e88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
   4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  10:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  14:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  18:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  1c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  20:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  24:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  28:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  2c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  30:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  38:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  3c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  40:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  44:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  48:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_18>
  4c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  50:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  54:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  58:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  5c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  60:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  68:	9c 05       	cpc	r25, r12
  6a:	a9 05       	cpc	r26, r9
  6c:	a9 05       	cpc	r26, r9
  6e:	a9 05       	cpc	r26, r9
  70:	a9 05       	cpc	r26, r9
  72:	a9 05       	cpc	r26, r9
  74:	a9 05       	cpc	r26, r9
  76:	a9 05       	cpc	r26, r9
  78:	a9 05       	cpc	r26, r9
  7a:	a9 05       	cpc	r26, r9
  7c:	a9 05       	cpc	r26, r9
  7e:	a9 05       	cpc	r26, r9
  80:	a9 05       	cpc	r26, r9
  82:	a9 05       	cpc	r26, r9
  84:	a9 05       	cpc	r26, r9
  86:	a9 05       	cpc	r26, r9
  88:	1f 05       	cpc	r17, r15
  8a:	26 05       	cpc	r18, r6
  8c:	a9 05       	cpc	r26, r9
  8e:	a9 05       	cpc	r26, r9
  90:	a9 05       	cpc	r26, r9
  92:	a9 05       	cpc	r26, r9
  94:	a9 05       	cpc	r26, r9
  96:	a9 05       	cpc	r26, r9
  98:	a9 05       	cpc	r26, r9
  9a:	a9 05       	cpc	r26, r9
  9c:	a9 05       	cpc	r26, r9
  9e:	a9 05       	cpc	r26, r9
  a0:	a9 05       	cpc	r26, r9
  a2:	a9 05       	cpc	r26, r9
  a4:	a9 05       	cpc	r26, r9
  a6:	a9 05       	cpc	r26, r9
  a8:	a9 05       	cpc	r26, r9
  aa:	42 05       	cpc	r20, r2
  ac:	47 05       	cpc	r20, r7
  ae:	a9 05       	cpc	r26, r9
  b0:	a9 05       	cpc	r26, r9
  b2:	50 05       	cpc	r21, r0
  b4:	a9 05       	cpc	r26, r9
  b6:	a9 05       	cpc	r26, r9
  b8:	a9 05       	cpc	r26, r9
  ba:	a9 05       	cpc	r26, r9
  bc:	a9 05       	cpc	r26, r9
  be:	a9 05       	cpc	r26, r9
  c0:	a9 05       	cpc	r26, r9
  c2:	a9 05       	cpc	r26, r9
  c4:	a9 05       	cpc	r26, r9
  c6:	a9 05       	cpc	r26, r9
  c8:	57 05       	cpc	r21, r7
  ca:	90 05       	cpc	r25, r0
  cc:	a9 05       	cpc	r26, r9
  ce:	a9 05       	cpc	r26, r9
  d0:	a9 05       	cpc	r26, r9
  d2:	62 05       	cpc	r22, r2
  d4:	8d 05       	cpc	r24, r13
  d6:	a9 05       	cpc	r26, r9
  d8:	a9 05       	cpc	r26, r9
  da:	a9 05       	cpc	r26, r9
  dc:	a9 05       	cpc	r26, r9
  de:	a9 05       	cpc	r26, r9
  e0:	a9 05       	cpc	r26, r9
  e2:	a9 05       	cpc	r26, r9
  e4:	a9 05       	cpc	r26, r9
  e6:	a9 05       	cpc	r26, r9
  e8:	7b 05       	cpc	r23, r11
  ea:	82 05       	cpc	r24, r2
  ec:	a9 05       	cpc	r26, r9
  ee:	a9 05       	cpc	r26, r9
  f0:	87 05       	cpc	r24, r7
  f2:	a9 05       	cpc	r26, r9
  f4:	a9 05       	cpc	r26, r9
  f6:	a9 05       	cpc	r26, r9
  f8:	a9 05       	cpc	r26, r9
  fa:	a9 05       	cpc	r26, r9
  fc:	a9 05       	cpc	r26, r9
  fe:	a9 05       	cpc	r26, r9
 100:	a9 05       	cpc	r26, r9
 102:	a9 05       	cpc	r26, r9
 104:	a9 05       	cpc	r26, r9
 106:	a9 05       	cpc	r26, r9
 108:	a9 05       	cpc	r26, r9
 10a:	a9 05       	cpc	r26, r9
 10c:	a9 05       	cpc	r26, r9
 10e:	a9 05       	cpc	r26, r9
 110:	8a 05       	cpc	r24, r10
 112:	99 05       	cpc	r25, r9

00000114 <__ctors_end>:
 114:	11 24       	eor	r1, r1
 116:	1f be       	out	0x3f, r1	; 63
 118:	cf ef       	ldi	r28, 0xFF	; 255
 11a:	d8 e0       	ldi	r29, 0x08	; 8
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
 120:	11 e0       	ldi	r17, 0x01	; 1
 122:	a0 e0       	ldi	r26, 0x00	; 0
 124:	b1 e0       	ldi	r27, 0x01	; 1
 126:	ec e2       	ldi	r30, 0x2C	; 44
 128:	fc e0       	ldi	r31, 0x0C	; 12
 12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
 12c:	05 90       	lpm	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	a8 30       	cpi	r26, 0x08	; 8
 132:	b1 07       	cpc	r27, r17
 134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
 136:	23 e0       	ldi	r18, 0x03	; 3
 138:	a8 e0       	ldi	r26, 0x08	; 8
 13a:	b1 e0       	ldi	r27, 0x01	; 1
 13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
 13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
 140:	a4 32       	cpi	r26, 0x24	; 36
 142:	b2 07       	cpc	r27, r18
 144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
 146:	0e 94 cc 00 	call	0x198	; 0x198 <main>
 14a:	0c 94 14 06 	jmp	0xc28	; 0xc28 <_exit>

0000014e <__bad_interrupt>:
 14e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000152 <__vector_18>:
extern uint8_t error;
extern uint8_t pmode;


ISR(USART_RX_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	uint8_t dat = UDR0;
 164:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	if(!(UCSR0A & ((1 << FE0) | (1 << DOR0) | (1 << UPE0))))
 168:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 16c:	8c 71       	andi	r24, 0x1C	; 28
 16e:	59 f4       	brne	.+22     	; 0x186 <__vector_18+0x34>
	{
		exchange[rx_wr_index0] = dat;
 170:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <rx_wr_index0>
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	ee 5d       	subi	r30, 0xDE	; 222
 178:	fe 4f       	sbci	r31, 0xFE	; 254
 17a:	90 83       	st	Z, r25
		rx_wr_index0++;
 17c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rx_wr_index0>
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rx_wr_index0>
	}
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <main>:



int main(void)
{
	setup();
 198:	0e 94 30 01 	call	0x260	; 0x260 <setup>
	sei();
 19c:	78 94       	sei

	while(1)
	{
		  // is pmode active?
		  if (pmode) LED_PMODE_HIGH
 19e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pmode>
 1a2:	88 23       	and	r24, r24
 1a4:	11 f0       	breq	.+4      	; 0x1aa <main+0x12>
 1a6:	44 9a       	sbi	0x08, 4	; 8
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <main+0x14>
		  else LED_PMODE_LOW
 1aa:	44 98       	cbi	0x08, 4	; 8

		  // is there an error?
		  if (error) LED_ERR_HIGH
 1ac:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <error>
 1b0:	88 23       	and	r24, r24
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <main+0x20>
 1b4:	43 9a       	sbi	0x08, 3	; 8
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <main+0x22>
		  else LED_ERR_LOW
 1b8:	43 98       	cbi	0x08, 3	; 8

		  if(Serial_available()) avrisp();
 1ba:	0e 94 57 01 	call	0x2ae	; 0x2ae <Serial_available>
 1be:	88 23       	and	r24, r24
 1c0:	71 f3       	breq	.-36     	; 0x19e <main+0x6>
 1c2:	0e 94 12 05 	call	0xa24	; 0xa24 <avrisp>
 1c6:	eb cf       	rjmp	.-42     	; 0x19e <main+0x6>

000001c8 <pulse>:

void pulse(int pin, int tmes)
{
	do
	{
		if(pin == LED_PMODE)
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	91 05       	cpc	r25, r1
 1cc:	a9 f4       	brne	.+42     	; 0x1f8 <pulse+0x30>
			{
				LED_PMODE_PORT |= (1 << LED_PMODE_PIN);
 1ce:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	36 e7       	ldi	r19, 0x76	; 118
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	30 40       	sbci	r19, 0x00	; 0
 1da:	40 40       	sbci	r20, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <pulse+0xe>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <pulse+0x18>
 1e0:	00 00       	nop
				_delay_ms(30);
				LED_PMODE_PORT &= ~(1 << LED_PMODE_PIN);
 1e2:	44 98       	cbi	0x08, 4	; 8
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	36 e7       	ldi	r19, 0x76	; 118
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	30 40       	sbci	r19, 0x00	; 0
 1ee:	40 40       	sbci	r20, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <pulse+0x22>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <pulse+0x2c>
 1f4:	00 00       	nop
 1f6:	2f c0       	rjmp	.+94     	; 0x256 <pulse+0x8e>
				_delay_ms(30);
			}
		if(pin == LED_ERR)
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	91 05       	cpc	r25, r1
 1fc:	a9 f4       	brne	.+42     	; 0x228 <pulse+0x60>
			{
				LED_ERR_PORT |= (1 << LED_ERR_PIN);
 1fe:	43 9a       	sbi	0x08, 3	; 8
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	36 e7       	ldi	r19, 0x76	; 118
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	21 50       	subi	r18, 0x01	; 1
 208:	30 40       	sbci	r19, 0x00	; 0
 20a:	40 40       	sbci	r20, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <pulse+0x3e>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <pulse+0x48>
 210:	00 00       	nop
				_delay_ms(30);
				LED_ERR_PORT &= ~(1 << LED_ERR_PIN);
 212:	43 98       	cbi	0x08, 3	; 8
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	36 e7       	ldi	r19, 0x76	; 118
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	30 40       	sbci	r19, 0x00	; 0
 21e:	40 40       	sbci	r20, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <pulse+0x52>
 222:	00 c0       	rjmp	.+0      	; 0x224 <pulse+0x5c>
 224:	00 00       	nop
 226:	17 c0       	rjmp	.+46     	; 0x256 <pulse+0x8e>
				_delay_ms(30);
			}
		if(pin == LED_HB)
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	91 05       	cpc	r25, r1
 22c:	a1 f4       	brne	.+40     	; 0x256 <pulse+0x8e>
			{
				LED_HB_PORT |= (1 << LED_HB_PIN);
 22e:	42 9a       	sbi	0x08, 2	; 8
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	36 e7       	ldi	r19, 0x76	; 118
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	21 50       	subi	r18, 0x01	; 1
 238:	30 40       	sbci	r19, 0x00	; 0
 23a:	40 40       	sbci	r20, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <pulse+0x6e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <pulse+0x78>
 240:	00 00       	nop
				_delay_ms(30);
				LED_HB_PORT &= ~(1 << LED_HB_PIN);
 242:	42 98       	cbi	0x08, 2	; 8
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	36 e7       	ldi	r19, 0x76	; 118
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	30 40       	sbci	r19, 0x00	; 0
 24e:	40 40       	sbci	r20, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <pulse+0x82>
 252:	00 c0       	rjmp	.+0      	; 0x254 <pulse+0x8c>
 254:	00 00       	nop
				_delay_ms(30);
			}
	}
	while(tmes--);
 256:	61 50       	subi	r22, 0x01	; 1
 258:	71 09       	sbc	r23, r1
 25a:	08 f0       	brcs	.+2      	; 0x25e <pulse+0x96>
 25c:	b5 cf       	rjmp	.-150    	; 0x1c8 <pulse>
}
 25e:	08 95       	ret

00000260 <setup>:
static uint8_t rst_active_high;


void setup(void)
{
	uart_init();
 260:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <uart_init>

	LED_PMODE_DDR |= (1 << LED_PMODE_PIN);
 264:	3c 9a       	sbi	0x07, 4	; 7
	pulse(LED_PMODE, 2);
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <pulse>

	LED_ERR_DDR |= (1 << LED_ERR_PIN);
 272:	3b 9a       	sbi	0x07, 3	; 7
	pulse(LED_ERR, 2);
 274:	62 e0       	ldi	r22, 0x02	; 2
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <pulse>

	LED_HB_DDR |= (1 << LED_HB_PIN);
 280:	3a 9a       	sbi	0x07, 2	; 7
	pulse(LED_HB, 2);
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <pulse>
 28e:	08 95       	ret

00000290 <reset_target>:
	while(tmes--);
}

void reset_target(uint8_t reset)
{
	if((reset && rst_active_high) || (!reset && !rst_active_high)) RESET_HIGH
 290:	88 23       	and	r24, r24
 292:	29 f0       	breq	.+10     	; 0x29e <reset_target+0xe>
 294:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rst_active_high>
 298:	88 23       	and	r24, r24
 29a:	39 f0       	breq	.+14     	; 0x2aa <reset_target+0x1a>
 29c:	04 c0       	rjmp	.+8      	; 0x2a6 <reset_target+0x16>
 29e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rst_active_high>
 2a2:	81 11       	cpse	r24, r1
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <reset_target+0x1a>
 2a6:	41 9a       	sbi	0x08, 1	; 8
 2a8:	08 95       	ret
	else RESET_LOW
 2aa:	41 98       	cbi	0x08, 1	; 8
 2ac:	08 95       	ret

000002ae <Serial_available>:
}

uint8_t Serial_available(void)
{
	if(rx_wr_index0 != rx_rd_index0) return 1;
 2ae:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <rx_wr_index0>
 2b2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_end>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	29 13       	cpse	r18, r25
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <Serial_available+0x10>
 2bc:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 2be:	08 95       	ret

000002c0 <getch>:

uint8_t getch(void)
{
	uint8_t temp;
	while(!(Serial_available()));
 2c0:	0e 94 57 01 	call	0x2ae	; 0x2ae <Serial_available>
 2c4:	88 23       	and	r24, r24
 2c6:	e1 f3       	breq	.-8      	; 0x2c0 <getch>
	temp = exchange[rx_rd_index0];
 2c8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__data_end>
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	ee 5d       	subi	r30, 0xDE	; 222
 2d0:	fe 4f       	sbci	r31, 0xFE	; 254
 2d2:	80 81       	ld	r24, Z
	rx_rd_index0++;
 2d4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_end>
 2d8:	9f 5f       	subi	r25, 0xFF	; 255
 2da:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__data_end>
	return(temp);
}
 2de:	08 95       	ret

000002e0 <fill>:

void fill(int n)
{
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
  for (int x = 0; x < n; x++) buff[x] = getch();
 2e8:	18 16       	cp	r1, r24
 2ea:	19 06       	cpc	r1, r25
 2ec:	5c f4       	brge	.+22     	; 0x304 <fill+0x24>
 2ee:	c2 e2       	ldi	r28, 0x22	; 34
 2f0:	d2 e0       	ldi	r29, 0x02	; 2
 2f2:	8c 01       	movw	r16, r24
 2f4:	0e 5d       	subi	r16, 0xDE	; 222
 2f6:	1d 4f       	sbci	r17, 0xFD	; 253
 2f8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 2fc:	89 93       	st	Y+, r24
 2fe:	c0 17       	cp	r28, r16
 300:	d1 07       	cpc	r29, r17
 302:	d1 f7       	brne	.-12     	; 0x2f8 <fill+0x18>
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	08 95       	ret

0000030e <prog_lamp>:

void prog_lamp(int state)
{
	if (PROG_FLICKER)
	{
		if(state) LED_PMODE_HIGH
 30e:	89 2b       	or	r24, r25
 310:	11 f0       	breq	.+4      	; 0x316 <prog_lamp+0x8>
 312:	44 9a       	sbi	0x08, 4	; 8
 314:	08 95       	ret
		else LED_PMODE_LOW
 316:	44 98       	cbi	0x08, 4	; 8
 318:	08 95       	ret

0000031a <spi_transaction>:
	}
}

uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d)
{
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	16 2f       	mov	r17, r22
 322:	d4 2f       	mov	r29, r20
 324:	c2 2f       	mov	r28, r18
  SPI_transfer(a);
 326:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <SPI_transfer>
  SPI_transfer(b);
 32a:	81 2f       	mov	r24, r17
 32c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <SPI_transfer>
  SPI_transfer(c);
 330:	8d 2f       	mov	r24, r29
 332:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <SPI_transfer>
  return SPI_transfer(d);
 336:	8c 2f       	mov	r24, r28
 338:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <SPI_transfer>
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	08 95       	ret

00000344 <empty_reply>:

void empty_reply(void)
{
  if (CRC_EOP == getch())
 344:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 348:	80 32       	cpi	r24, 0x20	; 32
 34a:	39 f4       	brne	.+14     	; 0x35a <empty_reply+0x16>
  {
	  uart_sendChar(STK_INSYNC);
 34c:	84 e1       	ldi	r24, 0x14	; 20
 34e:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
	  uart_sendChar(STK_OK);
 352:	80 e1       	ldi	r24, 0x10	; 16
 354:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
 358:	08 95       	ret
  }
  else
  {
    error++;
 35a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <error>
 35e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <error+0x1>
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <error+0x1>
 368:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <error>
    uart_sendChar(STK_NOSYNC);
 36c:	85 e1       	ldi	r24, 0x15	; 21
 36e:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
 372:	08 95       	ret

00000374 <breply>:
  }
}

void breply(uint8_t b)
{
 374:	cf 93       	push	r28
 376:	c8 2f       	mov	r28, r24
  if (CRC_EOP == getch())
 378:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 37c:	80 32       	cpi	r24, 0x20	; 32
 37e:	51 f4       	brne	.+20     	; 0x394 <breply+0x20>
  {
	  uart_sendChar(STK_INSYNC);
 380:	84 e1       	ldi	r24, 0x14	; 20
 382:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
	  uart_sendChar(b);
 386:	8c 2f       	mov	r24, r28
 388:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
	  uart_sendChar(STK_OK);
 38c:	80 e1       	ldi	r24, 0x10	; 16
 38e:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
 392:	0c c0       	rjmp	.+24     	; 0x3ac <breply+0x38>
  }
  else
  {
	  error++;
 394:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <error>
 398:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <error+0x1>
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <error+0x1>
 3a2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <error>
	  uart_sendChar(STK_NOSYNC);
 3a6:	85 e1       	ldi	r24, 0x15	; 21
 3a8:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
  }
}
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <get_version>:

void get_version(uint8_t c)
{
  switch (c) {
 3b0:	81 38       	cpi	r24, 0x81	; 129
 3b2:	69 f0       	breq	.+26     	; 0x3ce <get_version+0x1e>
 3b4:	18 f4       	brcc	.+6      	; 0x3bc <get_version+0xc>
 3b6:	80 38       	cpi	r24, 0x80	; 128
 3b8:	31 f0       	breq	.+12     	; 0x3c6 <get_version+0x16>
 3ba:	15 c0       	rjmp	.+42     	; 0x3e6 <get_version+0x36>
 3bc:	82 38       	cpi	r24, 0x82	; 130
 3be:	59 f0       	breq	.+22     	; 0x3d6 <get_version+0x26>
 3c0:	83 39       	cpi	r24, 0x93	; 147
 3c2:	69 f0       	breq	.+26     	; 0x3de <get_version+0x2e>
 3c4:	10 c0       	rjmp	.+32     	; 0x3e6 <get_version+0x36>
    case 0x80:
      breply(HWVER);
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	0e 94 ba 01 	call	0x374	; 0x374 <breply>
      break;
 3cc:	08 95       	ret
    case 0x81:
      breply(SWMAJ);
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 ba 01 	call	0x374	; 0x374 <breply>
      break;
 3d4:	08 95       	ret
    case 0x82:
      breply(SWMIN);
 3d6:	82 e1       	ldi	r24, 0x12	; 18
 3d8:	0e 94 ba 01 	call	0x374	; 0x374 <breply>
      break;
 3dc:	08 95       	ret
    case 0x93:
      breply('S'); // serial programmer
 3de:	83 e5       	ldi	r24, 0x53	; 83
 3e0:	0e 94 ba 01 	call	0x374	; 0x374 <breply>
      break;
 3e4:	08 95       	ret
    default:
      breply(0);
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 ba 01 	call	0x374	; 0x374 <breply>
 3ec:	08 95       	ret

000003ee <set_parameters>:
  }
}

void set_parameters() {
 3ee:	0f 93       	push	r16
 3f0:	1f 93       	push	r17
  // call this after reading parameter packet into buff[]
  param.devicecode = buff[0];
 3f2:	e2 e2       	ldi	r30, 0x22	; 34
 3f4:	f2 e0       	ldi	r31, 0x02	; 2
 3f6:	80 81       	ld	r24, Z
 3f8:	af e0       	ldi	r26, 0x0F	; 15
 3fa:	b1 e0       	ldi	r27, 0x01	; 1
 3fc:	8c 93       	st	X, r24
  param.revision   = buff[1];
 3fe:	91 81       	ldd	r25, Z+1	; 0x01
 400:	11 96       	adiw	r26, 0x01	; 1
 402:	9c 93       	st	X, r25
 404:	11 97       	sbiw	r26, 0x01	; 1
  param.progtype   = buff[2];
 406:	92 81       	ldd	r25, Z+2	; 0x02
 408:	12 96       	adiw	r26, 0x02	; 2
 40a:	9c 93       	st	X, r25
 40c:	12 97       	sbiw	r26, 0x02	; 2
  param.parmode    = buff[3];
 40e:	93 81       	ldd	r25, Z+3	; 0x03
 410:	13 96       	adiw	r26, 0x03	; 3
 412:	9c 93       	st	X, r25
 414:	13 97       	sbiw	r26, 0x03	; 3
  param.polling    = buff[4];
 416:	94 81       	ldd	r25, Z+4	; 0x04
 418:	14 96       	adiw	r26, 0x04	; 4
 41a:	9c 93       	st	X, r25
 41c:	14 97       	sbiw	r26, 0x04	; 4
  param.selftimed  = buff[5];
 41e:	95 81       	ldd	r25, Z+5	; 0x05
 420:	15 96       	adiw	r26, 0x05	; 5
 422:	9c 93       	st	X, r25
 424:	15 97       	sbiw	r26, 0x05	; 5
  param.lockbytes  = buff[6];
 426:	96 81       	ldd	r25, Z+6	; 0x06
 428:	16 96       	adiw	r26, 0x06	; 6
 42a:	9c 93       	st	X, r25
 42c:	16 97       	sbiw	r26, 0x06	; 6
  param.fusebytes  = buff[7];
 42e:	97 81       	ldd	r25, Z+7	; 0x07
 430:	17 96       	adiw	r26, 0x07	; 7
 432:	9c 93       	st	X, r25
 434:	17 97       	sbiw	r26, 0x07	; 7
  param.flashpoll  = buff[8];
 436:	90 85       	ldd	r25, Z+8	; 0x08
 438:	18 96       	adiw	r26, 0x08	; 8
 43a:	9c 93       	st	X, r25
 43c:	18 97       	sbiw	r26, 0x08	; 8
  // ignore buff[9] (= buff[8])
  // following are 16 bits (big endian)
  param.eeprompoll = beget16(&buff[10]);
 43e:	22 85       	ldd	r18, Z+10	; 0x0a
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	32 2f       	mov	r19, r18
 444:	22 27       	eor	r18, r18
 446:	93 85       	ldd	r25, Z+11	; 0x0b
 448:	29 0f       	add	r18, r25
 44a:	31 1d       	adc	r19, r1
 44c:	1a 96       	adiw	r26, 0x0a	; 10
 44e:	3c 93       	st	X, r19
 450:	2e 93       	st	-X, r18
 452:	19 97       	sbiw	r26, 0x09	; 9
  param.pagesize   = beget16(&buff[12]);
 454:	24 85       	ldd	r18, Z+12	; 0x0c
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	32 2f       	mov	r19, r18
 45a:	22 27       	eor	r18, r18
 45c:	95 85       	ldd	r25, Z+13	; 0x0d
 45e:	29 0f       	add	r18, r25
 460:	31 1d       	adc	r19, r1
 462:	1c 96       	adiw	r26, 0x0c	; 12
 464:	3c 93       	st	X, r19
 466:	2e 93       	st	-X, r18
 468:	1b 97       	sbiw	r26, 0x0b	; 11
  param.eepromsize = beget16(&buff[14]);
 46a:	26 85       	ldd	r18, Z+14	; 0x0e
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	32 2f       	mov	r19, r18
 470:	22 27       	eor	r18, r18
 472:	97 85       	ldd	r25, Z+15	; 0x0f
 474:	29 0f       	add	r18, r25
 476:	31 1d       	adc	r19, r1
 478:	1e 96       	adiw	r26, 0x0e	; 14
 47a:	3c 93       	st	X, r19
 47c:	2e 93       	st	-X, r18
 47e:	1d 97       	sbiw	r26, 0x0d	; 13

  // 32 bits flashsize (big endian)
  param.flashsize = buff[16] * 0x01000000
                    + buff[17] * 0x00010000
 480:	40 89       	ldd	r20, Z+16	; 0x10
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	76 2f       	mov	r23, r22
 48a:	65 2f       	mov	r22, r21
 48c:	54 2f       	mov	r21, r20
 48e:	44 27       	eor	r20, r20
 490:	91 89       	ldd	r25, Z+17	; 0x11
 492:	49 0f       	add	r20, r25
 494:	51 1d       	adc	r21, r1
 496:	61 1d       	adc	r22, r1
 498:	71 1d       	adc	r23, r1
 49a:	ba 01       	movw	r22, r20
 49c:	55 27       	eor	r21, r21
 49e:	44 27       	eor	r20, r20
                    + buff[18] * 0x00000100
 4a0:	02 89       	ldd	r16, Z+18	; 0x12
 4a2:	10 e0       	ldi	r17, 0x00	; 0
 4a4:	10 2f       	mov	r17, r16
 4a6:	00 27       	eor	r16, r16
 4a8:	01 2e       	mov	r0, r17
 4aa:	00 0c       	add	r0, r0
 4ac:	22 0b       	sbc	r18, r18
 4ae:	33 0b       	sbc	r19, r19
 4b0:	40 0f       	add	r20, r16
 4b2:	51 1f       	adc	r21, r17
 4b4:	62 1f       	adc	r22, r18
 4b6:	73 1f       	adc	r23, r19
                    + buff[19];
 4b8:	93 89       	ldd	r25, Z+19	; 0x13
 4ba:	49 0f       	add	r20, r25
 4bc:	51 1d       	adc	r21, r1
 4be:	61 1d       	adc	r22, r1
 4c0:	71 1d       	adc	r23, r1
  param.eeprompoll = beget16(&buff[10]);
  param.pagesize   = beget16(&buff[12]);
  param.eepromsize = beget16(&buff[14]);

  // 32 bits flashsize (big endian)
  param.flashsize = buff[16] * 0x01000000
 4c2:	1f 96       	adiw	r26, 0x0f	; 15
 4c4:	4d 93       	st	X+, r20
 4c6:	5d 93       	st	X+, r21
 4c8:	6d 93       	st	X+, r22
 4ca:	7c 93       	st	X, r23
 4cc:	52 97       	sbiw	r26, 0x12	; 18
                    + buff[17] * 0x00010000
                    + buff[18] * 0x00000100
                    + buff[19];

  // AVR devices have active low reset, AT89Sx are active high
  rst_active_high = (param.devicecode >= 0xe0);
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	80 3e       	cpi	r24, 0xE0	; 224
 4d2:	08 f4       	brcc	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <rst_active_high>
}
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	08 95       	ret

000004e0 <start_pmode>:

  // SPI.begin() will configure SS as output, so SPI master mode is selected.
  // We have defined RESET as pin 10, which for many Arduinos is not the SS pin.
  // So we have to configure RESET as output here,
  // (reset_target() first sets the correct level)
  reset_target(1);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 48 01 	call	0x290	; 0x290 <reset_target>
  RESET_DDR |= (1 << RESET_PIN);
 4e6:	39 9a       	sbi	0x07, 1	; 7

  spi_init(3, 0);
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	0e 94 be 05 	call	0xb7c	; 0xb7c <spi_init>
 4f0:	2f ef       	ldi	r18, 0xFF	; 255
 4f2:	89 ef       	ldi	r24, 0xF9	; 249
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	21 50       	subi	r18, 0x01	; 1
 4f8:	80 40       	sbci	r24, 0x00	; 0
 4fa:	90 40       	sbci	r25, 0x00	; 0
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <start_pmode+0x16>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <start_pmode+0x20>
 500:	00 00       	nop
  // See AVR datasheets, chapter "SERIAL_PRG Programming Algorithm":

  // Pulse RESET after PIN_SCK is low:
  //digitalWrite(PIN_SCK, LOW);
  _delay_ms(20); // discharge PIN_SCK, value arbitrarily chosen
  reset_target(0);
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 48 01 	call	0x290	; 0x290 <reset_target>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 508:	8f e8       	ldi	r24, 0x8F	; 143
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <start_pmode+0x2c>
 510:	00 c0       	rjmp	.+0      	; 0x512 <start_pmode+0x32>
 512:	00 00       	nop
  // Pulse must be minimum 2 target CPU clock cycles so 100 usec is ok for CPU
  // speeds above 20 KHz
  _delay_us(100);
  reset_target(1);
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 48 01 	call	0x290	; 0x290 <reset_target>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51a:	9f ef       	ldi	r25, 0xFF	; 255
 51c:	20 e7       	ldi	r18, 0x70	; 112
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	91 50       	subi	r25, 0x01	; 1
 522:	20 40       	sbci	r18, 0x00	; 0
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <start_pmode+0x40>
 528:	00 c0       	rjmp	.+0      	; 0x52a <start_pmode+0x4a>
 52a:	00 00       	nop

  // Send the enable programming command:
  _delay_ms(50); // datasheet: must be > 20 msec
  spi_transaction(0xAC, 0x53, 0x00, 0x00);
 52c:	20 e0       	ldi	r18, 0x00	; 0
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	63 e5       	ldi	r22, 0x53	; 83
 532:	8c ea       	ldi	r24, 0xAC	; 172
 534:	0e 94 8d 01 	call	0x31a	; 0x31a <spi_transaction>
  pmode = 1;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <pmode+0x1>
 540:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <pmode>
 544:	08 95       	ret

00000546 <end_pmode>:
}

void end_pmode() {
	spi_deinit();
 546:	0e 94 df 05 	call	0xbbe	; 0xbbe <spi_deinit>
	// We're about to take the target out of reset so configure SPI pins as input
	reset_target(1);
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	0e 94 48 01 	call	0x290	; 0x290 <reset_target>
	RESET_DDR &= ~(1 << RESET_PIN);
 550:	39 98       	cbi	0x07, 1	; 7
	pmode = 0;
 552:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pmode+0x1>
 556:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <pmode>
 55a:	08 95       	ret

0000055c <universal>:

void universal()
{
  uint8_t ch;

  fill(4);
 55c:	84 e0       	ldi	r24, 0x04	; 4
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 70 01 	call	0x2e0	; 0x2e0 <fill>
  ch = spi_transaction(buff[0], buff[1], buff[2], buff[3]);
 564:	e2 e2       	ldi	r30, 0x22	; 34
 566:	f2 e0       	ldi	r31, 0x02	; 2
 568:	23 81       	ldd	r18, Z+3	; 0x03
 56a:	42 81       	ldd	r20, Z+2	; 0x02
 56c:	61 81       	ldd	r22, Z+1	; 0x01
 56e:	80 81       	ld	r24, Z
 570:	0e 94 8d 01 	call	0x31a	; 0x31a <spi_transaction>
  breply(ch);
 574:	0e 94 ba 01 	call	0x374	; 0x374 <breply>
 578:	08 95       	ret

0000057a <flash>:
}

void flash(uint8_t hilo, unsigned int addr, uint8_t data)
{
 57a:	24 2f       	mov	r18, r20
  spi_transaction(0x40 + 8 * hilo,
 57c:	88 0f       	add	r24, r24
 57e:	88 0f       	add	r24, r24
 580:	88 0f       	add	r24, r24
 582:	46 2f       	mov	r20, r22
 584:	67 2f       	mov	r22, r23
 586:	80 5c       	subi	r24, 0xC0	; 192
 588:	0e 94 8d 01 	call	0x31a	; 0x31a <spi_transaction>
 58c:	08 95       	ret

0000058e <commit>:
                  addr & 0xFF,
                  data);
}

void commit(unsigned int addr)
{
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	d8 2f       	mov	r29, r24
 594:	c9 2f       	mov	r28, r25
  if (PROG_FLICKER)
  {
    prog_lamp(0);
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 87 01 	call	0x30e	; 0x30e <prog_lamp>
  }
  spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
 59e:	20 e0       	ldi	r18, 0x00	; 0
 5a0:	4d 2f       	mov	r20, r29
 5a2:	6c 2f       	mov	r22, r28
 5a4:	8c e4       	ldi	r24, 0x4C	; 76
 5a6:	0e 94 8d 01 	call	0x31a	; 0x31a <spi_transaction>
 5aa:	8e e1       	ldi	r24, 0x1E	; 30
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	ef e9       	ldi	r30, 0x9F	; 159
 5b0:	ff e0       	ldi	r31, 0x0F	; 15
 5b2:	31 97       	sbiw	r30, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <commit+0x24>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <commit+0x2a>
 5b8:	00 00       	nop
 5ba:	01 97       	sbiw	r24, 0x01	; 1
  if (PROG_FLICKER)
  {
    for(int i=0; i<PTIME; i++) _delay_ms(1);
 5bc:	c1 f7       	brne	.-16     	; 0x5ae <commit+0x20>
    prog_lamp(1);
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 87 01 	call	0x30e	; 0x30e <prog_lamp>
  }
}
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <current_page>:

unsigned int current_page(void)
{
  if (param.pagesize == 32)
 5cc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <param+0xb>
 5d0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <param+0xc>
 5d4:	80 32       	cpi	r24, 0x20	; 32
 5d6:	91 05       	cpc	r25, r1
 5d8:	31 f4       	brne	.+12     	; 0x5e6 <current_page+0x1a>
  {
    return here & 0xFFFFFFF0;
 5da:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <here>
 5de:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <here+0x1>
 5e2:	80 7f       	andi	r24, 0xF0	; 240
 5e4:	08 95       	ret
  }
  if (param.pagesize == 64)
 5e6:	80 34       	cpi	r24, 0x40	; 64
 5e8:	91 05       	cpc	r25, r1
 5ea:	31 f4       	brne	.+12     	; 0x5f8 <current_page+0x2c>
  {
    return here & 0xFFFFFFE0;
 5ec:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <here>
 5f0:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <here+0x1>
 5f4:	80 7e       	andi	r24, 0xE0	; 224
 5f6:	08 95       	ret
  }
  if (param.pagesize == 128)
 5f8:	80 38       	cpi	r24, 0x80	; 128
 5fa:	91 05       	cpc	r25, r1
 5fc:	31 f4       	brne	.+12     	; 0x60a <current_page+0x3e>
  {
    return here & 0xFFFFFFC0;
 5fe:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <here>
 602:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <here+0x1>
 606:	80 7c       	andi	r24, 0xC0	; 192
 608:	08 95       	ret
  }
  if (param.pagesize == 256)
 60a:	81 15       	cp	r24, r1
 60c:	91 40       	sbci	r25, 0x01	; 1
 60e:	31 f4       	brne	.+12     	; 0x61c <current_page+0x50>
  {
    return here & 0xFFFFFF80;
 610:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <here>
 614:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <here+0x1>
 618:	80 78       	andi	r24, 0x80	; 128
 61a:	08 95       	ret
  }
  return here;
 61c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <here>
 620:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <here+0x1>
}
 624:	08 95       	ret

00000626 <write_flash_pages>:
	  uart_sendChar(STK_NOSYNC);
  }
}

uint8_t write_flash_pages(int length)
{
 626:	ef 92       	push	r14
 628:	ff 92       	push	r15
 62a:	0f 93       	push	r16
 62c:	1f 93       	push	r17
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	7c 01       	movw	r14, r24
  int x = 0;
  unsigned int page = current_page();
 634:	0e 94 e6 02 	call	0x5cc	; 0x5cc <current_page>
 638:	8c 01       	movw	r16, r24
  while (x < length)
 63a:	1e 14       	cp	r1, r14
 63c:	1f 04       	cpc	r1, r15
 63e:	8c f5       	brge	.+98     	; 0x6a2 <write_flash_pages+0x7c>
 640:	c0 e0       	ldi	r28, 0x00	; 0
 642:	d0 e0       	ldi	r29, 0x00	; 0
  {
    if (page != current_page())
 644:	0e 94 e6 02 	call	0x5cc	; 0x5cc <current_page>
 648:	80 17       	cp	r24, r16
 64a:	91 07       	cpc	r25, r17
 64c:	31 f0       	breq	.+12     	; 0x65a <write_flash_pages+0x34>
    {
      commit(page);
 64e:	c8 01       	movw	r24, r16
 650:	0e 94 c7 02 	call	0x58e	; 0x58e <commit>
      page = current_page();
 654:	0e 94 e6 02 	call	0x5cc	; 0x5cc <current_page>
 658:	8c 01       	movw	r16, r24
 65a:	fe 01       	movw	r30, r28
 65c:	ee 5d       	subi	r30, 0xDE	; 222
 65e:	fd 4f       	sbci	r31, 0xFD	; 253
    }
    flash(0, here, buff[x++]);
 660:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <here>
 664:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <here+0x1>
 668:	40 81       	ld	r20, Z
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	0e 94 bd 02 	call	0x57a	; 0x57a <flash>
    flash(1, here, buff[x++]);
 670:	22 96       	adiw	r28, 0x02	; 2
 672:	fe 01       	movw	r30, r28
 674:	ef 5d       	subi	r30, 0xDF	; 223
 676:	fd 4f       	sbci	r31, 0xFD	; 253
 678:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <here>
 67c:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <here+0x1>
 680:	40 81       	ld	r20, Z
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	0e 94 bd 02 	call	0x57a	; 0x57a <flash>
    here++;
 688:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <here>
 68c:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <here+0x1>
 690:	2f 5f       	subi	r18, 0xFF	; 255
 692:	3f 4f       	sbci	r19, 0xFF	; 255
 694:	30 93 23 03 	sts	0x0323, r19	; 0x800323 <here+0x1>
 698:	20 93 22 03 	sts	0x0322, r18	; 0x800322 <here>

uint8_t write_flash_pages(int length)
{
  int x = 0;
  unsigned int page = current_page();
  while (x < length)
 69c:	ce 15       	cp	r28, r14
 69e:	df 05       	cpc	r29, r15
 6a0:	8c f2       	brlt	.-94     	; 0x644 <write_flash_pages+0x1e>
    flash(0, here, buff[x++]);
    flash(1, here, buff[x++]);
    here++;
  }

  commit(page);
 6a2:	c8 01       	movw	r24, r16
 6a4:	0e 94 c7 02 	call	0x58e	; 0x58e <commit>

  return STK_OK;
}
 6a8:	80 e1       	ldi	r24, 0x10	; 16
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ff 90       	pop	r15
 6b4:	ef 90       	pop	r14
 6b6:	08 95       	ret

000006b8 <write_flash>:
  }
  return here;
}

void write_flash(int length)
{
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	ec 01       	movw	r28, r24
  fill(length);
 6be:	0e 94 70 01 	call	0x2e0	; 0x2e0 <fill>
  if (CRC_EOP == getch())
 6c2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 6c6:	80 32       	cpi	r24, 0x20	; 32
 6c8:	49 f4       	brne	.+18     	; 0x6dc <write_flash+0x24>
  {
	  uart_sendChar(STK_INSYNC);
 6ca:	84 e1       	ldi	r24, 0x14	; 20
 6cc:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
	  uart_sendChar(write_flash_pages(length));
 6d0:	ce 01       	movw	r24, r28
 6d2:	0e 94 13 03 	call	0x626	; 0x626 <write_flash_pages>
 6d6:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
 6da:	0c c0       	rjmp	.+24     	; 0x6f4 <write_flash+0x3c>
  }
  else
  {
	  error++;
 6dc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <error>
 6e0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <error+0x1>
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <error+0x1>
 6ea:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <error>
	  uart_sendChar(STK_NOSYNC);
 6ee:	85 e1       	ldi	r24, 0x15	; 21
 6f0:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
  }
}
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <write_eeprom_chunk>:
  write_eeprom_chunk(start, remaining);
  return STK_OK;
}

uint8_t write_eeprom_chunk(unsigned int start, unsigned int length)
{
 6fa:	ef 92       	push	r14
 6fc:	ff 92       	push	r15
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	ec 01       	movw	r28, r24
 708:	7b 01       	movw	r14, r22
  // this writes byte-by-byte, page writing may be faster (4 bytes at a time)
  fill(length);
 70a:	cb 01       	movw	r24, r22
 70c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <fill>
  prog_lamp(0);
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 87 01 	call	0x30e	; 0x30e <prog_lamp>
  for (unsigned int x = 0; x < length; x++)
 718:	e1 14       	cp	r14, r1
 71a:	f1 04       	cpc	r15, r1
 71c:	99 f0       	breq	.+38     	; 0x744 <write_eeprom_chunk+0x4a>
 71e:	02 e2       	ldi	r16, 0x22	; 34
 720:	12 e0       	ldi	r17, 0x02	; 2
 722:	ec 0e       	add	r14, r28
 724:	fd 1e       	adc	r15, r29
  {
    unsigned int addr = start + x;
    spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, buff[x]);
 726:	f8 01       	movw	r30, r16
 728:	21 91       	ld	r18, Z+
 72a:	8f 01       	movw	r16, r30
 72c:	4c 2f       	mov	r20, r28
 72e:	6d 2f       	mov	r22, r29
 730:	80 ec       	ldi	r24, 0xC0	; 192
 732:	0e 94 8d 01 	call	0x31a	; 0x31a <spi_transaction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 736:	f0 ef       	ldi	r31, 0xF0	; 240
 738:	fa 95       	dec	r31
 73a:	f1 f7       	brne	.-4      	; 0x738 <write_eeprom_chunk+0x3e>
 73c:	21 96       	adiw	r28, 0x01	; 1
uint8_t write_eeprom_chunk(unsigned int start, unsigned int length)
{
  // this writes byte-by-byte, page writing may be faster (4 bytes at a time)
  fill(length);
  prog_lamp(0);
  for (unsigned int x = 0; x < length; x++)
 73e:	ce 15       	cp	r28, r14
 740:	df 05       	cpc	r29, r15
 742:	89 f7       	brne	.-30     	; 0x726 <write_eeprom_chunk+0x2c>
  {
    unsigned int addr = start + x;
    spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, buff[x]);
    _delay_us(45);
  }
  prog_lamp(1);
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 87 01 	call	0x30e	; 0x30e <prog_lamp>
  return STK_OK;
}
 74c:	80 e1       	ldi	r24, 0x10	; 16
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	ff 90       	pop	r15
 758:	ef 90       	pop	r14
 75a:	08 95       	ret

0000075c <write_eeprom>:

  return STK_OK;
}

uint8_t write_eeprom(unsigned int length)
{
 75c:	cf 92       	push	r12
 75e:	df 92       	push	r13
 760:	ef 92       	push	r14
 762:	ff 92       	push	r15
 764:	0f 93       	push	r16
 766:	1f 93       	push	r17
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	7c 01       	movw	r14, r24
  // here is a word address, get the byte address
  unsigned int start = here * 2;
 76e:	c0 90 22 03 	lds	r12, 0x0322	; 0x800322 <here>
 772:	d0 90 23 03 	lds	r13, 0x0323	; 0x800323 <here+0x1>
  unsigned int remaining = length;
  if (length > param.eepromsize)
 776:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <param+0xd>
 77a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <param+0xe>
 77e:	8e 15       	cp	r24, r14
 780:	9f 05       	cpc	r25, r15
 782:	38 f0       	brcs	.+14     	; 0x792 <write_eeprom+0x36>
}

uint8_t write_eeprom(unsigned int length)
{
  // here is a word address, get the byte address
  unsigned int start = here * 2;
 784:	cc 0c       	add	r12, r12
 786:	dd 1c       	adc	r13, r13
  if (length > param.eepromsize)
  {
    error++;
    return STK_FAILED;
  }
  while (remaining > EECHUNK)
 788:	81 e2       	ldi	r24, 0x21	; 33
 78a:	e8 16       	cp	r14, r24
 78c:	f1 04       	cpc	r15, r1
 78e:	60 f4       	brcc	.+24     	; 0x7a8 <write_eeprom+0x4c>
 790:	3c c0       	rjmp	.+120    	; 0x80a <write_eeprom+0xae>
  // here is a word address, get the byte address
  unsigned int start = here * 2;
  unsigned int remaining = length;
  if (length > param.eepromsize)
  {
    error++;
 792:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <error>
 796:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <error+0x1>
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <error+0x1>
 7a0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <error>
    return STK_FAILED;
 7a4:	81 e1       	ldi	r24, 0x11	; 17
 7a6:	36 c0       	rjmp	.+108    	; 0x814 <write_eeprom+0xb8>
  }
  while (remaining > EECHUNK)
 7a8:	87 01       	movw	r16, r14
 7aa:	e6 01       	movw	r28, r12
  {
    write_eeprom_chunk(start, EECHUNK);
 7ac:	60 e2       	ldi	r22, 0x20	; 32
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	ce 01       	movw	r24, r28
 7b2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <write_eeprom_chunk>
    start += EECHUNK;
 7b6:	a0 96       	adiw	r28, 0x20	; 32
    remaining -= EECHUNK;
 7b8:	00 52       	subi	r16, 0x20	; 32
 7ba:	11 09       	sbc	r17, r1
  if (length > param.eepromsize)
  {
    error++;
    return STK_FAILED;
  }
  while (remaining > EECHUNK)
 7bc:	01 32       	cpi	r16, 0x21	; 33
 7be:	11 05       	cpc	r17, r1
 7c0:	a8 f7       	brcc	.-22     	; 0x7ac <write_eeprom+0x50>
 7c2:	97 01       	movw	r18, r14
 7c4:	21 52       	subi	r18, 0x21	; 33
 7c6:	31 09       	sbc	r19, r1
 7c8:	36 95       	lsr	r19
 7ca:	27 95       	ror	r18
 7cc:	32 95       	swap	r19
 7ce:	22 95       	swap	r18
 7d0:	2f 70       	andi	r18, 0x0F	; 15
 7d2:	23 27       	eor	r18, r19
 7d4:	3f 70       	andi	r19, 0x0F	; 15
 7d6:	23 27       	eor	r18, r19
 7d8:	80 e2       	ldi	r24, 0x20	; 32
 7da:	c8 0e       	add	r12, r24
 7dc:	d1 1c       	adc	r13, r1
 7de:	c9 01       	movw	r24, r18
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	82 95       	swap	r24
 7e6:	92 95       	swap	r25
 7e8:	90 7f       	andi	r25, 0xF0	; 240
 7ea:	98 27       	eor	r25, r24
 7ec:	80 7f       	andi	r24, 0xF0	; 240
 7ee:	98 27       	eor	r25, r24
 7f0:	c8 0e       	add	r12, r24
 7f2:	d9 1e       	adc	r13, r25
 7f4:	80 e2       	ldi	r24, 0x20	; 32
 7f6:	e8 1a       	sub	r14, r24
 7f8:	f1 08       	sbc	r15, r1
 7fa:	40 ee       	ldi	r20, 0xE0	; 224
 7fc:	42 03       	mulsu	r20, r18
 7fe:	c0 01       	movw	r24, r0
 800:	43 9f       	mul	r20, r19
 802:	90 0d       	add	r25, r0
 804:	11 24       	eor	r1, r1
 806:	e8 0e       	add	r14, r24
 808:	f9 1e       	adc	r15, r25
  {
    write_eeprom_chunk(start, EECHUNK);
    start += EECHUNK;
    remaining -= EECHUNK;
  }
  write_eeprom_chunk(start, remaining);
 80a:	b7 01       	movw	r22, r14
 80c:	c6 01       	movw	r24, r12
 80e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <write_eeprom_chunk>
  return STK_OK;
 812:	80 e1       	ldi	r24, 0x10	; 16
}
 814:	df 91       	pop	r29
 816:	cf 91       	pop	r28
 818:	1f 91       	pop	r17
 81a:	0f 91       	pop	r16
 81c:	ff 90       	pop	r15
 81e:	ef 90       	pop	r14
 820:	df 90       	pop	r13
 822:	cf 90       	pop	r12
 824:	08 95       	ret

00000826 <program_page>:
  prog_lamp(1);
  return STK_OK;
}

void program_page()
{
 826:	cf 93       	push	r28
 828:	df 93       	push	r29
  char result = (char) STK_FAILED;
  unsigned int length = 256 * getch();
 82a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 82e:	c8 2f       	mov	r28, r24
 830:	d0 e0       	ldi	r29, 0x00	; 0
 832:	dc 2f       	mov	r29, r28
 834:	cc 27       	eor	r28, r28
  length += getch();
 836:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 83a:	c8 0f       	add	r28, r24
 83c:	d1 1d       	adc	r29, r1
  char memtype = getch();
 83e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
  // flash memory @here, (length) bytes
  if (memtype == 'F')
 842:	86 34       	cpi	r24, 0x46	; 70
 844:	21 f4       	brne	.+8      	; 0x84e <program_page+0x28>
  {
    write_flash(length);
 846:	ce 01       	movw	r24, r28
 848:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <write_flash>
    return;
 84c:	21 c0       	rjmp	.+66     	; 0x890 <program_page+0x6a>
  }
  if (memtype == 'E')
 84e:	85 34       	cpi	r24, 0x45	; 69
 850:	e1 f4       	brne	.+56     	; 0x88a <program_page+0x64>
  {
    result = (char)write_eeprom(length);
 852:	ce 01       	movw	r24, r28
 854:	0e 94 ae 03 	call	0x75c	; 0x75c <write_eeprom>
 858:	c8 2f       	mov	r28, r24
    if (CRC_EOP == getch())
 85a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 85e:	80 32       	cpi	r24, 0x20	; 32
 860:	39 f4       	brne	.+14     	; 0x870 <program_page+0x4a>
    {
    	uart_sendChar(STK_INSYNC);
 862:	84 e1       	ldi	r24, 0x14	; 20
 864:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
    	uart_sendChar(result);
 868:	8c 2f       	mov	r24, r28
 86a:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
 86e:	10 c0       	rjmp	.+32     	; 0x890 <program_page+0x6a>
    }
    else
    {
      error++;
 870:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <error>
 874:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <error+0x1>
 878:	01 96       	adiw	r24, 0x01	; 1
 87a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <error+0x1>
 87e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <error>
      uart_sendChar(STK_NOSYNC);
 882:	85 e1       	ldi	r24, 0x15	; 21
 884:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
 888:	03 c0       	rjmp	.+6      	; 0x890 <program_page+0x6a>
    }
    return;
  }
  uart_sendChar(STK_FAILED);
 88a:	81 e1       	ldi	r24, 0x11	; 17
 88c:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
  return;
}
 890:	df 91       	pop	r29
 892:	cf 91       	pop	r28
 894:	08 95       	ret

00000896 <flash_read>:

uint8_t flash_read(uint8_t hilo, unsigned int addr)
{
 896:	46 2f       	mov	r20, r22
  return spi_transaction(0x20 + hilo * 8,
 898:	88 0f       	add	r24, r24
 89a:	88 0f       	add	r24, r24
 89c:	88 0f       	add	r24, r24
 89e:	20 e0       	ldi	r18, 0x00	; 0
 8a0:	67 2f       	mov	r22, r23
 8a2:	80 5e       	subi	r24, 0xE0	; 224
 8a4:	0e 94 8d 01 	call	0x31a	; 0x31a <spi_transaction>
                         (addr >> 8) & 0xFF,
                         addr & 0xFF,
                         0);
}
 8a8:	08 95       	ret

000008aa <flash_read_page>:

char flash_read_page(int length)
{
 8aa:	0f 93       	push	r16
 8ac:	1f 93       	push	r17
 8ae:	cf 93       	push	r28
 8b0:	df 93       	push	r29
  for (int x = 0; x < length; x += 2)
 8b2:	18 16       	cp	r1, r24
 8b4:	19 06       	cpc	r1, r25
 8b6:	1c f5       	brge	.+70     	; 0x8fe <flash_read_page+0x54>
 8b8:	8c 01       	movw	r16, r24
 8ba:	c0 e0       	ldi	r28, 0x00	; 0
 8bc:	d0 e0       	ldi	r29, 0x00	; 0
  {
    uint8_t low = flash_read(0, here);
 8be:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <here>
 8c2:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <here+0x1>
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	0e 94 4b 04 	call	0x896	; 0x896 <flash_read>
    uart_sendChar(low);
 8cc:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
    uint8_t high = flash_read(1, here);
 8d0:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <here>
 8d4:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <here+0x1>
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	0e 94 4b 04 	call	0x896	; 0x896 <flash_read>
    uart_sendChar(high);
 8de:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
    here++;
 8e2:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <here>
 8e6:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <here+0x1>
 8ea:	2f 5f       	subi	r18, 0xFF	; 255
 8ec:	3f 4f       	sbci	r19, 0xFF	; 255
 8ee:	30 93 23 03 	sts	0x0323, r19	; 0x800323 <here+0x1>
 8f2:	20 93 22 03 	sts	0x0322, r18	; 0x800322 <here>
                         0);
}

char flash_read_page(int length)
{
  for (int x = 0; x < length; x += 2)
 8f6:	22 96       	adiw	r28, 0x02	; 2
 8f8:	c0 17       	cp	r28, r16
 8fa:	d1 07       	cpc	r29, r17
 8fc:	04 f3       	brlt	.-64     	; 0x8be <flash_read_page+0x14>
    uint8_t high = flash_read(1, here);
    uart_sendChar(high);
    here++;
  }
  return STK_OK;
}
 8fe:	80 e1       	ldi	r24, 0x10	; 16
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	1f 91       	pop	r17
 906:	0f 91       	pop	r16
 908:	08 95       	ret

0000090a <eeprom_read_page>:

char eeprom_read_page(int length)
{
 90a:	0f 93       	push	r16
 90c:	1f 93       	push	r17
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
  // here again we have a word address
  int start = here * 2;
 912:	c0 91 22 03 	lds	r28, 0x0322	; 0x800322 <here>
 916:	d0 91 23 03 	lds	r29, 0x0323	; 0x800323 <here+0x1>
 91a:	cc 0f       	add	r28, r28
 91c:	dd 1f       	adc	r29, r29
  for (int x = 0; x < length; x++)
 91e:	18 16       	cp	r1, r24
 920:	19 06       	cpc	r1, r25
 922:	7c f4       	brge	.+30     	; 0x942 <eeprom_read_page+0x38>
 924:	8c 01       	movw	r16, r24
 926:	0c 0f       	add	r16, r28
 928:	1d 1f       	adc	r17, r29
  {
    int addr = start + x;
    uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
 92a:	2f ef       	ldi	r18, 0xFF	; 255
 92c:	4c 2f       	mov	r20, r28
 92e:	6d 2f       	mov	r22, r29
 930:	80 ea       	ldi	r24, 0xA0	; 160
 932:	0e 94 8d 01 	call	0x31a	; 0x31a <spi_transaction>
    uart_sendChar(ee);
 936:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
 93a:	21 96       	adiw	r28, 0x01	; 1

char eeprom_read_page(int length)
{
  // here again we have a word address
  int start = here * 2;
  for (int x = 0; x < length; x++)
 93c:	c0 17       	cp	r28, r16
 93e:	d1 07       	cpc	r29, r17
 940:	a1 f7       	brne	.-24     	; 0x92a <eeprom_read_page+0x20>
    int addr = start + x;
    uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
    uart_sendChar(ee);
  }
  return STK_OK;
}
 942:	80 e1       	ldi	r24, 0x10	; 16
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	1f 91       	pop	r17
 94a:	0f 91       	pop	r16
 94c:	08 95       	ret

0000094e <read_page>:

void read_page()
{
 94e:	1f 93       	push	r17
 950:	cf 93       	push	r28
 952:	df 93       	push	r29
  char result = (char)STK_FAILED;
  int length = 256 * getch();
 954:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 958:	c8 2f       	mov	r28, r24
  length += getch();
 95a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 95e:	d8 2f       	mov	r29, r24
  char memtype = getch();
 960:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 964:	18 2f       	mov	r17, r24
  if (CRC_EOP != getch())
 966:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 96a:	80 32       	cpi	r24, 0x20	; 32
 96c:	69 f0       	breq	.+26     	; 0x988 <read_page+0x3a>
  {
    error++;
 96e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <error>
 972:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <error+0x1>
 976:	01 96       	adiw	r24, 0x01	; 1
 978:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <error+0x1>
 97c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <error>
    uart_sendChar(STK_NOSYNC);
 980:	85 e1       	ldi	r24, 0x15	; 21
 982:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
    return;
 986:	1a c0       	rjmp	.+52     	; 0x9bc <read_page+0x6e>
}

void read_page()
{
  char result = (char)STK_FAILED;
  int length = 256 * getch();
 988:	2c 2f       	mov	r18, r28
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	32 2f       	mov	r19, r18
 98e:	22 27       	eor	r18, r18
  length += getch();
 990:	c9 01       	movw	r24, r18
 992:	8d 0f       	add	r24, r29
 994:	91 1d       	adc	r25, r1
 996:	ec 01       	movw	r28, r24
  {
    error++;
    uart_sendChar(STK_NOSYNC);
    return;
  }
  uart_sendChar(STK_INSYNC);
 998:	84 e1       	ldi	r24, 0x14	; 20
 99a:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
  if (memtype == 'F') result = flash_read_page(length);
 99e:	16 34       	cpi	r17, 0x46	; 70
 9a0:	21 f4       	brne	.+8      	; 0x9aa <read_page+0x5c>
 9a2:	ce 01       	movw	r24, r28
 9a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <flash_read_page>
 9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <read_page+0x6a>
  if (memtype == 'E') result = eeprom_read_page(length);
 9aa:	15 34       	cpi	r17, 0x45	; 69
 9ac:	21 f4       	brne	.+8      	; 0x9b6 <read_page+0x68>
 9ae:	ce 01       	movw	r24, r28
 9b0:	0e 94 85 04 	call	0x90a	; 0x90a <eeprom_read_page>
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <read_page+0x6a>
  return STK_OK;
}

void read_page()
{
  char result = (char)STK_FAILED;
 9b6:	81 e1       	ldi	r24, 0x11	; 17
    return;
  }
  uart_sendChar(STK_INSYNC);
  if (memtype == 'F') result = flash_read_page(length);
  if (memtype == 'E') result = eeprom_read_page(length);
  uart_sendChar(result);
 9b8:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
}
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	08 95       	ret

000009c4 <read_signature>:

void read_signature(void)
{
  if (CRC_EOP != getch())
 9c4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 9c8:	80 32       	cpi	r24, 0x20	; 32
 9ca:	69 f0       	breq	.+26     	; 0x9e6 <read_signature+0x22>
  {
    error++;
 9cc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <error>
 9d0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <error+0x1>
 9d4:	01 96       	adiw	r24, 0x01	; 1
 9d6:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <error+0x1>
 9da:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <error>
    uart_sendChar(STK_NOSYNC);
 9de:	85 e1       	ldi	r24, 0x15	; 21
 9e0:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
    return;
 9e4:	08 95       	ret
  }
  uart_sendChar(STK_INSYNC);
 9e6:	84 e1       	ldi	r24, 0x14	; 20
 9e8:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
  uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
 9ec:	20 e0       	ldi	r18, 0x00	; 0
 9ee:	40 e0       	ldi	r20, 0x00	; 0
 9f0:	60 e0       	ldi	r22, 0x00	; 0
 9f2:	80 e3       	ldi	r24, 0x30	; 48
 9f4:	0e 94 8d 01 	call	0x31a	; 0x31a <spi_transaction>
  uart_sendChar(high);
 9f8:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
  uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
 9fc:	20 e0       	ldi	r18, 0x00	; 0
 9fe:	41 e0       	ldi	r20, 0x01	; 1
 a00:	60 e0       	ldi	r22, 0x00	; 0
 a02:	80 e3       	ldi	r24, 0x30	; 48
 a04:	0e 94 8d 01 	call	0x31a	; 0x31a <spi_transaction>
  uart_sendChar(middle);
 a08:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
  uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
 a0c:	20 e0       	ldi	r18, 0x00	; 0
 a0e:	42 e0       	ldi	r20, 0x02	; 2
 a10:	60 e0       	ldi	r22, 0x00	; 0
 a12:	80 e3       	ldi	r24, 0x30	; 48
 a14:	0e 94 8d 01 	call	0x31a	; 0x31a <spi_transaction>
  uart_sendChar(low);
 a18:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
  uart_sendChar(STK_OK);
 a1c:	80 e1       	ldi	r24, 0x10	; 16
 a1e:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
 a22:	08 95       	ret

00000a24 <avrisp>:



void avrisp(void)
{
  uint8_t ch = getch();
 a24:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
  switch (ch)
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	fc 01       	movw	r30, r24
 a2c:	b0 97       	sbiw	r30, 0x20	; 32
 a2e:	e6 35       	cpi	r30, 0x56	; 86
 a30:	f1 05       	cpc	r31, r1
 a32:	08 f0       	brcs	.+2      	; 0xa36 <avrisp+0x12>
 a34:	8e c0       	rjmp	.+284    	; 0xb52 <avrisp+0x12e>
 a36:	ec 5c       	subi	r30, 0xCC	; 204
 a38:	ff 4f       	sbci	r31, 0xFF	; 255
 a3a:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__tablejump2__>
  {
    case '0': // signon
    {
      error = 0;
 a3e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <error+0x1>
 a42:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <error>
      empty_reply();
 a46:	0e 94 a2 01 	call	0x344	; 0x344 <empty_reply>
      break;
 a4a:	08 95       	ret
    }
    case '1':
    {
      if (getch() == CRC_EOP)
 a4c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 a50:	80 32       	cpi	r24, 0x20	; 32
 a52:	59 f4       	brne	.+22     	; 0xa6a <avrisp+0x46>
      {
    	  uart_sendChar(STK_INSYNC);
 a54:	84 e1       	ldi	r24, 0x14	; 20
 a56:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
    	  uart_sendString("AVR ISP");
 a5a:	80 e0       	ldi	r24, 0x00	; 0
 a5c:	91 e0       	ldi	r25, 0x01	; 1
 a5e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <uart_sendString>
    	  uart_sendChar(STK_OK);
 a62:	80 e1       	ldi	r24, 0x10	; 16
 a64:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
 a68:	08 95       	ret
      }
      else
      {
        error++;
 a6a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <error>
 a6e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <error+0x1>
 a72:	01 96       	adiw	r24, 0x01	; 1
 a74:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <error+0x1>
 a78:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <error>
        uart_sendChar(STK_NOSYNC);
 a7c:	85 e1       	ldi	r24, 0x15	; 21
 a7e:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
 a82:	08 95       	ret
      }
      break;
    }
    case 'A':
    {
      get_version(getch());
 a84:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 a88:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <get_version>
      break;
 a8c:	08 95       	ret
    }
    case 'B':
    {
      fill(20);
 a8e:	84 e1       	ldi	r24, 0x14	; 20
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 70 01 	call	0x2e0	; 0x2e0 <fill>
      set_parameters();
 a96:	0e 94 f7 01 	call	0x3ee	; 0x3ee <set_parameters>
      empty_reply();
 a9a:	0e 94 a2 01 	call	0x344	; 0x344 <empty_reply>
      break;
 a9e:	08 95       	ret
    }
    case 'E': // extended parameters - ignore for now
    {
      fill(5);
 aa0:	85 e0       	ldi	r24, 0x05	; 5
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <fill>
      empty_reply();
 aa8:	0e 94 a2 01 	call	0x344	; 0x344 <empty_reply>
      break;
 aac:	08 95       	ret
    }
    case 'P':
    {
      if (!pmode) start_pmode();
 aae:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pmode>
 ab2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <pmode+0x1>
 ab6:	89 2b       	or	r24, r25
 ab8:	11 f4       	brne	.+4      	; 0xabe <avrisp+0x9a>
 aba:	0e 94 70 02 	call	0x4e0	; 0x4e0 <start_pmode>
      empty_reply();
 abe:	0e 94 a2 01 	call	0x344	; 0x344 <empty_reply>
      break;
 ac2:	08 95       	ret
    }
    case 'U': // set address (word)
    {
      here = getch();
 ac4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <here+0x1>
 ace:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <here>
      here += 256 * getch();
 ad2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	98 2f       	mov	r25, r24
 ada:	88 27       	eor	r24, r24
 adc:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <here>
 ae0:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <here+0x1>
 ae4:	82 0f       	add	r24, r18
 ae6:	93 1f       	adc	r25, r19
 ae8:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <here+0x1>
 aec:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <here>
      empty_reply();
 af0:	0e 94 a2 01 	call	0x344	; 0x344 <empty_reply>
      break;
 af4:	08 95       	ret
    }
    case 0x60: //STK_PROG_FLASH
    {
      getch(); // low addr
 af6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
      getch(); // high addr
 afa:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
      empty_reply();
 afe:	0e 94 a2 01 	call	0x344	; 0x344 <empty_reply>
      break;
 b02:	08 95       	ret
    }
    case 0x61: //STK_PROG_DATA
    {
      getch(); // data
 b04:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
      empty_reply();
 b08:	0e 94 a2 01 	call	0x344	; 0x344 <empty_reply>
      break;
 b0c:	08 95       	ret
    }
    case 0x64: //STK_PROG_PAGE
    {
      program_page();
 b0e:	0e 94 13 04 	call	0x826	; 0x826 <program_page>
      break;
 b12:	08 95       	ret
    }
    case 0x74: //STK_READ_PAGE 't'
    {
      read_page();
 b14:	0e 94 a7 04 	call	0x94e	; 0x94e <read_page>
      break;
 b18:	08 95       	ret
    }
    case 'V': //0x56
    {
      universal();
 b1a:	0e 94 ae 02 	call	0x55c	; 0x55c <universal>
      break;
 b1e:	08 95       	ret
    }
    case 'Q': //0x51
    {
      error = 0;
 b20:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <error+0x1>
 b24:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <error>
      end_pmode();
 b28:	0e 94 a3 02 	call	0x546	; 0x546 <end_pmode>
      empty_reply();
 b2c:	0e 94 a2 01 	call	0x344	; 0x344 <empty_reply>
      break;
 b30:	08 95       	ret
    }
    case 0x75: //STK_READ_SIGN 'u'
    {
      read_signature();
 b32:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <read_signature>
      break;
 b36:	08 95       	ret
    }
    // expecting a command, not CRC_EOP
    // this is how we can get back in sync
    case CRC_EOP:
    {
      error++;
 b38:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <error>
 b3c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <error+0x1>
 b40:	01 96       	adiw	r24, 0x01	; 1
 b42:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <error+0x1>
 b46:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <error>
      uart_sendChar(STK_NOSYNC);
 b4a:	85 e1       	ldi	r24, 0x15	; 21
 b4c:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
      break;
 b50:	08 95       	ret
    }
    // anything else we will return STK_UNKNOWN
    default:
    {
      error++;
 b52:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <error>
 b56:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <error+0x1>
 b5a:	01 96       	adiw	r24, 0x01	; 1
 b5c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <error+0x1>
 b60:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <error>
      if (CRC_EOP == getch()) uart_sendChar(STK_UNKNOWN);
 b64:	0e 94 60 01 	call	0x2c0	; 0x2c0 <getch>
 b68:	80 32       	cpi	r24, 0x20	; 32
 b6a:	21 f4       	brne	.+8      	; 0xb74 <avrisp+0x150>
 b6c:	82 e1       	ldi	r24, 0x12	; 18
 b6e:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
 b72:	08 95       	ret
      else uart_sendChar(STK_NOSYNC);
 b74:	85 e1       	ldi	r24, 0x15	; 21
 b76:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
 b7a:	08 95       	ret

00000b7c <spi_init>:
#include "spi.h"


void spi_init(uint8_t speed, uint8_t s2x)
{
	if(speed > 3) speed = speed % 3;
 b7c:	84 30       	cpi	r24, 0x04	; 4
 b7e:	48 f0       	brcs	.+18     	; 0xb92 <spi_init+0x16>
 b80:	9b ea       	ldi	r25, 0xAB	; 171
 b82:	89 9f       	mul	r24, r25
 b84:	91 2d       	mov	r25, r1
 b86:	11 24       	eor	r1, r1
 b88:	96 95       	lsr	r25
 b8a:	29 2f       	mov	r18, r25
 b8c:	22 0f       	add	r18, r18
 b8e:	92 0f       	add	r25, r18
 b90:	89 1b       	sub	r24, r25

	//PULL UP SS pin
	DDRB &= ~(1 << 2);
 b92:	22 98       	cbi	0x04, 2	; 4
	PORTB |= (1 << 2);
 b94:	2a 9a       	sbi	0x05, 2	; 5
	DDRB |= (1 << 3) | (1 << 5);
 b96:	94 b1       	in	r25, 0x04	; 4
 b98:	98 62       	ori	r25, 0x28	; 40
 b9a:	94 b9       	out	0x04, r25	; 4
	DDRB &= ~((1 << 4) | (1 << 2));
 b9c:	94 b1       	in	r25, 0x04	; 4
 b9e:	9b 7e       	andi	r25, 0xEB	; 235
 ba0:	94 b9       	out	0x04, r25	; 4

	if(s2x) SPSR |= (1 << 0);
 ba2:	66 23       	and	r22, r22
 ba4:	21 f0       	breq	.+8      	; 0xbae <spi_init+0x32>
 ba6:	9d b5       	in	r25, 0x2d	; 45
 ba8:	91 60       	ori	r25, 0x01	; 1
 baa:	9d bd       	out	0x2d, r25	; 45
 bac:	03 c0       	rjmp	.+6      	; 0xbb4 <spi_init+0x38>
	else SPSR &= ~(1 << 0);
 bae:	9d b5       	in	r25, 0x2d	; 45
 bb0:	9e 7f       	andi	r25, 0xFE	; 254
 bb2:	9d bd       	out	0x2d, r25	; 45

	SPCR = speed;
 bb4:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << MSTR) | (1 << SPE);
 bb6:	8c b5       	in	r24, 0x2c	; 44
 bb8:	80 65       	ori	r24, 0x50	; 80
 bba:	8c bd       	out	0x2c, r24	; 44
 bbc:	08 95       	ret

00000bbe <spi_deinit>:

}

void spi_deinit(void)
{
	SPCR &= ~(1 << 6);
 bbe:	8c b5       	in	r24, 0x2c	; 44
 bc0:	8f 7b       	andi	r24, 0xBF	; 191
 bc2:	8c bd       	out	0x2c, r24	; 44
 bc4:	08 95       	ret

00000bc6 <SPI_transfer>:
}

uint8_t SPI_transfer(uint8_t spdat)
{
	SPDR = spdat;
 bc6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << 7)));
 bc8:	0d b4       	in	r0, 0x2d	; 45
 bca:	07 fe       	sbrs	r0, 7
 bcc:	fd cf       	rjmp	.-6      	; 0xbc8 <SPI_transfer+0x2>
	return(SPDR);
 bce:	8e b5       	in	r24, 0x2e	; 46
}
 bd0:	08 95       	ret

00000bd2 <uart_init>:

void uart_init(void)
{
	uint16_t divider = CPU_CLOCK/(16 * BAUDE) - 1;

	UCSR0A = 0x00;
 bd2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	//UCSR0B = 0x00;
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 bd6:	88 e9       	ldi	r24, 0x98	; 152
 bd8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = ((1 << UCSZ00) | (1 << UCSZ01));
 bdc:	86 e0       	ldi	r24, 0x06	; 6
 bde:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

	UBRR0H = ((divider>>8) & 0xFF);
 be2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (divider & 0xFF);
 be6:	80 e1       	ldi	r24, 0x10	; 16
 be8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 bec:	08 95       	ret

00000bee <uart_sendChar>:
}

void uart_sendChar(uint8_t tdat)
{
	while(!(UCSR0A & (1<<UDRE0)));
 bee:	e0 ec       	ldi	r30, 0xC0	; 192
 bf0:	f0 e0       	ldi	r31, 0x00	; 0
 bf2:	90 81       	ld	r25, Z
 bf4:	95 ff       	sbrs	r25, 5
 bf6:	fd cf       	rjmp	.-6      	; 0xbf2 <uart_sendChar+0x4>
	UDR0 = tdat;
 bf8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 bfc:	08 95       	ret

00000bfe <uart_sendString>:
}

void uart_sendString(uint8_t *tdat)
{
 bfe:	cf 93       	push	r28
 c00:	df 93       	push	r29
 c02:	ec 01       	movw	r28, r24
	int chr = 0;
	while(tdat[chr]!=0)
 c04:	88 81       	ld	r24, Y
 c06:	88 23       	and	r24, r24
 c08:	31 f0       	breq	.+12     	; 0xc16 <uart_sendString+0x18>
 c0a:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_sendChar(tdat[chr]);
 c0c:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_sendChar>
}

void uart_sendString(uint8_t *tdat)
{
	int chr = 0;
	while(tdat[chr]!=0)
 c10:	89 91       	ld	r24, Y+
 c12:	81 11       	cpse	r24, r1
 c14:	fb cf       	rjmp	.-10     	; 0xc0c <uart_sendString+0xe>
	{
		uart_sendChar(tdat[chr]);
		chr++;
	}
}
 c16:	df 91       	pop	r29
 c18:	cf 91       	pop	r28
 c1a:	08 95       	ret

00000c1c <__tablejump2__>:
 c1c:	ee 0f       	add	r30, r30
 c1e:	ff 1f       	adc	r31, r31
 c20:	05 90       	lpm	r0, Z+
 c22:	f4 91       	lpm	r31, Z
 c24:	e0 2d       	mov	r30, r0
 c26:	09 94       	ijmp

00000c28 <_exit>:
 c28:	f8 94       	cli

00000c2a <__stop_program>:
 c2a:	ff cf       	rjmp	.-2      	; 0xc2a <__stop_program>
